
MyProject01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003bec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003bec  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000654c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e5  00000000  00000000  000265e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00027cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  00028400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a39  00000000  00000000  00028a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bc8  00000000  00000000  000404c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083868  00000000  00000000  00048089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb8f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000cb944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003950 	.word	0x08003950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003950 	.word	0x08003950

0800014c <__io_putchar>:


#include "main.h"
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(ch=='\n'){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	; (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <__io_putchar+0x38>)
 8000164:	f001 faa1 	bl	80016aa <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <__io_putchar+0x38>)
 8000172:	f001 fa9a 	bl	80016aa <HAL_UART_Transmit>
}
 8000176:	bf00      	nop
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003968 	.word	0x08003968
 8000184:	2000008c 	.word	0x2000008c

08000188 <__io_getchar>:
int __io_getchar(void){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	uint8_t ch =0;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000192:	2300      	movs	r3, #0
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <__io_getchar+0x38>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <__io_getchar+0x38>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80001a8:	1df9      	adds	r1, r7, #7
 80001aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001ae:	2201      	movs	r2, #1
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <__io_getchar+0x38>)
 80001b2:	f001 fb0c 	bl	80017ce <HAL_UART_Receive>
	return ch;
 80001b6:	79fb      	ldrb	r3, [r7, #7]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	3708      	adds	r7, #8
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000008c 	.word	0x2000008c

080001c4 <onClick>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void onClick(int n){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	printf("click = %d\n", n);
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <onClick+0x18>)
 80001d0:	f001 fcaa 	bl	8001b28 <iprintf>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	0800396c 	.word	0x0800396c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fad5 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f823 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f891 	bl	8000314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f2:	f000 f865 	bl	80002c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello\n");
 80001f6:	480b      	ldr	r0, [pc, #44]	; (8000224 <main+0x44>)
 80001f8:	f001 fd1c 	bl	8001c34 <puts>

  int n;

  setvbuf(stdin, NULL, _IONBF, 0);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <main+0x48>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	6858      	ldr	r0, [r3, #4]
 8000202:	2300      	movs	r3, #0
 8000204:	2202      	movs	r2, #2
 8000206:	2100      	movs	r1, #0
 8000208:	f001 fd34 	bl	8001c74 <setvbuf>
  scanf("%d", &n);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x4c>)
 8000212:	f001 fd17 	bl	8001c44 <iscanf>
  printf("n=%d\n", n);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4619      	mov	r1, r3
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <main+0x50>)
 800021c:	f001 fc84 	bl	8001b28 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	e7fe      	b.n	8000220 <main+0x40>
 8000222:	bf00      	nop
 8000224:	08003978 	.word	0x08003978
 8000228:	2000000c 	.word	0x2000000c
 800022c:	08003980 	.word	0x08003980
 8000230:	08003984 	.word	0x08003984

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fc68 	bl	8001b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800025a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fdad 	bl	8000ddc <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f8c6 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f81a 	bl	80012e0 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f8b1 	bl	8000418 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002c6:	4a11      	ldr	r2, [pc, #68]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <MX_USART2_UART_Init+0x50>)
 80002ce:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002e4:	220c      	movs	r2, #12
 80002e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_USART2_UART_Init+0x48>)
 80002f6:	f001 f98b 	bl	8001610 <HAL_UART_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000300:	f000 f88a 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000008c 	.word	0x2000008c
 800030c:	40004400 	.word	0x40004400
 8000310:	00119400 	.word	0x00119400

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b37      	ldr	r3, [pc, #220]	; (8000408 <MX_GPIO_Init+0xf4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a36      	ldr	r2, [pc, #216]	; (8000408 <MX_GPIO_Init+0xf4>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b34      	ldr	r3, [pc, #208]	; (8000408 <MX_GPIO_Init+0xf4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b31      	ldr	r3, [pc, #196]	; (8000408 <MX_GPIO_Init+0xf4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a30      	ldr	r2, [pc, #192]	; (8000408 <MX_GPIO_Init+0xf4>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <MX_GPIO_Init+0xf4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <MX_GPIO_Init+0xf4>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <MX_GPIO_Init+0xf4>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b28      	ldr	r3, [pc, #160]	; (8000408 <MX_GPIO_Init+0xf4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2120      	movs	r1, #32
 8000374:	4825      	ldr	r0, [pc, #148]	; (800040c <MX_GPIO_Init+0xf8>)
 8000376:	f000 fd01 	bl	8000d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800037a:	f242 030f 	movw	r3, #8207	; 0x200f
 800037e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <MX_GPIO_Init+0xfc>)
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	4821      	ldr	r0, [pc, #132]	; (8000414 <MX_GPIO_Init+0x100>)
 8000390:	f000 fb70 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000394:	2320      	movs	r3, #32
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2302      	movs	r3, #2
 80003a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4818      	ldr	r0, [pc, #96]	; (800040c <MX_GPIO_Init+0xf8>)
 80003ac:	f000 fb62 	bl	8000a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2100      	movs	r1, #0
 80003b4:	2006      	movs	r0, #6
 80003b6:	f000 fb26 	bl	8000a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003ba:	2006      	movs	r0, #6
 80003bc:	f000 fb3f 	bl	8000a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2100      	movs	r1, #0
 80003c4:	2007      	movs	r0, #7
 80003c6:	f000 fb1e 	bl	8000a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80003ca:	2007      	movs	r0, #7
 80003cc:	f000 fb37 	bl	8000a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2008      	movs	r0, #8
 80003d6:	f000 fb16 	bl	8000a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003da:	2008      	movs	r0, #8
 80003dc:	f000 fb2f 	bl	8000a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2009      	movs	r0, #9
 80003e6:	f000 fb0e 	bl	8000a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80003ea:	2009      	movs	r0, #9
 80003ec:	f000 fb27 	bl	8000a3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2100      	movs	r1, #0
 80003f4:	2028      	movs	r0, #40	; 0x28
 80003f6:	f000 fb06 	bl	8000a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fa:	2028      	movs	r0, #40	; 0x28
 80003fc:	f000 fb1f 	bl	8000a3e <HAL_NVIC_EnableIRQ>

}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800
 8000410:	10110000 	.word	0x10110000
 8000414:	40011000 	.word	0x40011000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <HAL_UART_MspInit+0x70>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d123      	bne.n	80004f0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a13      	ldr	r2, [pc, #76]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b2:	61d3      	str	r3, [r2, #28]
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_UART_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004d8:	230c      	movs	r3, #12
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <HAL_UART_MspInit+0x78>)
 80004ec:	f000 fac2 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40004400 	.word	0x40004400
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler+0x4>

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <MemManage_Handler+0x4>

08000516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <UsageFault_Handler+0x4>

08000522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054a:	f000 f969 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fc28 	bl	8000dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000564:	2002      	movs	r0, #2
 8000566:	f000 fc21 	bl	8000dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}

0800056e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000572:	2004      	movs	r0, #4
 8000574:	f000 fc1a 	bl	8000dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000580:	2008      	movs	r0, #8
 8000582:	f000 fc13 	bl	8000dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}

0800058a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800058e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000592:	f000 fc0b 	bl	8000dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_GPIO_EXTI_Callback>:

__weak void onClick(int n){
	UNUSED(n);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	2b07      	cmp	r3, #7
 80005ac:	d822      	bhi.n	80005f4 <HAL_GPIO_EXTI_Callback+0x58>
 80005ae:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <HAL_GPIO_EXTI_Callback+0x18>)
 80005b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b4:	080005d5 	.word	0x080005d5
 80005b8:	080005dd 	.word	0x080005dd
 80005bc:	080005f5 	.word	0x080005f5
 80005c0:	080005e5 	.word	0x080005e5
 80005c4:	080005f5 	.word	0x080005f5
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	080005f5 	.word	0x080005f5
 80005d0:	080005ed 	.word	0x080005ed
	case GPIO_PIN_0:
		onClick(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff fdf5 	bl	80001c4 <onClick>
		break;
 80005da:	e00b      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x58>
	case GPIO_PIN_1:
			onClick(2);
 80005dc:	2002      	movs	r0, #2
 80005de:	f7ff fdf1 	bl	80001c4 <onClick>
			break;
 80005e2:	e007      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x58>
	case GPIO_PIN_2:
			onClick(3);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f7ff fded 	bl	80001c4 <onClick>
			break;
 80005ea:	e003      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x58>
	case GPIO_PIN_3:
			onClick(4);
 80005ec:	2004      	movs	r0, #4
 80005ee:	f7ff fde9 	bl	80001c4 <onClick>
			break;
 80005f2:	bf00      	nop

	}
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e00a      	b.n	8000624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800060e:	f7ff fdbb 	bl	8000188 <__io_getchar>
 8000612:	4601      	mov	r1, r0
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	b2ca      	uxtb	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf0      	blt.n	800060e <_read+0x12>
	}

return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	e009      	b.n	800065c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fd7b 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf1      	blt.n	8000648 <_write+0x12>
	}
	return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_close>:

int _close(int file)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	return -1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000694:	605a      	str	r2, [r3, #4]
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <_isatty>:

int _isatty(int file)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	return 1;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f001 f9e0 	bl	8001ac4 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20005000 	.word	0x20005000
 8000730:	00000400 	.word	0x00000400
 8000734:	200000d0 	.word	0x200000d0
 8000738:	200000e8 	.word	0x200000e8

0800073c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	; (800078c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076e:	f7ff ffe5 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000772:	f001 f9ad 	bl	8001ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fd33 	bl	80001e0 <main>
  bx lr
 800077a:	4770      	bx	lr
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000784:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000788:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800078c:	200000e8 	.word	0x200000e8

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f923 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff fe38 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f93b 	bl	8000a5a <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 f903 	bl	8000a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	20000008 	.word	0x20000008
 800081c:	20000004 	.word	0x20000004

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	200000d4 	.word	0x200000d4

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	200000d4 	.word	0x200000d4

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4906      	ldr	r1, [pc, #24]	; (80008f0 <__NVIC_EnableIRQ+0x34>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009bc:	d301      	bcc.n	80009c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009be:	2301      	movs	r3, #1
 80009c0:	e00f      	b.n	80009e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <SysTick_Config+0x40>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ca:	210f      	movs	r1, #15
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f7ff ff90 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SysTick_Config+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x40>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff2d 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff42 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ff90 	bl	8000948 <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff5f 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff35 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffa2 	bl	80009ac <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b08b      	sub	sp, #44	; 0x2c
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a86:	e169      	b.n	8000d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	f040 8158 	bne.w	8000d56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4a9a      	ldr	r2, [pc, #616]	; (8000d14 <HAL_GPIO_Init+0x2a0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d05e      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ab0:	4a98      	ldr	r2, [pc, #608]	; (8000d14 <HAL_GPIO_Init+0x2a0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d875      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ab6:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <HAL_GPIO_Init+0x2a4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d058      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000abc:	4a96      	ldr	r2, [pc, #600]	; (8000d18 <HAL_GPIO_Init+0x2a4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d86f      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ac2:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_GPIO_Init+0x2a8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d052      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ac8:	4a94      	ldr	r2, [pc, #592]	; (8000d1c <HAL_GPIO_Init+0x2a8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d869      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ace:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <HAL_GPIO_Init+0x2ac>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d04c      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ad4:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_GPIO_Init+0x2ac>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d863      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ada:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_GPIO_Init+0x2b0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d046      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ae0:	4a90      	ldr	r2, [pc, #576]	; (8000d24 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d85d      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d82a      	bhi.n	8000b40 <HAL_GPIO_Init+0xcc>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d859      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <HAL_GPIO_Init+0x80>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b5b 	.word	0x08000b5b
 8000b00:	08000b9d 	.word	0x08000b9d
 8000b04:	08000ba3 	.word	0x08000ba3
 8000b08:	08000ba3 	.word	0x08000ba3
 8000b0c:	08000ba3 	.word	0x08000ba3
 8000b10:	08000ba3 	.word	0x08000ba3
 8000b14:	08000ba3 	.word	0x08000ba3
 8000b18:	08000ba3 	.word	0x08000ba3
 8000b1c:	08000ba3 	.word	0x08000ba3
 8000b20:	08000ba3 	.word	0x08000ba3
 8000b24:	08000ba3 	.word	0x08000ba3
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000ba3 	.word	0x08000ba3
 8000b30:	08000ba3 	.word	0x08000ba3
 8000b34:	08000ba3 	.word	0x08000ba3
 8000b38:	08000b51 	.word	0x08000b51
 8000b3c:	08000b65 	.word	0x08000b65
 8000b40:	4a79      	ldr	r2, [pc, #484]	; (8000d28 <HAL_GPIO_Init+0x2b4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b46:	e02c      	b.n	8000ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e029      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	3304      	adds	r3, #4
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	e024      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	3308      	adds	r3, #8
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e01f      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	330c      	adds	r3, #12
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e01a      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b76:	2304      	movs	r3, #4
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e013      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d105      	bne.n	8000b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b84:	2308      	movs	r3, #8
 8000b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	611a      	str	r2, [r3, #16]
          break;
 8000b8e:	e009      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	615a      	str	r2, [r3, #20]
          break;
 8000b9a:	e003      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
          break;
 8000ba0:	e000      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          break;
 8000ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2bff      	cmp	r3, #255	; 0xff
 8000ba8:	d801      	bhi.n	8000bae <HAL_GPIO_Init+0x13a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	e001      	b.n	8000bb2 <HAL_GPIO_Init+0x13e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2bff      	cmp	r3, #255	; 0xff
 8000bb8:	d802      	bhi.n	8000bc0 <HAL_GPIO_Init+0x14c>
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x152>
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	3b08      	subs	r3, #8
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	210f      	movs	r1, #15
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	6a39      	ldr	r1, [r7, #32]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	431a      	orrs	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80b1 	beq.w	8000d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2bc>)
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <HAL_GPIO_Init+0x2c0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d013      	beq.n	8000c60 <HAL_GPIO_Init+0x1ec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <HAL_GPIO_Init+0x2c4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00d      	beq.n	8000c5c <HAL_GPIO_Init+0x1e8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_GPIO_Init+0x1e0>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c60:	2300      	movs	r3, #0
 8000c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2bc>)
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	492c      	ldr	r1, [pc, #176]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	600b      	str	r3, [r1, #0]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4928      	ldr	r1, [pc, #160]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4922      	ldr	r1, [pc, #136]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	604b      	str	r3, [r1, #4]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	491e      	ldr	r1, [pc, #120]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4914      	ldr	r1, [pc, #80]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d021      	beq.n	8000d48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	490e      	ldr	r1, [pc, #56]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60cb      	str	r3, [r1, #12]
 8000d10:	e021      	b.n	8000d56 <HAL_GPIO_Init+0x2e2>
 8000d12:	bf00      	nop
 8000d14:	10320000 	.word	0x10320000
 8000d18:	10310000 	.word	0x10310000
 8000d1c:	10220000 	.word	0x10220000
 8000d20:	10210000 	.word	0x10210000
 8000d24:	10120000 	.word	0x10120000
 8000d28:	10110000 	.word	0x10110000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	3301      	adds	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	fa22 f303 	lsr.w	r3, r2, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f47f ae8e 	bne.w	8000a88 <HAL_GPIO_Init+0x14>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	372c      	adds	r7, #44	; 0x2c
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d98:	e003      	b.n	8000da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	611a      	str	r2, [r3, #16]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fbe6 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010400 	.word	0x40010400

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e272      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8087 	beq.w	8000f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d112      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
 8000e14:	4b8c      	ldr	r3, [pc, #560]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x12c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d168      	bne.n	8000f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e24c      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x76>
 8000e44:	4b80      	ldr	r3, [pc, #512]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a7f      	ldr	r2, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x98>
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7a      	ldr	r2, [pc, #488]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b78      	ldr	r3, [pc, #480]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a77      	ldr	r2, [pc, #476]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xbc>
 8000e7e:	4b72      	ldr	r3, [pc, #456]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a71      	ldr	r2, [pc, #452]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a67      	ldr	r2, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fcc4 	bl	8000844 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fcc0 	bl	8000844 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e200      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe4>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fcb0 	bl	8000844 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fcac 	bl	8000844 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1ec      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x10c>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d063      	beq.n	8000fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f16:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1c0      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4939      	ldr	r1, [pc, #228]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e03a      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc65 	bl	8000844 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fc61 	bl	8000844 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e1a1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4927      	ldr	r1, [pc, #156]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc44 	bl	8000844 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc40 	bl	8000844 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e180      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03a      	beq.n	8001060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc24 	bl	8000844 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc20 	bl	8000844 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e160      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 fad8 	bl	80015d4 <RCC_Delay>
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fc0a 	bl	8000844 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001032:	e00f      	b.n	8001054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc06 	bl	8000844 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d908      	bls.n	8001054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e146      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	42420000 	.word	0x42420000
 8001050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e9      	bne.n	8001034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a6 	beq.w	80011ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10d      	bne.n	800109a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001096:	2301      	movs	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d118      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7e      	ldr	r2, [pc, #504]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fbc7 	bl	8000844 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ba:	f7ff fbc3 	bl	8000844 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e103      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b75      	ldr	r3, [pc, #468]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x312>
 80010e0:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e02d      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x334>
 80010f6:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a66      	ldr	r2, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e01c      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10c      	bne.n	8001132 <HAL_RCC_OscConfig+0x356>
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a60      	ldr	r2, [pc, #384]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	e00b      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d015      	beq.n	800117e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fb77 	bl	8000844 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fb73 	bl	8000844 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	; 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0b1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ee      	beq.n	800115a <HAL_RCC_OscConfig+0x37e>
 800117c:	e014      	b.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb61 	bl	8000844 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fb5d 	bl	8000844 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e09b      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ee      	bne.n	8001186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d061      	beq.n	8001294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d146      	bne.n	8001266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb31 	bl	8000844 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fb2d 	bl	8000844 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e06d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d108      	bne.n	8001220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4921      	ldr	r1, [pc, #132]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a19      	ldr	r1, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	430b      	orrs	r3, r1
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb01 	bl	8000844 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fafd 	bl	8000844 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e03d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x46a>
 8001264:	e035      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff faea 	bl	8000844 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fae6 	bl	8000844 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e026      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x498>
 8001292:	e01e      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e019      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x500>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0d0      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d910      	bls.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4965      	ldr	r1, [pc, #404]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0b8      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800133c:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800135e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	494d      	ldr	r1, [pc, #308]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d040      	beq.n	8001400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e07f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e073      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e06b      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 0203 	bic.w	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4936      	ldr	r1, [pc, #216]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fa38 	bl	8000844 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff fa34 	bl	8000844 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e053      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 020c 	and.w	r2, r3, #12
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d1eb      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d210      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 0207 	bic.w	r2, r3, #7
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e032      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4916      	ldr	r1, [pc, #88]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146e:	f000 f821 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 8001472:	4602      	mov	r2, r0
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001480:	5ccb      	ldrb	r3, [r1, r3]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1cc>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f996 	bl	80007c0 <HAL_InitTick>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	080039a8 	.word	0x080039a8
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b4:	b490      	push	{r4, r7}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_RCC_GetSysClockFreq+0xac>)
 80014bc:	1d3c      	adds	r4, r7, #4
 80014be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c4:	f240 2301 	movw	r3, #513	; 0x201
 80014c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x40>
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d003      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0x46>
 80014f2:	e02b      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014f6:	623b      	str	r3, [r7, #32]
      break;
 80014f8:	e02b      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	0c9b      	lsrs	r3, r3, #18
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3328      	adds	r3, #40	; 0x28
 8001504:	443b      	add	r3, r7
 8001506:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800150a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d012      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0c5b      	lsrs	r3, r3, #17
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	3328      	adds	r3, #40	; 0x28
 8001522:	443b      	add	r3, r7
 8001524:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001528:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb4>)
 800152e:	fb03 f202 	mul.w	r2, r3, r2
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e004      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	623b      	str	r3, [r7, #32]
      break;
 800154a:	e002      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb4>)
 800154e:	623b      	str	r3, [r7, #32]
      break;
 8001550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001552:	6a3b      	ldr	r3, [r7, #32]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bc90      	pop	{r4, r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	0800398c 	.word	0x0800398c
 8001564:	40021000 	.word	0x40021000
 8001568:	007a1200 	.word	0x007a1200
 800156c:	003d0900 	.word	0x003d0900

08001570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_RCC_GetHCLKFreq+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff2 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	080039b8 	.word	0x080039b8

080015ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b0:	f7ff ffde 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0adb      	lsrs	r3, r3, #11
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	080039b8 	.word	0x080039b8

080015d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <RCC_Delay+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <RCC_Delay+0x38>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a5b      	lsrs	r3, r3, #9
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015f0:	bf00      	nop
  }
  while (Delay --);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f9      	bne.n	80015f0 <RCC_Delay+0x1c>
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e03f      	b.n	80016a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7fe ff26 	bl	8000488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f9a7 	bl	80019a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b08a      	sub	sp, #40	; 0x28
 80016ae:	af02      	add	r7, sp, #8
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d17c      	bne.n	80017c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_UART_Transmit+0x2c>
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e075      	b.n	80017c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_UART_Transmit+0x3e>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e06e      	b.n	80017c6 <HAL_UART_Transmit+0x11c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2221      	movs	r2, #33	; 0x21
 80016fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016fe:	f7ff f8a1 	bl	8000844 <HAL_GetTick>
 8001702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001718:	d108      	bne.n	800172c <HAL_UART_Transmit+0x82>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d104      	bne.n	800172c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	e003      	b.n	8001734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800173c:	e02a      	b.n	8001794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2200      	movs	r2, #0
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f8e2 	bl	8001912 <UART_WaitOnFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e036      	b.n	80017c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800176c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	3302      	adds	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	e007      	b.n	8001786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1cf      	bne.n	800173e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	2140      	movs	r1, #64	; 0x40
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f8b2 	bl	8001912 <UART_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e006      	b.n	80017c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017c4:	2302      	movs	r3, #2
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b08a      	sub	sp, #40	; 0x28
 80017d2:	af02      	add	r7, sp, #8
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4613      	mov	r3, r2
 80017dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	f040 808c 	bne.w	8001908 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_UART_Receive+0x2e>
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e084      	b.n	800190a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_UART_Receive+0x40>
 800180a:	2302      	movs	r3, #2
 800180c:	e07d      	b.n	800190a <HAL_UART_Receive+0x13c>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2222      	movs	r2, #34	; 0x22
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800182a:	f7ff f80b 	bl	8000844 <HAL_GetTick>
 800182e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	88fa      	ldrh	r2, [r7, #6]
 800183a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001844:	d108      	bne.n	8001858 <HAL_UART_Receive+0x8a>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	e003      	b.n	8001860 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001868:	e043      	b.n	80018f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	2120      	movs	r1, #32
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f84c 	bl	8001912 <UART_WaitOnFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e042      	b.n	800190a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001896:	b29a      	uxth	r2, r3
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	3302      	adds	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	e01f      	b.n	80018e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ac:	d007      	beq.n	80018be <HAL_UART_Receive+0xf0>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <HAL_UART_Receive+0xfe>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e008      	b.n	80018de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1b6      	bne.n	800186a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001922:	e02c      	b.n	800197e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192a:	d028      	beq.n	800197e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <UART_WaitOnFlagUntilTimeout+0x30>
 8001932:	f7fe ff87 	bl	8000844 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	429a      	cmp	r2, r3
 8001940:	d21d      	bcs.n	800197e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001950:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e00f      	b.n	800199e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4013      	ands	r3, r2
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	429a      	cmp	r2, r3
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	429a      	cmp	r2, r3
 800199a:	d0c3      	beq.n	8001924 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019e2:	f023 030c 	bic.w	r3, r3, #12
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <UART_SetConfig+0x114>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d103      	bne.n	8001a18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a10:	f7ff fdcc 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a18:	f7ff fdb4 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 8001a1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009a      	lsls	r2, r3, #2
 8001a28:	441a      	add	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <UART_SetConfig+0x118>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	0119      	lsls	r1, r3, #4
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009a      	lsls	r2, r3, #2
 8001a48:	441a      	add	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <UART_SetConfig+0x118>)
 8001a56:	fba3 0302 	umull	r0, r3, r3, r2
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	fb00 f303 	mul.w	r3, r0, r3
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	3332      	adds	r3, #50	; 0x32
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <UART_SetConfig+0x118>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	4419      	add	r1, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009a      	lsls	r2, r3, #2
 8001a80:	441a      	add	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <UART_SetConfig+0x118>)
 8001a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2064      	movs	r0, #100	; 0x64
 8001a96:	fb00 f303 	mul.w	r3, r0, r3
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	3332      	adds	r3, #50	; 0x32
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <UART_SetConfig+0x118>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	f003 020f 	and.w	r2, r3, #15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	51eb851f 	.word	0x51eb851f

08001ac4 <__errno>:
 8001ac4:	4b01      	ldr	r3, [pc, #4]	; (8001acc <__errno+0x8>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <__libc_init_array>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	4d0c      	ldr	r5, [pc, #48]	; (8001b08 <__libc_init_array+0x38>)
 8001ad6:	4c0d      	ldr	r4, [pc, #52]	; (8001b0c <__libc_init_array+0x3c>)
 8001ad8:	1b64      	subs	r4, r4, r5
 8001ada:	10a4      	asrs	r4, r4, #2
 8001adc:	42a6      	cmp	r6, r4
 8001ade:	d109      	bne.n	8001af4 <__libc_init_array+0x24>
 8001ae0:	f001 ff36 	bl	8003950 <_init>
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	4d0a      	ldr	r5, [pc, #40]	; (8001b10 <__libc_init_array+0x40>)
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <__libc_init_array+0x44>)
 8001aea:	1b64      	subs	r4, r4, r5
 8001aec:	10a4      	asrs	r4, r4, #2
 8001aee:	42a6      	cmp	r6, r4
 8001af0:	d105      	bne.n	8001afe <__libc_init_array+0x2e>
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af8:	4798      	blx	r3
 8001afa:	3601      	adds	r6, #1
 8001afc:	e7ee      	b.n	8001adc <__libc_init_array+0xc>
 8001afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b02:	4798      	blx	r3
 8001b04:	3601      	adds	r6, #1
 8001b06:	e7f2      	b.n	8001aee <__libc_init_array+0x1e>
 8001b08:	08003b74 	.word	0x08003b74
 8001b0c:	08003b74 	.word	0x08003b74
 8001b10:	08003b74 	.word	0x08003b74
 8001b14:	08003b78 	.word	0x08003b78

08001b18 <memset>:
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4402      	add	r2, r0
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <memset+0xa>
 8001b20:	4770      	bx	lr
 8001b22:	f803 1b01 	strb.w	r1, [r3], #1
 8001b26:	e7f9      	b.n	8001b1c <memset+0x4>

08001b28 <iprintf>:
 8001b28:	b40f      	push	{r0, r1, r2, r3}
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <iprintf+0x2c>)
 8001b2c:	b513      	push	{r0, r1, r4, lr}
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	b124      	cbz	r4, 8001b3c <iprintf+0x14>
 8001b32:	69a3      	ldr	r3, [r4, #24]
 8001b34:	b913      	cbnz	r3, 8001b3c <iprintf+0x14>
 8001b36:	4620      	mov	r0, r4
 8001b38:	f000 fb4a 	bl	80021d0 <__sinit>
 8001b3c:	ab05      	add	r3, sp, #20
 8001b3e:	4620      	mov	r0, r4
 8001b40:	9a04      	ldr	r2, [sp, #16]
 8001b42:	68a1      	ldr	r1, [r4, #8]
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	f000 fd71 	bl	800262c <_vfiprintf_r>
 8001b4a:	b002      	add	sp, #8
 8001b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b50:	b004      	add	sp, #16
 8001b52:	4770      	bx	lr
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <_puts_r>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	460e      	mov	r6, r1
 8001b5c:	4605      	mov	r5, r0
 8001b5e:	b118      	cbz	r0, 8001b68 <_puts_r+0x10>
 8001b60:	6983      	ldr	r3, [r0, #24]
 8001b62:	b90b      	cbnz	r3, 8001b68 <_puts_r+0x10>
 8001b64:	f000 fb34 	bl	80021d0 <__sinit>
 8001b68:	69ab      	ldr	r3, [r5, #24]
 8001b6a:	68ac      	ldr	r4, [r5, #8]
 8001b6c:	b913      	cbnz	r3, 8001b74 <_puts_r+0x1c>
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f000 fb2e 	bl	80021d0 <__sinit>
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <_puts_r+0xd0>)
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d120      	bne.n	8001bbc <_puts_r+0x64>
 8001b7a:	686c      	ldr	r4, [r5, #4]
 8001b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b7e:	07db      	lsls	r3, r3, #31
 8001b80:	d405      	bmi.n	8001b8e <_puts_r+0x36>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	0598      	lsls	r0, r3, #22
 8001b86:	d402      	bmi.n	8001b8e <_puts_r+0x36>
 8001b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b8a:	f000 fbdc 	bl	8002346 <__retarget_lock_acquire_recursive>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	0719      	lsls	r1, r3, #28
 8001b92:	d51d      	bpl.n	8001bd0 <_puts_r+0x78>
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	b1db      	cbz	r3, 8001bd0 <_puts_r+0x78>
 8001b98:	3e01      	subs	r6, #1
 8001b9a:	68a3      	ldr	r3, [r4, #8]
 8001b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60a3      	str	r3, [r4, #8]
 8001ba4:	bb39      	cbnz	r1, 8001bf6 <_puts_r+0x9e>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da38      	bge.n	8001c1c <_puts_r+0xc4>
 8001baa:	4622      	mov	r2, r4
 8001bac:	210a      	movs	r1, #10
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 f926 	bl	8001e00 <__swbuf_r>
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d011      	beq.n	8001bdc <_puts_r+0x84>
 8001bb8:	250a      	movs	r5, #10
 8001bba:	e011      	b.n	8001be0 <_puts_r+0x88>
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <_puts_r+0xd4>)
 8001bbe:	429c      	cmp	r4, r3
 8001bc0:	d101      	bne.n	8001bc6 <_puts_r+0x6e>
 8001bc2:	68ac      	ldr	r4, [r5, #8]
 8001bc4:	e7da      	b.n	8001b7c <_puts_r+0x24>
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <_puts_r+0xd8>)
 8001bc8:	429c      	cmp	r4, r3
 8001bca:	bf08      	it	eq
 8001bcc:	68ec      	ldreq	r4, [r5, #12]
 8001bce:	e7d5      	b.n	8001b7c <_puts_r+0x24>
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f000 f966 	bl	8001ea4 <__swsetup_r>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d0dd      	beq.n	8001b98 <_puts_r+0x40>
 8001bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8001be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001be2:	07da      	lsls	r2, r3, #31
 8001be4:	d405      	bmi.n	8001bf2 <_puts_r+0x9a>
 8001be6:	89a3      	ldrh	r3, [r4, #12]
 8001be8:	059b      	lsls	r3, r3, #22
 8001bea:	d402      	bmi.n	8001bf2 <_puts_r+0x9a>
 8001bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bee:	f000 fbab 	bl	8002348 <__retarget_lock_release_recursive>
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da04      	bge.n	8001c04 <_puts_r+0xac>
 8001bfa:	69a2      	ldr	r2, [r4, #24]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dc06      	bgt.n	8001c0e <_puts_r+0xb6>
 8001c00:	290a      	cmp	r1, #10
 8001c02:	d004      	beq.n	8001c0e <_puts_r+0xb6>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	6022      	str	r2, [r4, #0]
 8001c0a:	7019      	strb	r1, [r3, #0]
 8001c0c:	e7c5      	b.n	8001b9a <_puts_r+0x42>
 8001c0e:	4622      	mov	r2, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	f000 f8f5 	bl	8001e00 <__swbuf_r>
 8001c16:	3001      	adds	r0, #1
 8001c18:	d1bf      	bne.n	8001b9a <_puts_r+0x42>
 8001c1a:	e7df      	b.n	8001bdc <_puts_r+0x84>
 8001c1c:	250a      	movs	r5, #10
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	6022      	str	r2, [r4, #0]
 8001c24:	701d      	strb	r5, [r3, #0]
 8001c26:	e7db      	b.n	8001be0 <_puts_r+0x88>
 8001c28:	080039e4 	.word	0x080039e4
 8001c2c:	08003a04 	.word	0x08003a04
 8001c30:	080039c4 	.word	0x080039c4

08001c34 <puts>:
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <puts+0xc>)
 8001c36:	4601      	mov	r1, r0
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f7ff bf8d 	b.w	8001b58 <_puts_r>
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <iscanf>:
 8001c44:	b40f      	push	{r0, r1, r2, r3}
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <iscanf+0x2c>)
 8001c48:	b513      	push	{r0, r1, r4, lr}
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	b124      	cbz	r4, 8001c58 <iscanf+0x14>
 8001c4e:	69a3      	ldr	r3, [r4, #24]
 8001c50:	b913      	cbnz	r3, 8001c58 <iscanf+0x14>
 8001c52:	4620      	mov	r0, r4
 8001c54:	f000 fabc 	bl	80021d0 <__sinit>
 8001c58:	ab05      	add	r3, sp, #20
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	9a04      	ldr	r2, [sp, #16]
 8001c5e:	6861      	ldr	r1, [r4, #4]
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f001 f94f 	bl	8002f04 <_vfiscanf_r>
 8001c66:	b002      	add	sp, #8
 8001c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c6c:	b004      	add	sp, #16
 8001c6e:	4770      	bx	lr
 8001c70:	2000000c 	.word	0x2000000c

08001c74 <setvbuf>:
 8001c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c78:	461d      	mov	r5, r3
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <setvbuf+0x17c>)
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	681f      	ldr	r7, [r3, #0]
 8001c80:	460e      	mov	r6, r1
 8001c82:	4690      	mov	r8, r2
 8001c84:	b127      	cbz	r7, 8001c90 <setvbuf+0x1c>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	b913      	cbnz	r3, 8001c90 <setvbuf+0x1c>
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	f000 faa0 	bl	80021d0 <__sinit>
 8001c90:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <setvbuf+0x180>)
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d167      	bne.n	8001d66 <setvbuf+0xf2>
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	f1b8 0f02 	cmp.w	r8, #2
 8001c9c:	d006      	beq.n	8001cac <setvbuf+0x38>
 8001c9e:	f1b8 0f01 	cmp.w	r8, #1
 8001ca2:	f200 809f 	bhi.w	8001de4 <setvbuf+0x170>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	f2c0 809c 	blt.w	8001de4 <setvbuf+0x170>
 8001cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cae:	07db      	lsls	r3, r3, #31
 8001cb0:	d405      	bmi.n	8001cbe <setvbuf+0x4a>
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	0598      	lsls	r0, r3, #22
 8001cb6:	d402      	bmi.n	8001cbe <setvbuf+0x4a>
 8001cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cba:	f000 fb44 	bl	8002346 <__retarget_lock_acquire_recursive>
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f000 f9df 	bl	8002084 <_fflush_r>
 8001cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cc8:	b141      	cbz	r1, 8001cdc <setvbuf+0x68>
 8001cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d002      	beq.n	8001cd8 <setvbuf+0x64>
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	f000 fba6 	bl	8002424 <_free_r>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6363      	str	r3, [r4, #52]	; 0x34
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61a3      	str	r3, [r4, #24]
 8001ce0:	6063      	str	r3, [r4, #4]
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	0619      	lsls	r1, r3, #24
 8001ce6:	d503      	bpl.n	8001cf0 <setvbuf+0x7c>
 8001ce8:	4638      	mov	r0, r7
 8001cea:	6921      	ldr	r1, [r4, #16]
 8001cec:	f000 fb9a 	bl	8002424 <_free_r>
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	f1b8 0f02 	cmp.w	r8, #2
 8001cf6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	81a3      	strh	r3, [r4, #12]
 8001d00:	d06c      	beq.n	8001ddc <setvbuf+0x168>
 8001d02:	ab01      	add	r3, sp, #4
 8001d04:	466a      	mov	r2, sp
 8001d06:	4621      	mov	r1, r4
 8001d08:	4638      	mov	r0, r7
 8001d0a:	f000 fb1e 	bl	800234a <__swhatbuf_r>
 8001d0e:	89a3      	ldrh	r3, [r4, #12]
 8001d10:	4318      	orrs	r0, r3
 8001d12:	81a0      	strh	r0, [r4, #12]
 8001d14:	2d00      	cmp	r5, #0
 8001d16:	d130      	bne.n	8001d7a <setvbuf+0x106>
 8001d18:	9d00      	ldr	r5, [sp, #0]
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 fb7a 	bl	8002414 <malloc>
 8001d20:	4606      	mov	r6, r0
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d155      	bne.n	8001dd2 <setvbuf+0x15e>
 8001d26:	f8dd 9000 	ldr.w	r9, [sp]
 8001d2a:	45a9      	cmp	r9, r5
 8001d2c:	d14a      	bne.n	8001dc4 <setvbuf+0x150>
 8001d2e:	f04f 35ff 	mov.w	r5, #4294967295
 8001d32:	2200      	movs	r2, #0
 8001d34:	60a2      	str	r2, [r4, #8]
 8001d36:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001d3a:	6022      	str	r2, [r4, #0]
 8001d3c:	6122      	str	r2, [r4, #16]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d44:	6162      	str	r2, [r4, #20]
 8001d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	07d2      	lsls	r2, r2, #31
 8001d4e:	81a3      	strh	r3, [r4, #12]
 8001d50:	d405      	bmi.n	8001d5e <setvbuf+0xea>
 8001d52:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d56:	d102      	bne.n	8001d5e <setvbuf+0xea>
 8001d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d5a:	f000 faf5 	bl	8002348 <__retarget_lock_release_recursive>
 8001d5e:	4628      	mov	r0, r5
 8001d60:	b003      	add	sp, #12
 8001d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <setvbuf+0x184>)
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	d101      	bne.n	8001d70 <setvbuf+0xfc>
 8001d6c:	68bc      	ldr	r4, [r7, #8]
 8001d6e:	e793      	b.n	8001c98 <setvbuf+0x24>
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <setvbuf+0x188>)
 8001d72:	429c      	cmp	r4, r3
 8001d74:	bf08      	it	eq
 8001d76:	68fc      	ldreq	r4, [r7, #12]
 8001d78:	e78e      	b.n	8001c98 <setvbuf+0x24>
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d0cd      	beq.n	8001d1a <setvbuf+0xa6>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	b913      	cbnz	r3, 8001d88 <setvbuf+0x114>
 8001d82:	4638      	mov	r0, r7
 8001d84:	f000 fa24 	bl	80021d0 <__sinit>
 8001d88:	f1b8 0f01 	cmp.w	r8, #1
 8001d8c:	bf08      	it	eq
 8001d8e:	89a3      	ldrheq	r3, [r4, #12]
 8001d90:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001d94:	bf04      	itt	eq
 8001d96:	f043 0301 	orreq.w	r3, r3, #1
 8001d9a:	81a3      	strheq	r3, [r4, #12]
 8001d9c:	89a2      	ldrh	r2, [r4, #12]
 8001d9e:	6026      	str	r6, [r4, #0]
 8001da0:	f012 0308 	ands.w	r3, r2, #8
 8001da4:	d01c      	beq.n	8001de0 <setvbuf+0x16c>
 8001da6:	07d3      	lsls	r3, r2, #31
 8001da8:	bf41      	itttt	mi
 8001daa:	2300      	movmi	r3, #0
 8001dac:	426d      	negmi	r5, r5
 8001dae:	60a3      	strmi	r3, [r4, #8]
 8001db0:	61a5      	strmi	r5, [r4, #24]
 8001db2:	bf58      	it	pl
 8001db4:	60a5      	strpl	r5, [r4, #8]
 8001db6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001db8:	f015 0501 	ands.w	r5, r5, #1
 8001dbc:	d115      	bne.n	8001dea <setvbuf+0x176>
 8001dbe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001dc2:	e7c8      	b.n	8001d56 <setvbuf+0xe2>
 8001dc4:	4648      	mov	r0, r9
 8001dc6:	f000 fb25 	bl	8002414 <malloc>
 8001dca:	4606      	mov	r6, r0
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d0ae      	beq.n	8001d2e <setvbuf+0xba>
 8001dd0:	464d      	mov	r5, r9
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	81a3      	strh	r3, [r4, #12]
 8001dda:	e7d0      	b.n	8001d7e <setvbuf+0x10a>
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e7a8      	b.n	8001d32 <setvbuf+0xbe>
 8001de0:	60a3      	str	r3, [r4, #8]
 8001de2:	e7e8      	b.n	8001db6 <setvbuf+0x142>
 8001de4:	f04f 35ff 	mov.w	r5, #4294967295
 8001de8:	e7b9      	b.n	8001d5e <setvbuf+0xea>
 8001dea:	2500      	movs	r5, #0
 8001dec:	e7b7      	b.n	8001d5e <setvbuf+0xea>
 8001dee:	bf00      	nop
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	080039e4 	.word	0x080039e4
 8001df8:	08003a04 	.word	0x08003a04
 8001dfc:	080039c4 	.word	0x080039c4

08001e00 <__swbuf_r>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	460e      	mov	r6, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	4605      	mov	r5, r0
 8001e08:	b118      	cbz	r0, 8001e12 <__swbuf_r+0x12>
 8001e0a:	6983      	ldr	r3, [r0, #24]
 8001e0c:	b90b      	cbnz	r3, 8001e12 <__swbuf_r+0x12>
 8001e0e:	f000 f9df 	bl	80021d0 <__sinit>
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <__swbuf_r+0x98>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	d12b      	bne.n	8001e70 <__swbuf_r+0x70>
 8001e18:	686c      	ldr	r4, [r5, #4]
 8001e1a:	69a3      	ldr	r3, [r4, #24]
 8001e1c:	60a3      	str	r3, [r4, #8]
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	071a      	lsls	r2, r3, #28
 8001e22:	d52f      	bpl.n	8001e84 <__swbuf_r+0x84>
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	b36b      	cbz	r3, 8001e84 <__swbuf_r+0x84>
 8001e28:	6923      	ldr	r3, [r4, #16]
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	b2f6      	uxtb	r6, r6
 8001e2e:	1ac0      	subs	r0, r0, r3
 8001e30:	6963      	ldr	r3, [r4, #20]
 8001e32:	4637      	mov	r7, r6
 8001e34:	4283      	cmp	r3, r0
 8001e36:	dc04      	bgt.n	8001e42 <__swbuf_r+0x42>
 8001e38:	4621      	mov	r1, r4
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f000 f922 	bl	8002084 <_fflush_r>
 8001e40:	bb30      	cbnz	r0, 8001e90 <__swbuf_r+0x90>
 8001e42:	68a3      	ldr	r3, [r4, #8]
 8001e44:	3001      	adds	r0, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60a3      	str	r3, [r4, #8]
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	6022      	str	r2, [r4, #0]
 8001e50:	701e      	strb	r6, [r3, #0]
 8001e52:	6963      	ldr	r3, [r4, #20]
 8001e54:	4283      	cmp	r3, r0
 8001e56:	d004      	beq.n	8001e62 <__swbuf_r+0x62>
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	07db      	lsls	r3, r3, #31
 8001e5c:	d506      	bpl.n	8001e6c <__swbuf_r+0x6c>
 8001e5e:	2e0a      	cmp	r6, #10
 8001e60:	d104      	bne.n	8001e6c <__swbuf_r+0x6c>
 8001e62:	4621      	mov	r1, r4
 8001e64:	4628      	mov	r0, r5
 8001e66:	f000 f90d 	bl	8002084 <_fflush_r>
 8001e6a:	b988      	cbnz	r0, 8001e90 <__swbuf_r+0x90>
 8001e6c:	4638      	mov	r0, r7
 8001e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <__swbuf_r+0x9c>)
 8001e72:	429c      	cmp	r4, r3
 8001e74:	d101      	bne.n	8001e7a <__swbuf_r+0x7a>
 8001e76:	68ac      	ldr	r4, [r5, #8]
 8001e78:	e7cf      	b.n	8001e1a <__swbuf_r+0x1a>
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <__swbuf_r+0xa0>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	bf08      	it	eq
 8001e80:	68ec      	ldreq	r4, [r5, #12]
 8001e82:	e7ca      	b.n	8001e1a <__swbuf_r+0x1a>
 8001e84:	4621      	mov	r1, r4
 8001e86:	4628      	mov	r0, r5
 8001e88:	f000 f80c 	bl	8001ea4 <__swsetup_r>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0cb      	beq.n	8001e28 <__swbuf_r+0x28>
 8001e90:	f04f 37ff 	mov.w	r7, #4294967295
 8001e94:	e7ea      	b.n	8001e6c <__swbuf_r+0x6c>
 8001e96:	bf00      	nop
 8001e98:	080039e4 	.word	0x080039e4
 8001e9c:	08003a04 	.word	0x08003a04
 8001ea0:	080039c4 	.word	0x080039c4

08001ea4 <__swsetup_r>:
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <__swsetup_r+0xcc>)
 8001ea6:	b570      	push	{r4, r5, r6, lr}
 8001ea8:	681d      	ldr	r5, [r3, #0]
 8001eaa:	4606      	mov	r6, r0
 8001eac:	460c      	mov	r4, r1
 8001eae:	b125      	cbz	r5, 8001eba <__swsetup_r+0x16>
 8001eb0:	69ab      	ldr	r3, [r5, #24]
 8001eb2:	b913      	cbnz	r3, 8001eba <__swsetup_r+0x16>
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f000 f98b 	bl	80021d0 <__sinit>
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <__swsetup_r+0xd0>)
 8001ebc:	429c      	cmp	r4, r3
 8001ebe:	d10f      	bne.n	8001ee0 <__swsetup_r+0x3c>
 8001ec0:	686c      	ldr	r4, [r5, #4]
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ec8:	0719      	lsls	r1, r3, #28
 8001eca:	d42c      	bmi.n	8001f26 <__swsetup_r+0x82>
 8001ecc:	06dd      	lsls	r5, r3, #27
 8001ece:	d411      	bmi.n	8001ef4 <__swsetup_r+0x50>
 8001ed0:	2309      	movs	r3, #9
 8001ed2:	6033      	str	r3, [r6, #0]
 8001ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	e03e      	b.n	8001f5e <__swsetup_r+0xba>
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <__swsetup_r+0xd4>)
 8001ee2:	429c      	cmp	r4, r3
 8001ee4:	d101      	bne.n	8001eea <__swsetup_r+0x46>
 8001ee6:	68ac      	ldr	r4, [r5, #8]
 8001ee8:	e7eb      	b.n	8001ec2 <__swsetup_r+0x1e>
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <__swsetup_r+0xd8>)
 8001eec:	429c      	cmp	r4, r3
 8001eee:	bf08      	it	eq
 8001ef0:	68ec      	ldreq	r4, [r5, #12]
 8001ef2:	e7e6      	b.n	8001ec2 <__swsetup_r+0x1e>
 8001ef4:	0758      	lsls	r0, r3, #29
 8001ef6:	d512      	bpl.n	8001f1e <__swsetup_r+0x7a>
 8001ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001efa:	b141      	cbz	r1, 8001f0e <__swsetup_r+0x6a>
 8001efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f00:	4299      	cmp	r1, r3
 8001f02:	d002      	beq.n	8001f0a <__swsetup_r+0x66>
 8001f04:	4630      	mov	r0, r6
 8001f06:	f000 fa8d 	bl	8002424 <_free_r>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f14:	81a3      	strh	r3, [r4, #12]
 8001f16:	2300      	movs	r3, #0
 8001f18:	6063      	str	r3, [r4, #4]
 8001f1a:	6923      	ldr	r3, [r4, #16]
 8001f1c:	6023      	str	r3, [r4, #0]
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	81a3      	strh	r3, [r4, #12]
 8001f26:	6923      	ldr	r3, [r4, #16]
 8001f28:	b94b      	cbnz	r3, 8001f3e <__swsetup_r+0x9a>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f34:	d003      	beq.n	8001f3e <__swsetup_r+0x9a>
 8001f36:	4621      	mov	r1, r4
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f000 fa2b 	bl	8002394 <__smakebuf_r>
 8001f3e:	89a0      	ldrh	r0, [r4, #12]
 8001f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f44:	f010 0301 	ands.w	r3, r0, #1
 8001f48:	d00a      	beq.n	8001f60 <__swsetup_r+0xbc>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60a3      	str	r3, [r4, #8]
 8001f4e:	6963      	ldr	r3, [r4, #20]
 8001f50:	425b      	negs	r3, r3
 8001f52:	61a3      	str	r3, [r4, #24]
 8001f54:	6923      	ldr	r3, [r4, #16]
 8001f56:	b943      	cbnz	r3, 8001f6a <__swsetup_r+0xc6>
 8001f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f5c:	d1ba      	bne.n	8001ed4 <__swsetup_r+0x30>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	0781      	lsls	r1, r0, #30
 8001f62:	bf58      	it	pl
 8001f64:	6963      	ldrpl	r3, [r4, #20]
 8001f66:	60a3      	str	r3, [r4, #8]
 8001f68:	e7f4      	b.n	8001f54 <__swsetup_r+0xb0>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	e7f7      	b.n	8001f5e <__swsetup_r+0xba>
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	080039e4 	.word	0x080039e4
 8001f78:	08003a04 	.word	0x08003a04
 8001f7c:	080039c4 	.word	0x080039c4

08001f80 <__sflush_r>:
 8001f80:	898a      	ldrh	r2, [r1, #12]
 8001f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f84:	4605      	mov	r5, r0
 8001f86:	0710      	lsls	r0, r2, #28
 8001f88:	460c      	mov	r4, r1
 8001f8a:	d457      	bmi.n	800203c <__sflush_r+0xbc>
 8001f8c:	684b      	ldr	r3, [r1, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	dc04      	bgt.n	8001f9c <__sflush_r+0x1c>
 8001f92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	dc01      	bgt.n	8001f9c <__sflush_r+0x1c>
 8001f98:	2000      	movs	r0, #0
 8001f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f9e:	2e00      	cmp	r6, #0
 8001fa0:	d0fa      	beq.n	8001f98 <__sflush_r+0x18>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fa8:	682f      	ldr	r7, [r5, #0]
 8001faa:	602b      	str	r3, [r5, #0]
 8001fac:	d032      	beq.n	8002014 <__sflush_r+0x94>
 8001fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	075a      	lsls	r2, r3, #29
 8001fb4:	d505      	bpl.n	8001fc2 <__sflush_r+0x42>
 8001fb6:	6863      	ldr	r3, [r4, #4]
 8001fb8:	1ac0      	subs	r0, r0, r3
 8001fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fbc:	b10b      	cbz	r3, 8001fc2 <__sflush_r+0x42>
 8001fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc0:	1ac0      	subs	r0, r0, r3
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fc8:	4628      	mov	r0, r5
 8001fca:	6a21      	ldr	r1, [r4, #32]
 8001fcc:	47b0      	blx	r6
 8001fce:	1c43      	adds	r3, r0, #1
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	d106      	bne.n	8001fe2 <__sflush_r+0x62>
 8001fd4:	6829      	ldr	r1, [r5, #0]
 8001fd6:	291d      	cmp	r1, #29
 8001fd8:	d82c      	bhi.n	8002034 <__sflush_r+0xb4>
 8001fda:	4a29      	ldr	r2, [pc, #164]	; (8002080 <__sflush_r+0x100>)
 8001fdc:	40ca      	lsrs	r2, r1
 8001fde:	07d6      	lsls	r6, r2, #31
 8001fe0:	d528      	bpl.n	8002034 <__sflush_r+0xb4>
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6062      	str	r2, [r4, #4]
 8001fe6:	6922      	ldr	r2, [r4, #16]
 8001fe8:	04d9      	lsls	r1, r3, #19
 8001fea:	6022      	str	r2, [r4, #0]
 8001fec:	d504      	bpl.n	8001ff8 <__sflush_r+0x78>
 8001fee:	1c42      	adds	r2, r0, #1
 8001ff0:	d101      	bne.n	8001ff6 <__sflush_r+0x76>
 8001ff2:	682b      	ldr	r3, [r5, #0]
 8001ff4:	b903      	cbnz	r3, 8001ff8 <__sflush_r+0x78>
 8001ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ffa:	602f      	str	r7, [r5, #0]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d0cb      	beq.n	8001f98 <__sflush_r+0x18>
 8002000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002004:	4299      	cmp	r1, r3
 8002006:	d002      	beq.n	800200e <__sflush_r+0x8e>
 8002008:	4628      	mov	r0, r5
 800200a:	f000 fa0b 	bl	8002424 <_free_r>
 800200e:	2000      	movs	r0, #0
 8002010:	6360      	str	r0, [r4, #52]	; 0x34
 8002012:	e7c2      	b.n	8001f9a <__sflush_r+0x1a>
 8002014:	6a21      	ldr	r1, [r4, #32]
 8002016:	2301      	movs	r3, #1
 8002018:	4628      	mov	r0, r5
 800201a:	47b0      	blx	r6
 800201c:	1c41      	adds	r1, r0, #1
 800201e:	d1c7      	bne.n	8001fb0 <__sflush_r+0x30>
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0c4      	beq.n	8001fb0 <__sflush_r+0x30>
 8002026:	2b1d      	cmp	r3, #29
 8002028:	d001      	beq.n	800202e <__sflush_r+0xae>
 800202a:	2b16      	cmp	r3, #22
 800202c:	d101      	bne.n	8002032 <__sflush_r+0xb2>
 800202e:	602f      	str	r7, [r5, #0]
 8002030:	e7b2      	b.n	8001f98 <__sflush_r+0x18>
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002038:	81a3      	strh	r3, [r4, #12]
 800203a:	e7ae      	b.n	8001f9a <__sflush_r+0x1a>
 800203c:	690f      	ldr	r7, [r1, #16]
 800203e:	2f00      	cmp	r7, #0
 8002040:	d0aa      	beq.n	8001f98 <__sflush_r+0x18>
 8002042:	0793      	lsls	r3, r2, #30
 8002044:	bf18      	it	ne
 8002046:	2300      	movne	r3, #0
 8002048:	680e      	ldr	r6, [r1, #0]
 800204a:	bf08      	it	eq
 800204c:	694b      	ldreq	r3, [r1, #20]
 800204e:	1bf6      	subs	r6, r6, r7
 8002050:	600f      	str	r7, [r1, #0]
 8002052:	608b      	str	r3, [r1, #8]
 8002054:	2e00      	cmp	r6, #0
 8002056:	dd9f      	ble.n	8001f98 <__sflush_r+0x18>
 8002058:	4633      	mov	r3, r6
 800205a:	463a      	mov	r2, r7
 800205c:	4628      	mov	r0, r5
 800205e:	6a21      	ldr	r1, [r4, #32]
 8002060:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002064:	47e0      	blx	ip
 8002066:	2800      	cmp	r0, #0
 8002068:	dc06      	bgt.n	8002078 <__sflush_r+0xf8>
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	e790      	b.n	8001f9a <__sflush_r+0x1a>
 8002078:	4407      	add	r7, r0
 800207a:	1a36      	subs	r6, r6, r0
 800207c:	e7ea      	b.n	8002054 <__sflush_r+0xd4>
 800207e:	bf00      	nop
 8002080:	20400001 	.word	0x20400001

08002084 <_fflush_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	690b      	ldr	r3, [r1, #16]
 8002088:	4605      	mov	r5, r0
 800208a:	460c      	mov	r4, r1
 800208c:	b913      	cbnz	r3, 8002094 <_fflush_r+0x10>
 800208e:	2500      	movs	r5, #0
 8002090:	4628      	mov	r0, r5
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	b118      	cbz	r0, 800209e <_fflush_r+0x1a>
 8002096:	6983      	ldr	r3, [r0, #24]
 8002098:	b90b      	cbnz	r3, 800209e <_fflush_r+0x1a>
 800209a:	f000 f899 	bl	80021d0 <__sinit>
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <_fflush_r+0x6c>)
 80020a0:	429c      	cmp	r4, r3
 80020a2:	d11b      	bne.n	80020dc <_fflush_r+0x58>
 80020a4:	686c      	ldr	r4, [r5, #4]
 80020a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ef      	beq.n	800208e <_fflush_r+0xa>
 80020ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020b0:	07d0      	lsls	r0, r2, #31
 80020b2:	d404      	bmi.n	80020be <_fflush_r+0x3a>
 80020b4:	0599      	lsls	r1, r3, #22
 80020b6:	d402      	bmi.n	80020be <_fflush_r+0x3a>
 80020b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020ba:	f000 f944 	bl	8002346 <__retarget_lock_acquire_recursive>
 80020be:	4628      	mov	r0, r5
 80020c0:	4621      	mov	r1, r4
 80020c2:	f7ff ff5d 	bl	8001f80 <__sflush_r>
 80020c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020c8:	4605      	mov	r5, r0
 80020ca:	07da      	lsls	r2, r3, #31
 80020cc:	d4e0      	bmi.n	8002090 <_fflush_r+0xc>
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	059b      	lsls	r3, r3, #22
 80020d2:	d4dd      	bmi.n	8002090 <_fflush_r+0xc>
 80020d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020d6:	f000 f937 	bl	8002348 <__retarget_lock_release_recursive>
 80020da:	e7d9      	b.n	8002090 <_fflush_r+0xc>
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <_fflush_r+0x70>)
 80020de:	429c      	cmp	r4, r3
 80020e0:	d101      	bne.n	80020e6 <_fflush_r+0x62>
 80020e2:	68ac      	ldr	r4, [r5, #8]
 80020e4:	e7df      	b.n	80020a6 <_fflush_r+0x22>
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <_fflush_r+0x74>)
 80020e8:	429c      	cmp	r4, r3
 80020ea:	bf08      	it	eq
 80020ec:	68ec      	ldreq	r4, [r5, #12]
 80020ee:	e7da      	b.n	80020a6 <_fflush_r+0x22>
 80020f0:	080039e4 	.word	0x080039e4
 80020f4:	08003a04 	.word	0x08003a04
 80020f8:	080039c4 	.word	0x080039c4

080020fc <fflush>:
 80020fc:	4601      	mov	r1, r0
 80020fe:	b920      	cbnz	r0, 800210a <fflush+0xe>
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <fflush+0x18>)
 8002102:	4905      	ldr	r1, [pc, #20]	; (8002118 <fflush+0x1c>)
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	f000 b8fe 	b.w	8002306 <_fwalk_reent>
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <fflush+0x20>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	f7ff bfb9 	b.w	8002084 <_fflush_r>
 8002112:	bf00      	nop
 8002114:	080039c0 	.word	0x080039c0
 8002118:	08002085 	.word	0x08002085
 800211c:	2000000c 	.word	0x2000000c

08002120 <std>:
 8002120:	2300      	movs	r3, #0
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
 8002126:	e9c0 3300 	strd	r3, r3, [r0]
 800212a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800212e:	6083      	str	r3, [r0, #8]
 8002130:	8181      	strh	r1, [r0, #12]
 8002132:	6643      	str	r3, [r0, #100]	; 0x64
 8002134:	81c2      	strh	r2, [r0, #14]
 8002136:	6183      	str	r3, [r0, #24]
 8002138:	4619      	mov	r1, r3
 800213a:	2208      	movs	r2, #8
 800213c:	305c      	adds	r0, #92	; 0x5c
 800213e:	f7ff fceb 	bl	8001b18 <memset>
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <std+0x38>)
 8002144:	6224      	str	r4, [r4, #32]
 8002146:	6263      	str	r3, [r4, #36]	; 0x24
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <std+0x3c>)
 800214a:	62a3      	str	r3, [r4, #40]	; 0x28
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <std+0x40>)
 800214e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <std+0x44>)
 8002152:	6323      	str	r3, [r4, #48]	; 0x30
 8002154:	bd10      	pop	{r4, pc}
 8002156:	bf00      	nop
 8002158:	080033b5 	.word	0x080033b5
 800215c:	080033d7 	.word	0x080033d7
 8002160:	0800340f 	.word	0x0800340f
 8002164:	08003433 	.word	0x08003433

08002168 <_cleanup_r>:
 8002168:	4901      	ldr	r1, [pc, #4]	; (8002170 <_cleanup_r+0x8>)
 800216a:	f000 b8cc 	b.w	8002306 <_fwalk_reent>
 800216e:	bf00      	nop
 8002170:	08002085 	.word	0x08002085

08002174 <__sfmoreglue>:
 8002174:	2268      	movs	r2, #104	; 0x68
 8002176:	b570      	push	{r4, r5, r6, lr}
 8002178:	1e4d      	subs	r5, r1, #1
 800217a:	4355      	muls	r5, r2
 800217c:	460e      	mov	r6, r1
 800217e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002182:	f000 f9b7 	bl	80024f4 <_malloc_r>
 8002186:	4604      	mov	r4, r0
 8002188:	b140      	cbz	r0, 800219c <__sfmoreglue+0x28>
 800218a:	2100      	movs	r1, #0
 800218c:	e9c0 1600 	strd	r1, r6, [r0]
 8002190:	300c      	adds	r0, #12
 8002192:	60a0      	str	r0, [r4, #8]
 8002194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002198:	f7ff fcbe 	bl	8001b18 <memset>
 800219c:	4620      	mov	r0, r4
 800219e:	bd70      	pop	{r4, r5, r6, pc}

080021a0 <__sfp_lock_acquire>:
 80021a0:	4801      	ldr	r0, [pc, #4]	; (80021a8 <__sfp_lock_acquire+0x8>)
 80021a2:	f000 b8d0 	b.w	8002346 <__retarget_lock_acquire_recursive>
 80021a6:	bf00      	nop
 80021a8:	200000d9 	.word	0x200000d9

080021ac <__sfp_lock_release>:
 80021ac:	4801      	ldr	r0, [pc, #4]	; (80021b4 <__sfp_lock_release+0x8>)
 80021ae:	f000 b8cb 	b.w	8002348 <__retarget_lock_release_recursive>
 80021b2:	bf00      	nop
 80021b4:	200000d9 	.word	0x200000d9

080021b8 <__sinit_lock_acquire>:
 80021b8:	4801      	ldr	r0, [pc, #4]	; (80021c0 <__sinit_lock_acquire+0x8>)
 80021ba:	f000 b8c4 	b.w	8002346 <__retarget_lock_acquire_recursive>
 80021be:	bf00      	nop
 80021c0:	200000da 	.word	0x200000da

080021c4 <__sinit_lock_release>:
 80021c4:	4801      	ldr	r0, [pc, #4]	; (80021cc <__sinit_lock_release+0x8>)
 80021c6:	f000 b8bf 	b.w	8002348 <__retarget_lock_release_recursive>
 80021ca:	bf00      	nop
 80021cc:	200000da 	.word	0x200000da

080021d0 <__sinit>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4604      	mov	r4, r0
 80021d4:	f7ff fff0 	bl	80021b8 <__sinit_lock_acquire>
 80021d8:	69a3      	ldr	r3, [r4, #24]
 80021da:	b11b      	cbz	r3, 80021e4 <__sinit+0x14>
 80021dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021e0:	f7ff bff0 	b.w	80021c4 <__sinit_lock_release>
 80021e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80021e8:	6523      	str	r3, [r4, #80]	; 0x50
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <__sinit+0x68>)
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <__sinit+0x6c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80021f2:	42a3      	cmp	r3, r4
 80021f4:	bf08      	it	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	4620      	mov	r0, r4
 80021fa:	bf08      	it	eq
 80021fc:	61a3      	streq	r3, [r4, #24]
 80021fe:	f000 f81f 	bl	8002240 <__sfp>
 8002202:	6060      	str	r0, [r4, #4]
 8002204:	4620      	mov	r0, r4
 8002206:	f000 f81b 	bl	8002240 <__sfp>
 800220a:	60a0      	str	r0, [r4, #8]
 800220c:	4620      	mov	r0, r4
 800220e:	f000 f817 	bl	8002240 <__sfp>
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	60e0      	str	r0, [r4, #12]
 8002218:	6860      	ldr	r0, [r4, #4]
 800221a:	f7ff ff81 	bl	8002120 <std>
 800221e:	2201      	movs	r2, #1
 8002220:	2109      	movs	r1, #9
 8002222:	68a0      	ldr	r0, [r4, #8]
 8002224:	f7ff ff7c 	bl	8002120 <std>
 8002228:	2202      	movs	r2, #2
 800222a:	2112      	movs	r1, #18
 800222c:	68e0      	ldr	r0, [r4, #12]
 800222e:	f7ff ff77 	bl	8002120 <std>
 8002232:	2301      	movs	r3, #1
 8002234:	61a3      	str	r3, [r4, #24]
 8002236:	e7d1      	b.n	80021dc <__sinit+0xc>
 8002238:	080039c0 	.word	0x080039c0
 800223c:	08002169 	.word	0x08002169

08002240 <__sfp>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	4607      	mov	r7, r0
 8002244:	f7ff ffac 	bl	80021a0 <__sfp_lock_acquire>
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <__sfp+0x84>)
 800224a:	681e      	ldr	r6, [r3, #0]
 800224c:	69b3      	ldr	r3, [r6, #24]
 800224e:	b913      	cbnz	r3, 8002256 <__sfp+0x16>
 8002250:	4630      	mov	r0, r6
 8002252:	f7ff ffbd 	bl	80021d0 <__sinit>
 8002256:	3648      	adds	r6, #72	; 0x48
 8002258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800225c:	3b01      	subs	r3, #1
 800225e:	d503      	bpl.n	8002268 <__sfp+0x28>
 8002260:	6833      	ldr	r3, [r6, #0]
 8002262:	b30b      	cbz	r3, 80022a8 <__sfp+0x68>
 8002264:	6836      	ldr	r6, [r6, #0]
 8002266:	e7f7      	b.n	8002258 <__sfp+0x18>
 8002268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800226c:	b9d5      	cbnz	r5, 80022a4 <__sfp+0x64>
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <__sfp+0x88>)
 8002270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002274:	60e3      	str	r3, [r4, #12]
 8002276:	6665      	str	r5, [r4, #100]	; 0x64
 8002278:	f000 f864 	bl	8002344 <__retarget_lock_init_recursive>
 800227c:	f7ff ff96 	bl	80021ac <__sfp_lock_release>
 8002280:	2208      	movs	r2, #8
 8002282:	4629      	mov	r1, r5
 8002284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800228c:	6025      	str	r5, [r4, #0]
 800228e:	61a5      	str	r5, [r4, #24]
 8002290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002294:	f7ff fc40 	bl	8001b18 <memset>
 8002298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800229c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022a0:	4620      	mov	r0, r4
 80022a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a4:	3468      	adds	r4, #104	; 0x68
 80022a6:	e7d9      	b.n	800225c <__sfp+0x1c>
 80022a8:	2104      	movs	r1, #4
 80022aa:	4638      	mov	r0, r7
 80022ac:	f7ff ff62 	bl	8002174 <__sfmoreglue>
 80022b0:	4604      	mov	r4, r0
 80022b2:	6030      	str	r0, [r6, #0]
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d1d5      	bne.n	8002264 <__sfp+0x24>
 80022b8:	f7ff ff78 	bl	80021ac <__sfp_lock_release>
 80022bc:	230c      	movs	r3, #12
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	e7ee      	b.n	80022a0 <__sfp+0x60>
 80022c2:	bf00      	nop
 80022c4:	080039c0 	.word	0x080039c0
 80022c8:	ffff0001 	.word	0xffff0001

080022cc <_fwalk>:
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	460f      	mov	r7, r1
 80022d2:	2600      	movs	r6, #0
 80022d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022d8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80022dc:	f1b8 0801 	subs.w	r8, r8, #1
 80022e0:	d505      	bpl.n	80022ee <_fwalk+0x22>
 80022e2:	6824      	ldr	r4, [r4, #0]
 80022e4:	2c00      	cmp	r4, #0
 80022e6:	d1f7      	bne.n	80022d8 <_fwalk+0xc>
 80022e8:	4630      	mov	r0, r6
 80022ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ee:	89ab      	ldrh	r3, [r5, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d906      	bls.n	8002302 <_fwalk+0x36>
 80022f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022f8:	3301      	adds	r3, #1
 80022fa:	d002      	beq.n	8002302 <_fwalk+0x36>
 80022fc:	4628      	mov	r0, r5
 80022fe:	47b8      	blx	r7
 8002300:	4306      	orrs	r6, r0
 8002302:	3568      	adds	r5, #104	; 0x68
 8002304:	e7ea      	b.n	80022dc <_fwalk+0x10>

08002306 <_fwalk_reent>:
 8002306:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800230a:	4606      	mov	r6, r0
 800230c:	4688      	mov	r8, r1
 800230e:	2700      	movs	r7, #0
 8002310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002318:	f1b9 0901 	subs.w	r9, r9, #1
 800231c:	d505      	bpl.n	800232a <_fwalk_reent+0x24>
 800231e:	6824      	ldr	r4, [r4, #0]
 8002320:	2c00      	cmp	r4, #0
 8002322:	d1f7      	bne.n	8002314 <_fwalk_reent+0xe>
 8002324:	4638      	mov	r0, r7
 8002326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800232a:	89ab      	ldrh	r3, [r5, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d907      	bls.n	8002340 <_fwalk_reent+0x3a>
 8002330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002334:	3301      	adds	r3, #1
 8002336:	d003      	beq.n	8002340 <_fwalk_reent+0x3a>
 8002338:	4629      	mov	r1, r5
 800233a:	4630      	mov	r0, r6
 800233c:	47c0      	blx	r8
 800233e:	4307      	orrs	r7, r0
 8002340:	3568      	adds	r5, #104	; 0x68
 8002342:	e7e9      	b.n	8002318 <_fwalk_reent+0x12>

08002344 <__retarget_lock_init_recursive>:
 8002344:	4770      	bx	lr

08002346 <__retarget_lock_acquire_recursive>:
 8002346:	4770      	bx	lr

08002348 <__retarget_lock_release_recursive>:
 8002348:	4770      	bx	lr

0800234a <__swhatbuf_r>:
 800234a:	b570      	push	{r4, r5, r6, lr}
 800234c:	460e      	mov	r6, r1
 800234e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002352:	4614      	mov	r4, r2
 8002354:	2900      	cmp	r1, #0
 8002356:	461d      	mov	r5, r3
 8002358:	b096      	sub	sp, #88	; 0x58
 800235a:	da08      	bge.n	800236e <__swhatbuf_r+0x24>
 800235c:	2200      	movs	r2, #0
 800235e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002362:	602a      	str	r2, [r5, #0]
 8002364:	061a      	lsls	r2, r3, #24
 8002366:	d410      	bmi.n	800238a <__swhatbuf_r+0x40>
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236c:	e00e      	b.n	800238c <__swhatbuf_r+0x42>
 800236e:	466a      	mov	r2, sp
 8002370:	f001 fa48 	bl	8003804 <_fstat_r>
 8002374:	2800      	cmp	r0, #0
 8002376:	dbf1      	blt.n	800235c <__swhatbuf_r+0x12>
 8002378:	9a01      	ldr	r2, [sp, #4]
 800237a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800237e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002382:	425a      	negs	r2, r3
 8002384:	415a      	adcs	r2, r3
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	e7ee      	b.n	8002368 <__swhatbuf_r+0x1e>
 800238a:	2340      	movs	r3, #64	; 0x40
 800238c:	2000      	movs	r0, #0
 800238e:	6023      	str	r3, [r4, #0]
 8002390:	b016      	add	sp, #88	; 0x58
 8002392:	bd70      	pop	{r4, r5, r6, pc}

08002394 <__smakebuf_r>:
 8002394:	898b      	ldrh	r3, [r1, #12]
 8002396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002398:	079d      	lsls	r5, r3, #30
 800239a:	4606      	mov	r6, r0
 800239c:	460c      	mov	r4, r1
 800239e:	d507      	bpl.n	80023b0 <__smakebuf_r+0x1c>
 80023a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2301      	movs	r3, #1
 80023aa:	6163      	str	r3, [r4, #20]
 80023ac:	b002      	add	sp, #8
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	466a      	mov	r2, sp
 80023b2:	ab01      	add	r3, sp, #4
 80023b4:	f7ff ffc9 	bl	800234a <__swhatbuf_r>
 80023b8:	9900      	ldr	r1, [sp, #0]
 80023ba:	4605      	mov	r5, r0
 80023bc:	4630      	mov	r0, r6
 80023be:	f000 f899 	bl	80024f4 <_malloc_r>
 80023c2:	b948      	cbnz	r0, 80023d8 <__smakebuf_r+0x44>
 80023c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c8:	059a      	lsls	r2, r3, #22
 80023ca:	d4ef      	bmi.n	80023ac <__smakebuf_r+0x18>
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	e7e3      	b.n	80023a0 <__smakebuf_r+0xc>
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <__smakebuf_r+0x7c>)
 80023da:	62b3      	str	r3, [r6, #40]	; 0x28
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	6020      	str	r0, [r4, #0]
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	9b00      	ldr	r3, [sp, #0]
 80023e8:	6120      	str	r0, [r4, #16]
 80023ea:	6163      	str	r3, [r4, #20]
 80023ec:	9b01      	ldr	r3, [sp, #4]
 80023ee:	b15b      	cbz	r3, 8002408 <__smakebuf_r+0x74>
 80023f0:	4630      	mov	r0, r6
 80023f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023f6:	f001 fa17 	bl	8003828 <_isatty_r>
 80023fa:	b128      	cbz	r0, 8002408 <__smakebuf_r+0x74>
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	89a0      	ldrh	r0, [r4, #12]
 800240a:	4305      	orrs	r5, r0
 800240c:	81a5      	strh	r5, [r4, #12]
 800240e:	e7cd      	b.n	80023ac <__smakebuf_r+0x18>
 8002410:	08002169 	.word	0x08002169

08002414 <malloc>:
 8002414:	4b02      	ldr	r3, [pc, #8]	; (8002420 <malloc+0xc>)
 8002416:	4601      	mov	r1, r0
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	f000 b86b 	b.w	80024f4 <_malloc_r>
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c

08002424 <_free_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4605      	mov	r5, r0
 8002428:	2900      	cmp	r1, #0
 800242a:	d040      	beq.n	80024ae <_free_r+0x8a>
 800242c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002430:	1f0c      	subs	r4, r1, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	bfb8      	it	lt
 8002436:	18e4      	addlt	r4, r4, r3
 8002438:	f001 fa34 	bl	80038a4 <__malloc_lock>
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <_free_r+0x8c>)
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	b933      	cbnz	r3, 8002450 <_free_r+0x2c>
 8002442:	6063      	str	r3, [r4, #4]
 8002444:	6014      	str	r4, [r2, #0]
 8002446:	4628      	mov	r0, r5
 8002448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800244c:	f001 ba30 	b.w	80038b0 <__malloc_unlock>
 8002450:	42a3      	cmp	r3, r4
 8002452:	d908      	bls.n	8002466 <_free_r+0x42>
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	1821      	adds	r1, r4, r0
 8002458:	428b      	cmp	r3, r1
 800245a:	bf01      	itttt	eq
 800245c:	6819      	ldreq	r1, [r3, #0]
 800245e:	685b      	ldreq	r3, [r3, #4]
 8002460:	1809      	addeq	r1, r1, r0
 8002462:	6021      	streq	r1, [r4, #0]
 8002464:	e7ed      	b.n	8002442 <_free_r+0x1e>
 8002466:	461a      	mov	r2, r3
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	b10b      	cbz	r3, 8002470 <_free_r+0x4c>
 800246c:	42a3      	cmp	r3, r4
 800246e:	d9fa      	bls.n	8002466 <_free_r+0x42>
 8002470:	6811      	ldr	r1, [r2, #0]
 8002472:	1850      	adds	r0, r2, r1
 8002474:	42a0      	cmp	r0, r4
 8002476:	d10b      	bne.n	8002490 <_free_r+0x6c>
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	4401      	add	r1, r0
 800247c:	1850      	adds	r0, r2, r1
 800247e:	4283      	cmp	r3, r0
 8002480:	6011      	str	r1, [r2, #0]
 8002482:	d1e0      	bne.n	8002446 <_free_r+0x22>
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4401      	add	r1, r0
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	6053      	str	r3, [r2, #4]
 800248e:	e7da      	b.n	8002446 <_free_r+0x22>
 8002490:	d902      	bls.n	8002498 <_free_r+0x74>
 8002492:	230c      	movs	r3, #12
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	e7d6      	b.n	8002446 <_free_r+0x22>
 8002498:	6820      	ldr	r0, [r4, #0]
 800249a:	1821      	adds	r1, r4, r0
 800249c:	428b      	cmp	r3, r1
 800249e:	bf01      	itttt	eq
 80024a0:	6819      	ldreq	r1, [r3, #0]
 80024a2:	685b      	ldreq	r3, [r3, #4]
 80024a4:	1809      	addeq	r1, r1, r0
 80024a6:	6021      	streq	r1, [r4, #0]
 80024a8:	6063      	str	r3, [r4, #4]
 80024aa:	6054      	str	r4, [r2, #4]
 80024ac:	e7cb      	b.n	8002446 <_free_r+0x22>
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	200000dc 	.word	0x200000dc

080024b4 <sbrk_aligned>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	4e0e      	ldr	r6, [pc, #56]	; (80024f0 <sbrk_aligned+0x3c>)
 80024b8:	460c      	mov	r4, r1
 80024ba:	6831      	ldr	r1, [r6, #0]
 80024bc:	4605      	mov	r5, r0
 80024be:	b911      	cbnz	r1, 80024c6 <sbrk_aligned+0x12>
 80024c0:	f000 ff30 	bl	8003324 <_sbrk_r>
 80024c4:	6030      	str	r0, [r6, #0]
 80024c6:	4621      	mov	r1, r4
 80024c8:	4628      	mov	r0, r5
 80024ca:	f000 ff2b 	bl	8003324 <_sbrk_r>
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	d00a      	beq.n	80024e8 <sbrk_aligned+0x34>
 80024d2:	1cc4      	adds	r4, r0, #3
 80024d4:	f024 0403 	bic.w	r4, r4, #3
 80024d8:	42a0      	cmp	r0, r4
 80024da:	d007      	beq.n	80024ec <sbrk_aligned+0x38>
 80024dc:	1a21      	subs	r1, r4, r0
 80024de:	4628      	mov	r0, r5
 80024e0:	f000 ff20 	bl	8003324 <_sbrk_r>
 80024e4:	3001      	adds	r0, #1
 80024e6:	d101      	bne.n	80024ec <sbrk_aligned+0x38>
 80024e8:	f04f 34ff 	mov.w	r4, #4294967295
 80024ec:	4620      	mov	r0, r4
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	200000e0 	.word	0x200000e0

080024f4 <_malloc_r>:
 80024f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f8:	1ccd      	adds	r5, r1, #3
 80024fa:	f025 0503 	bic.w	r5, r5, #3
 80024fe:	3508      	adds	r5, #8
 8002500:	2d0c      	cmp	r5, #12
 8002502:	bf38      	it	cc
 8002504:	250c      	movcc	r5, #12
 8002506:	2d00      	cmp	r5, #0
 8002508:	4607      	mov	r7, r0
 800250a:	db01      	blt.n	8002510 <_malloc_r+0x1c>
 800250c:	42a9      	cmp	r1, r5
 800250e:	d905      	bls.n	800251c <_malloc_r+0x28>
 8002510:	230c      	movs	r3, #12
 8002512:	2600      	movs	r6, #0
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4630      	mov	r0, r6
 8002518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800251c:	4e2e      	ldr	r6, [pc, #184]	; (80025d8 <_malloc_r+0xe4>)
 800251e:	f001 f9c1 	bl	80038a4 <__malloc_lock>
 8002522:	6833      	ldr	r3, [r6, #0]
 8002524:	461c      	mov	r4, r3
 8002526:	bb34      	cbnz	r4, 8002576 <_malloc_r+0x82>
 8002528:	4629      	mov	r1, r5
 800252a:	4638      	mov	r0, r7
 800252c:	f7ff ffc2 	bl	80024b4 <sbrk_aligned>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	4604      	mov	r4, r0
 8002534:	d14d      	bne.n	80025d2 <_malloc_r+0xde>
 8002536:	6834      	ldr	r4, [r6, #0]
 8002538:	4626      	mov	r6, r4
 800253a:	2e00      	cmp	r6, #0
 800253c:	d140      	bne.n	80025c0 <_malloc_r+0xcc>
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	4631      	mov	r1, r6
 8002542:	4638      	mov	r0, r7
 8002544:	eb04 0803 	add.w	r8, r4, r3
 8002548:	f000 feec 	bl	8003324 <_sbrk_r>
 800254c:	4580      	cmp	r8, r0
 800254e:	d13a      	bne.n	80025c6 <_malloc_r+0xd2>
 8002550:	6821      	ldr	r1, [r4, #0]
 8002552:	3503      	adds	r5, #3
 8002554:	1a6d      	subs	r5, r5, r1
 8002556:	f025 0503 	bic.w	r5, r5, #3
 800255a:	3508      	adds	r5, #8
 800255c:	2d0c      	cmp	r5, #12
 800255e:	bf38      	it	cc
 8002560:	250c      	movcc	r5, #12
 8002562:	4638      	mov	r0, r7
 8002564:	4629      	mov	r1, r5
 8002566:	f7ff ffa5 	bl	80024b4 <sbrk_aligned>
 800256a:	3001      	adds	r0, #1
 800256c:	d02b      	beq.n	80025c6 <_malloc_r+0xd2>
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	442b      	add	r3, r5
 8002572:	6023      	str	r3, [r4, #0]
 8002574:	e00e      	b.n	8002594 <_malloc_r+0xa0>
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	1b52      	subs	r2, r2, r5
 800257a:	d41e      	bmi.n	80025ba <_malloc_r+0xc6>
 800257c:	2a0b      	cmp	r2, #11
 800257e:	d916      	bls.n	80025ae <_malloc_r+0xba>
 8002580:	1961      	adds	r1, r4, r5
 8002582:	42a3      	cmp	r3, r4
 8002584:	6025      	str	r5, [r4, #0]
 8002586:	bf18      	it	ne
 8002588:	6059      	strne	r1, [r3, #4]
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	bf08      	it	eq
 800258e:	6031      	streq	r1, [r6, #0]
 8002590:	5162      	str	r2, [r4, r5]
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	4638      	mov	r0, r7
 8002596:	f104 060b 	add.w	r6, r4, #11
 800259a:	f001 f989 	bl	80038b0 <__malloc_unlock>
 800259e:	f026 0607 	bic.w	r6, r6, #7
 80025a2:	1d23      	adds	r3, r4, #4
 80025a4:	1af2      	subs	r2, r6, r3
 80025a6:	d0b6      	beq.n	8002516 <_malloc_r+0x22>
 80025a8:	1b9b      	subs	r3, r3, r6
 80025aa:	50a3      	str	r3, [r4, r2]
 80025ac:	e7b3      	b.n	8002516 <_malloc_r+0x22>
 80025ae:	6862      	ldr	r2, [r4, #4]
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	bf0c      	ite	eq
 80025b4:	6032      	streq	r2, [r6, #0]
 80025b6:	605a      	strne	r2, [r3, #4]
 80025b8:	e7ec      	b.n	8002594 <_malloc_r+0xa0>
 80025ba:	4623      	mov	r3, r4
 80025bc:	6864      	ldr	r4, [r4, #4]
 80025be:	e7b2      	b.n	8002526 <_malloc_r+0x32>
 80025c0:	4634      	mov	r4, r6
 80025c2:	6876      	ldr	r6, [r6, #4]
 80025c4:	e7b9      	b.n	800253a <_malloc_r+0x46>
 80025c6:	230c      	movs	r3, #12
 80025c8:	4638      	mov	r0, r7
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	f001 f970 	bl	80038b0 <__malloc_unlock>
 80025d0:	e7a1      	b.n	8002516 <_malloc_r+0x22>
 80025d2:	6025      	str	r5, [r4, #0]
 80025d4:	e7de      	b.n	8002594 <_malloc_r+0xa0>
 80025d6:	bf00      	nop
 80025d8:	200000dc 	.word	0x200000dc

080025dc <__sfputc_r>:
 80025dc:	6893      	ldr	r3, [r2, #8]
 80025de:	b410      	push	{r4}
 80025e0:	3b01      	subs	r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	6093      	str	r3, [r2, #8]
 80025e6:	da07      	bge.n	80025f8 <__sfputc_r+0x1c>
 80025e8:	6994      	ldr	r4, [r2, #24]
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	db01      	blt.n	80025f2 <__sfputc_r+0x16>
 80025ee:	290a      	cmp	r1, #10
 80025f0:	d102      	bne.n	80025f8 <__sfputc_r+0x1c>
 80025f2:	bc10      	pop	{r4}
 80025f4:	f7ff bc04 	b.w	8001e00 <__swbuf_r>
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	1c58      	adds	r0, r3, #1
 80025fc:	6010      	str	r0, [r2, #0]
 80025fe:	7019      	strb	r1, [r3, #0]
 8002600:	4608      	mov	r0, r1
 8002602:	bc10      	pop	{r4}
 8002604:	4770      	bx	lr

08002606 <__sfputs_r>:
 8002606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002608:	4606      	mov	r6, r0
 800260a:	460f      	mov	r7, r1
 800260c:	4614      	mov	r4, r2
 800260e:	18d5      	adds	r5, r2, r3
 8002610:	42ac      	cmp	r4, r5
 8002612:	d101      	bne.n	8002618 <__sfputs_r+0x12>
 8002614:	2000      	movs	r0, #0
 8002616:	e007      	b.n	8002628 <__sfputs_r+0x22>
 8002618:	463a      	mov	r2, r7
 800261a:	4630      	mov	r0, r6
 800261c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002620:	f7ff ffdc 	bl	80025dc <__sfputc_r>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d1f3      	bne.n	8002610 <__sfputs_r+0xa>
 8002628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800262c <_vfiprintf_r>:
 800262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	460d      	mov	r5, r1
 8002632:	4614      	mov	r4, r2
 8002634:	4698      	mov	r8, r3
 8002636:	4606      	mov	r6, r0
 8002638:	b09d      	sub	sp, #116	; 0x74
 800263a:	b118      	cbz	r0, 8002644 <_vfiprintf_r+0x18>
 800263c:	6983      	ldr	r3, [r0, #24]
 800263e:	b90b      	cbnz	r3, 8002644 <_vfiprintf_r+0x18>
 8002640:	f7ff fdc6 	bl	80021d0 <__sinit>
 8002644:	4b89      	ldr	r3, [pc, #548]	; (800286c <_vfiprintf_r+0x240>)
 8002646:	429d      	cmp	r5, r3
 8002648:	d11b      	bne.n	8002682 <_vfiprintf_r+0x56>
 800264a:	6875      	ldr	r5, [r6, #4]
 800264c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800264e:	07d9      	lsls	r1, r3, #31
 8002650:	d405      	bmi.n	800265e <_vfiprintf_r+0x32>
 8002652:	89ab      	ldrh	r3, [r5, #12]
 8002654:	059a      	lsls	r2, r3, #22
 8002656:	d402      	bmi.n	800265e <_vfiprintf_r+0x32>
 8002658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800265a:	f7ff fe74 	bl	8002346 <__retarget_lock_acquire_recursive>
 800265e:	89ab      	ldrh	r3, [r5, #12]
 8002660:	071b      	lsls	r3, r3, #28
 8002662:	d501      	bpl.n	8002668 <_vfiprintf_r+0x3c>
 8002664:	692b      	ldr	r3, [r5, #16]
 8002666:	b9eb      	cbnz	r3, 80026a4 <_vfiprintf_r+0x78>
 8002668:	4629      	mov	r1, r5
 800266a:	4630      	mov	r0, r6
 800266c:	f7ff fc1a 	bl	8001ea4 <__swsetup_r>
 8002670:	b1c0      	cbz	r0, 80026a4 <_vfiprintf_r+0x78>
 8002672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002674:	07dc      	lsls	r4, r3, #31
 8002676:	d50e      	bpl.n	8002696 <_vfiprintf_r+0x6a>
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	b01d      	add	sp, #116	; 0x74
 800267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <_vfiprintf_r+0x244>)
 8002684:	429d      	cmp	r5, r3
 8002686:	d101      	bne.n	800268c <_vfiprintf_r+0x60>
 8002688:	68b5      	ldr	r5, [r6, #8]
 800268a:	e7df      	b.n	800264c <_vfiprintf_r+0x20>
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <_vfiprintf_r+0x248>)
 800268e:	429d      	cmp	r5, r3
 8002690:	bf08      	it	eq
 8002692:	68f5      	ldreq	r5, [r6, #12]
 8002694:	e7da      	b.n	800264c <_vfiprintf_r+0x20>
 8002696:	89ab      	ldrh	r3, [r5, #12]
 8002698:	0598      	lsls	r0, r3, #22
 800269a:	d4ed      	bmi.n	8002678 <_vfiprintf_r+0x4c>
 800269c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800269e:	f7ff fe53 	bl	8002348 <__retarget_lock_release_recursive>
 80026a2:	e7e9      	b.n	8002678 <_vfiprintf_r+0x4c>
 80026a4:	2300      	movs	r3, #0
 80026a6:	9309      	str	r3, [sp, #36]	; 0x24
 80026a8:	2320      	movs	r3, #32
 80026aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026ae:	2330      	movs	r3, #48	; 0x30
 80026b0:	f04f 0901 	mov.w	r9, #1
 80026b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80026b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002878 <_vfiprintf_r+0x24c>
 80026bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026c0:	4623      	mov	r3, r4
 80026c2:	469a      	mov	sl, r3
 80026c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026c8:	b10a      	cbz	r2, 80026ce <_vfiprintf_r+0xa2>
 80026ca:	2a25      	cmp	r2, #37	; 0x25
 80026cc:	d1f9      	bne.n	80026c2 <_vfiprintf_r+0x96>
 80026ce:	ebba 0b04 	subs.w	fp, sl, r4
 80026d2:	d00b      	beq.n	80026ec <_vfiprintf_r+0xc0>
 80026d4:	465b      	mov	r3, fp
 80026d6:	4622      	mov	r2, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	4630      	mov	r0, r6
 80026dc:	f7ff ff93 	bl	8002606 <__sfputs_r>
 80026e0:	3001      	adds	r0, #1
 80026e2:	f000 80aa 	beq.w	800283a <_vfiprintf_r+0x20e>
 80026e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026e8:	445a      	add	r2, fp
 80026ea:	9209      	str	r2, [sp, #36]	; 0x24
 80026ec:	f89a 3000 	ldrb.w	r3, [sl]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a2 	beq.w	800283a <_vfiprintf_r+0x20e>
 80026f6:	2300      	movs	r3, #0
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002700:	f10a 0a01 	add.w	sl, sl, #1
 8002704:	9304      	str	r3, [sp, #16]
 8002706:	9307      	str	r3, [sp, #28]
 8002708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800270c:	931a      	str	r3, [sp, #104]	; 0x68
 800270e:	4654      	mov	r4, sl
 8002710:	2205      	movs	r2, #5
 8002712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002716:	4858      	ldr	r0, [pc, #352]	; (8002878 <_vfiprintf_r+0x24c>)
 8002718:	f001 f8a8 	bl	800386c <memchr>
 800271c:	9a04      	ldr	r2, [sp, #16]
 800271e:	b9d8      	cbnz	r0, 8002758 <_vfiprintf_r+0x12c>
 8002720:	06d1      	lsls	r1, r2, #27
 8002722:	bf44      	itt	mi
 8002724:	2320      	movmi	r3, #32
 8002726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800272a:	0713      	lsls	r3, r2, #28
 800272c:	bf44      	itt	mi
 800272e:	232b      	movmi	r3, #43	; 0x2b
 8002730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002734:	f89a 3000 	ldrb.w	r3, [sl]
 8002738:	2b2a      	cmp	r3, #42	; 0x2a
 800273a:	d015      	beq.n	8002768 <_vfiprintf_r+0x13c>
 800273c:	4654      	mov	r4, sl
 800273e:	2000      	movs	r0, #0
 8002740:	f04f 0c0a 	mov.w	ip, #10
 8002744:	9a07      	ldr	r2, [sp, #28]
 8002746:	4621      	mov	r1, r4
 8002748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800274c:	3b30      	subs	r3, #48	; 0x30
 800274e:	2b09      	cmp	r3, #9
 8002750:	d94e      	bls.n	80027f0 <_vfiprintf_r+0x1c4>
 8002752:	b1b0      	cbz	r0, 8002782 <_vfiprintf_r+0x156>
 8002754:	9207      	str	r2, [sp, #28]
 8002756:	e014      	b.n	8002782 <_vfiprintf_r+0x156>
 8002758:	eba0 0308 	sub.w	r3, r0, r8
 800275c:	fa09 f303 	lsl.w	r3, r9, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	46a2      	mov	sl, r4
 8002764:	9304      	str	r3, [sp, #16]
 8002766:	e7d2      	b.n	800270e <_vfiprintf_r+0xe2>
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	1d19      	adds	r1, r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	9103      	str	r1, [sp, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	bfbb      	ittet	lt
 8002774:	425b      	neglt	r3, r3
 8002776:	f042 0202 	orrlt.w	r2, r2, #2
 800277a:	9307      	strge	r3, [sp, #28]
 800277c:	9307      	strlt	r3, [sp, #28]
 800277e:	bfb8      	it	lt
 8002780:	9204      	strlt	r2, [sp, #16]
 8002782:	7823      	ldrb	r3, [r4, #0]
 8002784:	2b2e      	cmp	r3, #46	; 0x2e
 8002786:	d10c      	bne.n	80027a2 <_vfiprintf_r+0x176>
 8002788:	7863      	ldrb	r3, [r4, #1]
 800278a:	2b2a      	cmp	r3, #42	; 0x2a
 800278c:	d135      	bne.n	80027fa <_vfiprintf_r+0x1ce>
 800278e:	9b03      	ldr	r3, [sp, #12]
 8002790:	3402      	adds	r4, #2
 8002792:	1d1a      	adds	r2, r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	9203      	str	r2, [sp, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	bfb8      	it	lt
 800279c:	f04f 33ff 	movlt.w	r3, #4294967295
 80027a0:	9305      	str	r3, [sp, #20]
 80027a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800287c <_vfiprintf_r+0x250>
 80027a6:	2203      	movs	r2, #3
 80027a8:	4650      	mov	r0, sl
 80027aa:	7821      	ldrb	r1, [r4, #0]
 80027ac:	f001 f85e 	bl	800386c <memchr>
 80027b0:	b140      	cbz	r0, 80027c4 <_vfiprintf_r+0x198>
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	eba0 000a 	sub.w	r0, r0, sl
 80027b8:	fa03 f000 	lsl.w	r0, r3, r0
 80027bc:	9b04      	ldr	r3, [sp, #16]
 80027be:	3401      	adds	r4, #1
 80027c0:	4303      	orrs	r3, r0
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c8:	2206      	movs	r2, #6
 80027ca:	482d      	ldr	r0, [pc, #180]	; (8002880 <_vfiprintf_r+0x254>)
 80027cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027d0:	f001 f84c 	bl	800386c <memchr>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d03f      	beq.n	8002858 <_vfiprintf_r+0x22c>
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <_vfiprintf_r+0x258>)
 80027da:	bb1b      	cbnz	r3, 8002824 <_vfiprintf_r+0x1f8>
 80027dc:	9b03      	ldr	r3, [sp, #12]
 80027de:	3307      	adds	r3, #7
 80027e0:	f023 0307 	bic.w	r3, r3, #7
 80027e4:	3308      	adds	r3, #8
 80027e6:	9303      	str	r3, [sp, #12]
 80027e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ea:	443b      	add	r3, r7
 80027ec:	9309      	str	r3, [sp, #36]	; 0x24
 80027ee:	e767      	b.n	80026c0 <_vfiprintf_r+0x94>
 80027f0:	460c      	mov	r4, r1
 80027f2:	2001      	movs	r0, #1
 80027f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80027f8:	e7a5      	b.n	8002746 <_vfiprintf_r+0x11a>
 80027fa:	2300      	movs	r3, #0
 80027fc:	f04f 0c0a 	mov.w	ip, #10
 8002800:	4619      	mov	r1, r3
 8002802:	3401      	adds	r4, #1
 8002804:	9305      	str	r3, [sp, #20]
 8002806:	4620      	mov	r0, r4
 8002808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800280c:	3a30      	subs	r2, #48	; 0x30
 800280e:	2a09      	cmp	r2, #9
 8002810:	d903      	bls.n	800281a <_vfiprintf_r+0x1ee>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0c5      	beq.n	80027a2 <_vfiprintf_r+0x176>
 8002816:	9105      	str	r1, [sp, #20]
 8002818:	e7c3      	b.n	80027a2 <_vfiprintf_r+0x176>
 800281a:	4604      	mov	r4, r0
 800281c:	2301      	movs	r3, #1
 800281e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002822:	e7f0      	b.n	8002806 <_vfiprintf_r+0x1da>
 8002824:	ab03      	add	r3, sp, #12
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	462a      	mov	r2, r5
 800282a:	4630      	mov	r0, r6
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <_vfiprintf_r+0x25c>)
 800282e:	a904      	add	r1, sp, #16
 8002830:	f3af 8000 	nop.w
 8002834:	4607      	mov	r7, r0
 8002836:	1c78      	adds	r0, r7, #1
 8002838:	d1d6      	bne.n	80027e8 <_vfiprintf_r+0x1bc>
 800283a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800283c:	07d9      	lsls	r1, r3, #31
 800283e:	d405      	bmi.n	800284c <_vfiprintf_r+0x220>
 8002840:	89ab      	ldrh	r3, [r5, #12]
 8002842:	059a      	lsls	r2, r3, #22
 8002844:	d402      	bmi.n	800284c <_vfiprintf_r+0x220>
 8002846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002848:	f7ff fd7e 	bl	8002348 <__retarget_lock_release_recursive>
 800284c:	89ab      	ldrh	r3, [r5, #12]
 800284e:	065b      	lsls	r3, r3, #25
 8002850:	f53f af12 	bmi.w	8002678 <_vfiprintf_r+0x4c>
 8002854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002856:	e711      	b.n	800267c <_vfiprintf_r+0x50>
 8002858:	ab03      	add	r3, sp, #12
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	462a      	mov	r2, r5
 800285e:	4630      	mov	r0, r6
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <_vfiprintf_r+0x25c>)
 8002862:	a904      	add	r1, sp, #16
 8002864:	f000 f882 	bl	800296c <_printf_i>
 8002868:	e7e4      	b.n	8002834 <_vfiprintf_r+0x208>
 800286a:	bf00      	nop
 800286c:	080039e4 	.word	0x080039e4
 8002870:	08003a04 	.word	0x08003a04
 8002874:	080039c4 	.word	0x080039c4
 8002878:	08003a24 	.word	0x08003a24
 800287c:	08003a2a 	.word	0x08003a2a
 8002880:	08003a2e 	.word	0x08003a2e
 8002884:	00000000 	.word	0x00000000
 8002888:	08002607 	.word	0x08002607

0800288c <_printf_common>:
 800288c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002890:	4616      	mov	r6, r2
 8002892:	4699      	mov	r9, r3
 8002894:	688a      	ldr	r2, [r1, #8]
 8002896:	690b      	ldr	r3, [r1, #16]
 8002898:	4607      	mov	r7, r0
 800289a:	4293      	cmp	r3, r2
 800289c:	bfb8      	it	lt
 800289e:	4613      	movlt	r3, r2
 80028a0:	6033      	str	r3, [r6, #0]
 80028a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028a6:	460c      	mov	r4, r1
 80028a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028ac:	b10a      	cbz	r2, 80028b2 <_printf_common+0x26>
 80028ae:	3301      	adds	r3, #1
 80028b0:	6033      	str	r3, [r6, #0]
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	0699      	lsls	r1, r3, #26
 80028b6:	bf42      	ittt	mi
 80028b8:	6833      	ldrmi	r3, [r6, #0]
 80028ba:	3302      	addmi	r3, #2
 80028bc:	6033      	strmi	r3, [r6, #0]
 80028be:	6825      	ldr	r5, [r4, #0]
 80028c0:	f015 0506 	ands.w	r5, r5, #6
 80028c4:	d106      	bne.n	80028d4 <_printf_common+0x48>
 80028c6:	f104 0a19 	add.w	sl, r4, #25
 80028ca:	68e3      	ldr	r3, [r4, #12]
 80028cc:	6832      	ldr	r2, [r6, #0]
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	42ab      	cmp	r3, r5
 80028d2:	dc28      	bgt.n	8002926 <_printf_common+0x9a>
 80028d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028d8:	1e13      	subs	r3, r2, #0
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	bf18      	it	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	0692      	lsls	r2, r2, #26
 80028e2:	d42d      	bmi.n	8002940 <_printf_common+0xb4>
 80028e4:	4649      	mov	r1, r9
 80028e6:	4638      	mov	r0, r7
 80028e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028ec:	47c0      	blx	r8
 80028ee:	3001      	adds	r0, #1
 80028f0:	d020      	beq.n	8002934 <_printf_common+0xa8>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	68e5      	ldr	r5, [r4, #12]
 80028f6:	f003 0306 	and.w	r3, r3, #6
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf18      	it	ne
 80028fe:	2500      	movne	r5, #0
 8002900:	6832      	ldr	r2, [r6, #0]
 8002902:	f04f 0600 	mov.w	r6, #0
 8002906:	68a3      	ldr	r3, [r4, #8]
 8002908:	bf08      	it	eq
 800290a:	1aad      	subeq	r5, r5, r2
 800290c:	6922      	ldr	r2, [r4, #16]
 800290e:	bf08      	it	eq
 8002910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002914:	4293      	cmp	r3, r2
 8002916:	bfc4      	itt	gt
 8002918:	1a9b      	subgt	r3, r3, r2
 800291a:	18ed      	addgt	r5, r5, r3
 800291c:	341a      	adds	r4, #26
 800291e:	42b5      	cmp	r5, r6
 8002920:	d11a      	bne.n	8002958 <_printf_common+0xcc>
 8002922:	2000      	movs	r0, #0
 8002924:	e008      	b.n	8002938 <_printf_common+0xac>
 8002926:	2301      	movs	r3, #1
 8002928:	4652      	mov	r2, sl
 800292a:	4649      	mov	r1, r9
 800292c:	4638      	mov	r0, r7
 800292e:	47c0      	blx	r8
 8002930:	3001      	adds	r0, #1
 8002932:	d103      	bne.n	800293c <_printf_common+0xb0>
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293c:	3501      	adds	r5, #1
 800293e:	e7c4      	b.n	80028ca <_printf_common+0x3e>
 8002940:	2030      	movs	r0, #48	; 0x30
 8002942:	18e1      	adds	r1, r4, r3
 8002944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800294e:	4422      	add	r2, r4
 8002950:	3302      	adds	r3, #2
 8002952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002956:	e7c5      	b.n	80028e4 <_printf_common+0x58>
 8002958:	2301      	movs	r3, #1
 800295a:	4622      	mov	r2, r4
 800295c:	4649      	mov	r1, r9
 800295e:	4638      	mov	r0, r7
 8002960:	47c0      	blx	r8
 8002962:	3001      	adds	r0, #1
 8002964:	d0e6      	beq.n	8002934 <_printf_common+0xa8>
 8002966:	3601      	adds	r6, #1
 8002968:	e7d9      	b.n	800291e <_printf_common+0x92>
	...

0800296c <_printf_i>:
 800296c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	7e0f      	ldrb	r7, [r1, #24]
 8002972:	4691      	mov	r9, r2
 8002974:	2f78      	cmp	r7, #120	; 0x78
 8002976:	4680      	mov	r8, r0
 8002978:	460c      	mov	r4, r1
 800297a:	469a      	mov	sl, r3
 800297c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800297e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002982:	d807      	bhi.n	8002994 <_printf_i+0x28>
 8002984:	2f62      	cmp	r7, #98	; 0x62
 8002986:	d80a      	bhi.n	800299e <_printf_i+0x32>
 8002988:	2f00      	cmp	r7, #0
 800298a:	f000 80d9 	beq.w	8002b40 <_printf_i+0x1d4>
 800298e:	2f58      	cmp	r7, #88	; 0x58
 8002990:	f000 80a4 	beq.w	8002adc <_printf_i+0x170>
 8002994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800299c:	e03a      	b.n	8002a14 <_printf_i+0xa8>
 800299e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029a2:	2b15      	cmp	r3, #21
 80029a4:	d8f6      	bhi.n	8002994 <_printf_i+0x28>
 80029a6:	a101      	add	r1, pc, #4	; (adr r1, 80029ac <_printf_i+0x40>)
 80029a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029ac:	08002a05 	.word	0x08002a05
 80029b0:	08002a19 	.word	0x08002a19
 80029b4:	08002995 	.word	0x08002995
 80029b8:	08002995 	.word	0x08002995
 80029bc:	08002995 	.word	0x08002995
 80029c0:	08002995 	.word	0x08002995
 80029c4:	08002a19 	.word	0x08002a19
 80029c8:	08002995 	.word	0x08002995
 80029cc:	08002995 	.word	0x08002995
 80029d0:	08002995 	.word	0x08002995
 80029d4:	08002995 	.word	0x08002995
 80029d8:	08002b27 	.word	0x08002b27
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002b09 	.word	0x08002b09
 80029e4:	08002995 	.word	0x08002995
 80029e8:	08002995 	.word	0x08002995
 80029ec:	08002b49 	.word	0x08002b49
 80029f0:	08002995 	.word	0x08002995
 80029f4:	08002a49 	.word	0x08002a49
 80029f8:	08002995 	.word	0x08002995
 80029fc:	08002995 	.word	0x08002995
 8002a00:	08002b11 	.word	0x08002b11
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	602a      	str	r2, [r5, #0]
 8002a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0a4      	b.n	8002b62 <_printf_i+0x1f6>
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	6829      	ldr	r1, [r5, #0]
 8002a1c:	0606      	lsls	r6, r0, #24
 8002a1e:	f101 0304 	add.w	r3, r1, #4
 8002a22:	d50a      	bpl.n	8002a3a <_printf_i+0xce>
 8002a24:	680e      	ldr	r6, [r1, #0]
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	2e00      	cmp	r6, #0
 8002a2a:	da03      	bge.n	8002a34 <_printf_i+0xc8>
 8002a2c:	232d      	movs	r3, #45	; 0x2d
 8002a2e:	4276      	negs	r6, r6
 8002a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a34:	230a      	movs	r3, #10
 8002a36:	485e      	ldr	r0, [pc, #376]	; (8002bb0 <_printf_i+0x244>)
 8002a38:	e019      	b.n	8002a6e <_printf_i+0x102>
 8002a3a:	680e      	ldr	r6, [r1, #0]
 8002a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a40:	602b      	str	r3, [r5, #0]
 8002a42:	bf18      	it	ne
 8002a44:	b236      	sxthne	r6, r6
 8002a46:	e7ef      	b.n	8002a28 <_printf_i+0xbc>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	1d19      	adds	r1, r3, #4
 8002a4e:	6029      	str	r1, [r5, #0]
 8002a50:	0601      	lsls	r1, r0, #24
 8002a52:	d501      	bpl.n	8002a58 <_printf_i+0xec>
 8002a54:	681e      	ldr	r6, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <_printf_i+0xf2>
 8002a58:	0646      	lsls	r6, r0, #25
 8002a5a:	d5fb      	bpl.n	8002a54 <_printf_i+0xe8>
 8002a5c:	881e      	ldrh	r6, [r3, #0]
 8002a5e:	2f6f      	cmp	r7, #111	; 0x6f
 8002a60:	bf0c      	ite	eq
 8002a62:	2308      	moveq	r3, #8
 8002a64:	230a      	movne	r3, #10
 8002a66:	4852      	ldr	r0, [pc, #328]	; (8002bb0 <_printf_i+0x244>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a6e:	6865      	ldr	r5, [r4, #4]
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	bfa8      	it	ge
 8002a74:	6821      	ldrge	r1, [r4, #0]
 8002a76:	60a5      	str	r5, [r4, #8]
 8002a78:	bfa4      	itt	ge
 8002a7a:	f021 0104 	bicge.w	r1, r1, #4
 8002a7e:	6021      	strge	r1, [r4, #0]
 8002a80:	b90e      	cbnz	r6, 8002a86 <_printf_i+0x11a>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d04d      	beq.n	8002b22 <_printf_i+0x1b6>
 8002a86:	4615      	mov	r5, r2
 8002a88:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a8c:	fb03 6711 	mls	r7, r3, r1, r6
 8002a90:	5dc7      	ldrb	r7, [r0, r7]
 8002a92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a96:	4637      	mov	r7, r6
 8002a98:	42bb      	cmp	r3, r7
 8002a9a:	460e      	mov	r6, r1
 8002a9c:	d9f4      	bls.n	8002a88 <_printf_i+0x11c>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d10b      	bne.n	8002aba <_printf_i+0x14e>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	07de      	lsls	r6, r3, #31
 8002aa6:	d508      	bpl.n	8002aba <_printf_i+0x14e>
 8002aa8:	6923      	ldr	r3, [r4, #16]
 8002aaa:	6861      	ldr	r1, [r4, #4]
 8002aac:	4299      	cmp	r1, r3
 8002aae:	bfde      	ittt	le
 8002ab0:	2330      	movle	r3, #48	; 0x30
 8002ab2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ab6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002aba:	1b52      	subs	r2, r2, r5
 8002abc:	6122      	str	r2, [r4, #16]
 8002abe:	464b      	mov	r3, r9
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	f8cd a000 	str.w	sl, [sp]
 8002ac8:	aa03      	add	r2, sp, #12
 8002aca:	f7ff fedf 	bl	800288c <_printf_common>
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d14c      	bne.n	8002b6c <_printf_i+0x200>
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	b004      	add	sp, #16
 8002ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002adc:	4834      	ldr	r0, [pc, #208]	; (8002bb0 <_printf_i+0x244>)
 8002ade:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ae2:	6829      	ldr	r1, [r5, #0]
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002aea:	6029      	str	r1, [r5, #0]
 8002aec:	061d      	lsls	r5, r3, #24
 8002aee:	d514      	bpl.n	8002b1a <_printf_i+0x1ae>
 8002af0:	07df      	lsls	r7, r3, #31
 8002af2:	bf44      	itt	mi
 8002af4:	f043 0320 	orrmi.w	r3, r3, #32
 8002af8:	6023      	strmi	r3, [r4, #0]
 8002afa:	b91e      	cbnz	r6, 8002b04 <_printf_i+0x198>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f023 0320 	bic.w	r3, r3, #32
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	2310      	movs	r3, #16
 8002b06:	e7af      	b.n	8002a68 <_printf_i+0xfc>
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	f043 0320 	orr.w	r3, r3, #32
 8002b0e:	6023      	str	r3, [r4, #0]
 8002b10:	2378      	movs	r3, #120	; 0x78
 8002b12:	4828      	ldr	r0, [pc, #160]	; (8002bb4 <_printf_i+0x248>)
 8002b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b18:	e7e3      	b.n	8002ae2 <_printf_i+0x176>
 8002b1a:	0659      	lsls	r1, r3, #25
 8002b1c:	bf48      	it	mi
 8002b1e:	b2b6      	uxthmi	r6, r6
 8002b20:	e7e6      	b.n	8002af0 <_printf_i+0x184>
 8002b22:	4615      	mov	r5, r2
 8002b24:	e7bb      	b.n	8002a9e <_printf_i+0x132>
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	6826      	ldr	r6, [r4, #0]
 8002b2a:	1d18      	adds	r0, r3, #4
 8002b2c:	6961      	ldr	r1, [r4, #20]
 8002b2e:	6028      	str	r0, [r5, #0]
 8002b30:	0635      	lsls	r5, r6, #24
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	d501      	bpl.n	8002b3a <_printf_i+0x1ce>
 8002b36:	6019      	str	r1, [r3, #0]
 8002b38:	e002      	b.n	8002b40 <_printf_i+0x1d4>
 8002b3a:	0670      	lsls	r0, r6, #25
 8002b3c:	d5fb      	bpl.n	8002b36 <_printf_i+0x1ca>
 8002b3e:	8019      	strh	r1, [r3, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	4615      	mov	r5, r2
 8002b44:	6123      	str	r3, [r4, #16]
 8002b46:	e7ba      	b.n	8002abe <_printf_i+0x152>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	1d1a      	adds	r2, r3, #4
 8002b4e:	602a      	str	r2, [r5, #0]
 8002b50:	681d      	ldr	r5, [r3, #0]
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 fe89 	bl	800386c <memchr>
 8002b5a:	b108      	cbz	r0, 8002b60 <_printf_i+0x1f4>
 8002b5c:	1b40      	subs	r0, r0, r5
 8002b5e:	6060      	str	r0, [r4, #4]
 8002b60:	6863      	ldr	r3, [r4, #4]
 8002b62:	6123      	str	r3, [r4, #16]
 8002b64:	2300      	movs	r3, #0
 8002b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b6a:	e7a8      	b.n	8002abe <_printf_i+0x152>
 8002b6c:	462a      	mov	r2, r5
 8002b6e:	4649      	mov	r1, r9
 8002b70:	4640      	mov	r0, r8
 8002b72:	6923      	ldr	r3, [r4, #16]
 8002b74:	47d0      	blx	sl
 8002b76:	3001      	adds	r0, #1
 8002b78:	d0ab      	beq.n	8002ad2 <_printf_i+0x166>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	079b      	lsls	r3, r3, #30
 8002b7e:	d413      	bmi.n	8002ba8 <_printf_i+0x23c>
 8002b80:	68e0      	ldr	r0, [r4, #12]
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	4298      	cmp	r0, r3
 8002b86:	bfb8      	it	lt
 8002b88:	4618      	movlt	r0, r3
 8002b8a:	e7a4      	b.n	8002ad6 <_printf_i+0x16a>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4632      	mov	r2, r6
 8002b90:	4649      	mov	r1, r9
 8002b92:	4640      	mov	r0, r8
 8002b94:	47d0      	blx	sl
 8002b96:	3001      	adds	r0, #1
 8002b98:	d09b      	beq.n	8002ad2 <_printf_i+0x166>
 8002b9a:	3501      	adds	r5, #1
 8002b9c:	68e3      	ldr	r3, [r4, #12]
 8002b9e:	9903      	ldr	r1, [sp, #12]
 8002ba0:	1a5b      	subs	r3, r3, r1
 8002ba2:	42ab      	cmp	r3, r5
 8002ba4:	dcf2      	bgt.n	8002b8c <_printf_i+0x220>
 8002ba6:	e7eb      	b.n	8002b80 <_printf_i+0x214>
 8002ba8:	2500      	movs	r5, #0
 8002baa:	f104 0619 	add.w	r6, r4, #25
 8002bae:	e7f5      	b.n	8002b9c <_printf_i+0x230>
 8002bb0:	08003a35 	.word	0x08003a35
 8002bb4:	08003a46 	.word	0x08003a46

08002bb8 <__svfiscanf_r>:
 8002bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bbc:	461d      	mov	r5, r3
 8002bbe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	07df      	lsls	r7, r3, #31
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	4692      	mov	sl, r2
 8002bc8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002bcc:	d405      	bmi.n	8002bda <__svfiscanf_r+0x22>
 8002bce:	898b      	ldrh	r3, [r1, #12]
 8002bd0:	0598      	lsls	r0, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <__svfiscanf_r+0x22>
 8002bd4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8002bd6:	f7ff fbb6 	bl	8002346 <__retarget_lock_acquire_recursive>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8002be0:	4ba6      	ldr	r3, [pc, #664]	; (8002e7c <__svfiscanf_r+0x2c4>)
 8002be2:	f10d 0804 	add.w	r8, sp, #4
 8002be6:	93a0      	str	r3, [sp, #640]	; 0x280
 8002be8:	4ba5      	ldr	r3, [pc, #660]	; (8002e80 <__svfiscanf_r+0x2c8>)
 8002bea:	4fa6      	ldr	r7, [pc, #664]	; (8002e84 <__svfiscanf_r+0x2cc>)
 8002bec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8002e88 <__svfiscanf_r+0x2d0>
 8002bf0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002bf4:	93a1      	str	r3, [sp, #644]	; 0x284
 8002bf6:	9500      	str	r5, [sp, #0]
 8002bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8173 	beq.w	8002ee8 <__svfiscanf_r+0x330>
 8002c02:	5dd9      	ldrb	r1, [r3, r7]
 8002c04:	f10a 0501 	add.w	r5, sl, #1
 8002c08:	f011 0108 	ands.w	r1, r1, #8
 8002c0c:	d019      	beq.n	8002c42 <__svfiscanf_r+0x8a>
 8002c0e:	6863      	ldr	r3, [r4, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dd0f      	ble.n	8002c34 <__svfiscanf_r+0x7c>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	5cba      	ldrb	r2, [r7, r2]
 8002c1a:	0711      	lsls	r1, r2, #28
 8002c1c:	d401      	bmi.n	8002c22 <__svfiscanf_r+0x6a>
 8002c1e:	46aa      	mov	sl, r5
 8002c20:	e7ea      	b.n	8002bf8 <__svfiscanf_r+0x40>
 8002c22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002c24:	3301      	adds	r3, #1
 8002c26:	3201      	adds	r2, #1
 8002c28:	9245      	str	r2, [sp, #276]	; 0x114
 8002c2a:	6862      	ldr	r2, [r4, #4]
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	6062      	str	r2, [r4, #4]
 8002c32:	e7ec      	b.n	8002c0e <__svfiscanf_r+0x56>
 8002c34:	4621      	mov	r1, r4
 8002c36:	4630      	mov	r0, r6
 8002c38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002c3a:	4798      	blx	r3
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d0e9      	beq.n	8002c14 <__svfiscanf_r+0x5c>
 8002c40:	e7ed      	b.n	8002c1e <__svfiscanf_r+0x66>
 8002c42:	2b25      	cmp	r3, #37	; 0x25
 8002c44:	d012      	beq.n	8002c6c <__svfiscanf_r+0xb4>
 8002c46:	469a      	mov	sl, r3
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f340 8095 	ble.w	8002d7a <__svfiscanf_r+0x1c2>
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	7813      	ldrb	r3, [r2, #0]
 8002c54:	4553      	cmp	r3, sl
 8002c56:	f040 8147 	bne.w	8002ee8 <__svfiscanf_r+0x330>
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	3201      	adds	r2, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6063      	str	r3, [r4, #4]
 8002c62:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002c64:	6022      	str	r2, [r4, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	9345      	str	r3, [sp, #276]	; 0x114
 8002c6a:	e7d8      	b.n	8002c1e <__svfiscanf_r+0x66>
 8002c6c:	9141      	str	r1, [sp, #260]	; 0x104
 8002c6e:	9143      	str	r1, [sp, #268]	; 0x10c
 8002c70:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002c74:	220a      	movs	r2, #10
 8002c76:	2b2a      	cmp	r3, #42	; 0x2a
 8002c78:	bf02      	ittt	eq
 8002c7a:	2310      	moveq	r3, #16
 8002c7c:	f10a 0502 	addeq.w	r5, sl, #2
 8002c80:	9341      	streq	r3, [sp, #260]	; 0x104
 8002c82:	46aa      	mov	sl, r5
 8002c84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002c88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d91e      	bls.n	8002cce <__svfiscanf_r+0x116>
 8002c90:	2203      	movs	r2, #3
 8002c92:	487d      	ldr	r0, [pc, #500]	; (8002e88 <__svfiscanf_r+0x2d0>)
 8002c94:	f000 fdea 	bl	800386c <memchr>
 8002c98:	b140      	cbz	r0, 8002cac <__svfiscanf_r+0xf4>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4655      	mov	r5, sl
 8002c9e:	eba0 0009 	sub.w	r0, r0, r9
 8002ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002ca8:	4318      	orrs	r0, r3
 8002caa:	9041      	str	r0, [sp, #260]	; 0x104
 8002cac:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cb0:	2b78      	cmp	r3, #120	; 0x78
 8002cb2:	d807      	bhi.n	8002cc4 <__svfiscanf_r+0x10c>
 8002cb4:	2b57      	cmp	r3, #87	; 0x57
 8002cb6:	d811      	bhi.n	8002cdc <__svfiscanf_r+0x124>
 8002cb8:	2b25      	cmp	r3, #37	; 0x25
 8002cba:	d0c4      	beq.n	8002c46 <__svfiscanf_r+0x8e>
 8002cbc:	d858      	bhi.n	8002d70 <__svfiscanf_r+0x1b8>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80c8 	beq.w	8002e54 <__svfiscanf_r+0x29c>
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8002cc8:	230a      	movs	r3, #10
 8002cca:	9342      	str	r3, [sp, #264]	; 0x108
 8002ccc:	e07c      	b.n	8002dc8 <__svfiscanf_r+0x210>
 8002cce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002cd0:	4655      	mov	r5, sl
 8002cd2:	fb02 1103 	mla	r1, r2, r3, r1
 8002cd6:	3930      	subs	r1, #48	; 0x30
 8002cd8:	9143      	str	r1, [sp, #268]	; 0x10c
 8002cda:	e7d2      	b.n	8002c82 <__svfiscanf_r+0xca>
 8002cdc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002ce0:	2a20      	cmp	r2, #32
 8002ce2:	d8ef      	bhi.n	8002cc4 <__svfiscanf_r+0x10c>
 8002ce4:	a101      	add	r1, pc, #4	; (adr r1, 8002cec <__svfiscanf_r+0x134>)
 8002ce6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002db3 	.word	0x08002db3
 8002cf0:	08002cc5 	.word	0x08002cc5
 8002cf4:	08002cc5 	.word	0x08002cc5
 8002cf8:	08002e11 	.word	0x08002e11
 8002cfc:	08002cc5 	.word	0x08002cc5
 8002d00:	08002cc5 	.word	0x08002cc5
 8002d04:	08002cc5 	.word	0x08002cc5
 8002d08:	08002cc5 	.word	0x08002cc5
 8002d0c:	08002cc5 	.word	0x08002cc5
 8002d10:	08002cc5 	.word	0x08002cc5
 8002d14:	08002cc5 	.word	0x08002cc5
 8002d18:	08002e27 	.word	0x08002e27
 8002d1c:	08002dfd 	.word	0x08002dfd
 8002d20:	08002d77 	.word	0x08002d77
 8002d24:	08002d77 	.word	0x08002d77
 8002d28:	08002d77 	.word	0x08002d77
 8002d2c:	08002cc5 	.word	0x08002cc5
 8002d30:	08002e01 	.word	0x08002e01
 8002d34:	08002cc5 	.word	0x08002cc5
 8002d38:	08002cc5 	.word	0x08002cc5
 8002d3c:	08002cc5 	.word	0x08002cc5
 8002d40:	08002cc5 	.word	0x08002cc5
 8002d44:	08002e37 	.word	0x08002e37
 8002d48:	08002e09 	.word	0x08002e09
 8002d4c:	08002dab 	.word	0x08002dab
 8002d50:	08002cc5 	.word	0x08002cc5
 8002d54:	08002cc5 	.word	0x08002cc5
 8002d58:	08002e33 	.word	0x08002e33
 8002d5c:	08002cc5 	.word	0x08002cc5
 8002d60:	08002dfd 	.word	0x08002dfd
 8002d64:	08002cc5 	.word	0x08002cc5
 8002d68:	08002cc5 	.word	0x08002cc5
 8002d6c:	08002db3 	.word	0x08002db3
 8002d70:	3b45      	subs	r3, #69	; 0x45
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d8a6      	bhi.n	8002cc4 <__svfiscanf_r+0x10c>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e025      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002d80:	4798      	blx	r3
 8002d82:	2800      	cmp	r0, #0
 8002d84:	f43f af64 	beq.w	8002c50 <__svfiscanf_r+0x98>
 8002d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d8a:	07da      	lsls	r2, r3, #31
 8002d8c:	f140 80a4 	bpl.w	8002ed8 <__svfiscanf_r+0x320>
 8002d90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d067      	beq.n	8002e66 <__svfiscanf_r+0x2ae>
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d9c:	bf18      	it	ne
 8002d9e:	f04f 30ff 	movne.w	r0, #4294967295
 8002da2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8002da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002daa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002dac:	f042 0220 	orr.w	r2, r2, #32
 8002db0:	9241      	str	r2, [sp, #260]	; 0x104
 8002db2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db8:	9241      	str	r2, [sp, #260]	; 0x104
 8002dba:	2210      	movs	r2, #16
 8002dbc:	2b6f      	cmp	r3, #111	; 0x6f
 8002dbe:	bf34      	ite	cc
 8002dc0:	2303      	movcc	r3, #3
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	9242      	str	r2, [sp, #264]	; 0x108
 8002dc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8002dc8:	6863      	ldr	r3, [r4, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dd4e      	ble.n	8002e6c <__svfiscanf_r+0x2b4>
 8002dce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dd0:	065b      	lsls	r3, r3, #25
 8002dd2:	d404      	bmi.n	8002dde <__svfiscanf_r+0x226>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	5cba      	ldrb	r2, [r7, r2]
 8002dda:	0710      	lsls	r0, r2, #28
 8002ddc:	d456      	bmi.n	8002e8c <__svfiscanf_r+0x2d4>
 8002dde:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	dc65      	bgt.n	8002eb0 <__svfiscanf_r+0x2f8>
 8002de4:	466b      	mov	r3, sp
 8002de6:	4622      	mov	r2, r4
 8002de8:	4630      	mov	r0, r6
 8002dea:	a941      	add	r1, sp, #260	; 0x104
 8002dec:	f000 f8b2 	bl	8002f54 <_scanf_chars>
 8002df0:	2801      	cmp	r0, #1
 8002df2:	d079      	beq.n	8002ee8 <__svfiscanf_r+0x330>
 8002df4:	2802      	cmp	r0, #2
 8002df6:	f47f af12 	bne.w	8002c1e <__svfiscanf_r+0x66>
 8002dfa:	e7c5      	b.n	8002d88 <__svfiscanf_r+0x1d0>
 8002dfc:	220a      	movs	r2, #10
 8002dfe:	e7dd      	b.n	8002dbc <__svfiscanf_r+0x204>
 8002e00:	2300      	movs	r3, #0
 8002e02:	9342      	str	r3, [sp, #264]	; 0x108
 8002e04:	2303      	movs	r3, #3
 8002e06:	e7de      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	9342      	str	r3, [sp, #264]	; 0x108
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e7da      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002e10:	4629      	mov	r1, r5
 8002e12:	4640      	mov	r0, r8
 8002e14:	f000 fa96 	bl	8003344 <__sccl>
 8002e18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	9341      	str	r3, [sp, #260]	; 0x104
 8002e22:	2301      	movs	r3, #1
 8002e24:	e7cf      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002e26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2c:	9341      	str	r3, [sp, #260]	; 0x104
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e7c9      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e7c7      	b.n	8002dc6 <__svfiscanf_r+0x20e>
 8002e36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002e38:	06c3      	lsls	r3, r0, #27
 8002e3a:	f53f aef0 	bmi.w	8002c1e <__svfiscanf_r+0x66>
 8002e3e:	9b00      	ldr	r3, [sp, #0]
 8002e40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002e42:	1d19      	adds	r1, r3, #4
 8002e44:	9100      	str	r1, [sp, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f010 0f01 	tst.w	r0, #1
 8002e4c:	bf14      	ite	ne
 8002e4e:	801a      	strhne	r2, [r3, #0]
 8002e50:	601a      	streq	r2, [r3, #0]
 8002e52:	e6e4      	b.n	8002c1e <__svfiscanf_r+0x66>
 8002e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e56:	07d8      	lsls	r0, r3, #31
 8002e58:	d405      	bmi.n	8002e66 <__svfiscanf_r+0x2ae>
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	0599      	lsls	r1, r3, #22
 8002e5e:	d402      	bmi.n	8002e66 <__svfiscanf_r+0x2ae>
 8002e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e62:	f7ff fa71 	bl	8002348 <__retarget_lock_release_recursive>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	e79a      	b.n	8002da2 <__svfiscanf_r+0x1ea>
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4630      	mov	r0, r6
 8002e70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e72:	4798      	blx	r3
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d0aa      	beq.n	8002dce <__svfiscanf_r+0x216>
 8002e78:	e786      	b.n	8002d88 <__svfiscanf_r+0x1d0>
 8002e7a:	bf00      	nop
 8002e7c:	08003691 	.word	0x08003691
 8002e80:	0800320d 	.word	0x0800320d
 8002e84:	08003a73 	.word	0x08003a73
 8002e88:	08003a2a 	.word	0x08003a2a
 8002e8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002e8e:	3201      	adds	r2, #1
 8002e90:	9245      	str	r2, [sp, #276]	; 0x114
 8002e92:	6862      	ldr	r2, [r4, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	2a00      	cmp	r2, #0
 8002e98:	6062      	str	r2, [r4, #4]
 8002e9a:	dd02      	ble.n	8002ea2 <__svfiscanf_r+0x2ea>
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	e798      	b.n	8002dd4 <__svfiscanf_r+0x21c>
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002ea8:	4798      	blx	r3
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d092      	beq.n	8002dd4 <__svfiscanf_r+0x21c>
 8002eae:	e76b      	b.n	8002d88 <__svfiscanf_r+0x1d0>
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	dc06      	bgt.n	8002ec2 <__svfiscanf_r+0x30a>
 8002eb4:	466b      	mov	r3, sp
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4630      	mov	r0, r6
 8002eba:	a941      	add	r1, sp, #260	; 0x104
 8002ebc:	f000 f8a4 	bl	8003008 <_scanf_i>
 8002ec0:	e796      	b.n	8002df0 <__svfiscanf_r+0x238>
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <__svfiscanf_r+0x348>)
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f43f aeaa 	beq.w	8002c1e <__svfiscanf_r+0x66>
 8002eca:	466b      	mov	r3, sp
 8002ecc:	4622      	mov	r2, r4
 8002ece:	4630      	mov	r0, r6
 8002ed0:	a941      	add	r1, sp, #260	; 0x104
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	e78b      	b.n	8002df0 <__svfiscanf_r+0x238>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	0599      	lsls	r1, r3, #22
 8002edc:	f53f af58 	bmi.w	8002d90 <__svfiscanf_r+0x1d8>
 8002ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ee2:	f7ff fa31 	bl	8002348 <__retarget_lock_release_recursive>
 8002ee6:	e753      	b.n	8002d90 <__svfiscanf_r+0x1d8>
 8002ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eea:	07da      	lsls	r2, r3, #31
 8002eec:	d405      	bmi.n	8002efa <__svfiscanf_r+0x342>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	059b      	lsls	r3, r3, #22
 8002ef2:	d402      	bmi.n	8002efa <__svfiscanf_r+0x342>
 8002ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ef6:	f7ff fa27 	bl	8002348 <__retarget_lock_release_recursive>
 8002efa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002efc:	e751      	b.n	8002da2 <__svfiscanf_r+0x1ea>
 8002efe:	bf00      	nop
 8002f00:	00000000 	.word	0x00000000

08002f04 <_vfiscanf_r>:
 8002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f08:	460c      	mov	r4, r1
 8002f0a:	4616      	mov	r6, r2
 8002f0c:	461f      	mov	r7, r3
 8002f0e:	4605      	mov	r5, r0
 8002f10:	b118      	cbz	r0, 8002f1a <_vfiscanf_r+0x16>
 8002f12:	6983      	ldr	r3, [r0, #24]
 8002f14:	b90b      	cbnz	r3, 8002f1a <_vfiscanf_r+0x16>
 8002f16:	f7ff f95b 	bl	80021d0 <__sinit>
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <_vfiscanf_r+0x44>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	d108      	bne.n	8002f32 <_vfiscanf_r+0x2e>
 8002f20:	686c      	ldr	r4, [r5, #4]
 8002f22:	463b      	mov	r3, r7
 8002f24:	4632      	mov	r2, r6
 8002f26:	4621      	mov	r1, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2e:	f7ff be43 	b.w	8002bb8 <__svfiscanf_r>
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <_vfiscanf_r+0x48>)
 8002f34:	429c      	cmp	r4, r3
 8002f36:	d101      	bne.n	8002f3c <_vfiscanf_r+0x38>
 8002f38:	68ac      	ldr	r4, [r5, #8]
 8002f3a:	e7f2      	b.n	8002f22 <_vfiscanf_r+0x1e>
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <_vfiscanf_r+0x4c>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	bf08      	it	eq
 8002f42:	68ec      	ldreq	r4, [r5, #12]
 8002f44:	e7ed      	b.n	8002f22 <_vfiscanf_r+0x1e>
 8002f46:	bf00      	nop
 8002f48:	080039e4 	.word	0x080039e4
 8002f4c:	08003a04 	.word	0x08003a04
 8002f50:	080039c4 	.word	0x080039c4

08002f54 <_scanf_chars>:
 8002f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f58:	4615      	mov	r5, r2
 8002f5a:	688a      	ldr	r2, [r1, #8]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	b932      	cbnz	r2, 8002f70 <_scanf_chars+0x1c>
 8002f62:	698a      	ldr	r2, [r1, #24]
 8002f64:	2a00      	cmp	r2, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2201      	moveq	r2, #1
 8002f6a:	f04f 32ff 	movne.w	r2, #4294967295
 8002f6e:	608a      	str	r2, [r1, #8]
 8002f70:	2700      	movs	r7, #0
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003004 <_scanf_chars+0xb0>
 8002f78:	06d1      	lsls	r1, r2, #27
 8002f7a:	bf5f      	itttt	pl
 8002f7c:	681a      	ldrpl	r2, [r3, #0]
 8002f7e:	1d11      	addpl	r1, r2, #4
 8002f80:	6019      	strpl	r1, [r3, #0]
 8002f82:	6816      	ldrpl	r6, [r2, #0]
 8002f84:	69a0      	ldr	r0, [r4, #24]
 8002f86:	b188      	cbz	r0, 8002fac <_scanf_chars+0x58>
 8002f88:	2801      	cmp	r0, #1
 8002f8a:	d107      	bne.n	8002f9c <_scanf_chars+0x48>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	6963      	ldr	r3, [r4, #20]
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b953      	cbnz	r3, 8002fac <_scanf_chars+0x58>
 8002f96:	2f00      	cmp	r7, #0
 8002f98:	d031      	beq.n	8002ffe <_scanf_chars+0xaa>
 8002f9a:	e022      	b.n	8002fe2 <_scanf_chars+0x8e>
 8002f9c:	2802      	cmp	r0, #2
 8002f9e:	d120      	bne.n	8002fe2 <_scanf_chars+0x8e>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	d41a      	bmi.n	8002fe2 <_scanf_chars+0x8e>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	3701      	adds	r7, #1
 8002fb0:	06da      	lsls	r2, r3, #27
 8002fb2:	bf5e      	ittt	pl
 8002fb4:	682b      	ldrpl	r3, [r5, #0]
 8002fb6:	781b      	ldrbpl	r3, [r3, #0]
 8002fb8:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002fbc:	682a      	ldr	r2, [r5, #0]
 8002fbe:	686b      	ldr	r3, [r5, #4]
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	602a      	str	r2, [r5, #0]
 8002fc4:	68a2      	ldr	r2, [r4, #8]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	3a01      	subs	r2, #1
 8002fca:	606b      	str	r3, [r5, #4]
 8002fcc:	60a2      	str	r2, [r4, #8]
 8002fce:	b142      	cbz	r2, 8002fe2 <_scanf_chars+0x8e>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dcd7      	bgt.n	8002f84 <_scanf_chars+0x30>
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002fdc:	4798      	blx	r3
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d0d0      	beq.n	8002f84 <_scanf_chars+0x30>
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	f013 0310 	ands.w	r3, r3, #16
 8002fe8:	d105      	bne.n	8002ff6 <_scanf_chars+0xa2>
 8002fea:	68e2      	ldr	r2, [r4, #12]
 8002fec:	3201      	adds	r2, #1
 8002fee:	60e2      	str	r2, [r4, #12]
 8002ff0:	69a2      	ldr	r2, [r4, #24]
 8002ff2:	b102      	cbz	r2, 8002ff6 <_scanf_chars+0xa2>
 8002ff4:	7033      	strb	r3, [r6, #0]
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	6923      	ldr	r3, [r4, #16]
 8002ffa:	443b      	add	r3, r7
 8002ffc:	6123      	str	r3, [r4, #16]
 8002ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003002:	bf00      	nop
 8003004:	08003a73 	.word	0x08003a73

08003008 <_scanf_i>:
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	460c      	mov	r4, r1
 800300e:	4698      	mov	r8, r3
 8003010:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <_scanf_i+0x1e0>)
 8003012:	b087      	sub	sp, #28
 8003014:	4682      	mov	sl, r0
 8003016:	4616      	mov	r6, r2
 8003018:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800301c:	ab03      	add	r3, sp, #12
 800301e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <_scanf_i+0x1e4>)
 8003024:	69a1      	ldr	r1, [r4, #24]
 8003026:	4a72      	ldr	r2, [pc, #456]	; (80031f0 <_scanf_i+0x1e8>)
 8003028:	4627      	mov	r7, r4
 800302a:	2903      	cmp	r1, #3
 800302c:	bf18      	it	ne
 800302e:	461a      	movne	r2, r3
 8003030:	68a3      	ldr	r3, [r4, #8]
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800303a:	bf81      	itttt	hi
 800303c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003040:	eb03 0905 	addhi.w	r9, r3, r5
 8003044:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003048:	60a3      	strhi	r3, [r4, #8]
 800304a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800304e:	bf98      	it	ls
 8003050:	f04f 0900 	movls.w	r9, #0
 8003054:	463d      	mov	r5, r7
 8003056:	f04f 0b00 	mov.w	fp, #0
 800305a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	6831      	ldr	r1, [r6, #0]
 8003062:	ab03      	add	r3, sp, #12
 8003064:	2202      	movs	r2, #2
 8003066:	7809      	ldrb	r1, [r1, #0]
 8003068:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800306c:	f000 fbfe 	bl	800386c <memchr>
 8003070:	b328      	cbz	r0, 80030be <_scanf_i+0xb6>
 8003072:	f1bb 0f01 	cmp.w	fp, #1
 8003076:	d159      	bne.n	800312c <_scanf_i+0x124>
 8003078:	6862      	ldr	r2, [r4, #4]
 800307a:	b92a      	cbnz	r2, 8003088 <_scanf_i+0x80>
 800307c:	2308      	movs	r3, #8
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	6063      	str	r3, [r4, #4]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	6022      	str	r2, [r4, #0]
 8003088:	6822      	ldr	r2, [r4, #0]
 800308a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800308e:	6022      	str	r2, [r4, #0]
 8003090:	68a2      	ldr	r2, [r4, #8]
 8003092:	1e51      	subs	r1, r2, #1
 8003094:	60a1      	str	r1, [r4, #8]
 8003096:	b192      	cbz	r2, 80030be <_scanf_i+0xb6>
 8003098:	6832      	ldr	r2, [r6, #0]
 800309a:	1c51      	adds	r1, r2, #1
 800309c:	6031      	str	r1, [r6, #0]
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	f805 2b01 	strb.w	r2, [r5], #1
 80030a4:	6872      	ldr	r2, [r6, #4]
 80030a6:	3a01      	subs	r2, #1
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	6072      	str	r2, [r6, #4]
 80030ac:	dc07      	bgt.n	80030be <_scanf_i+0xb6>
 80030ae:	4631      	mov	r1, r6
 80030b0:	4650      	mov	r0, sl
 80030b2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80030b6:	4790      	blx	r2
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f040 8085 	bne.w	80031c8 <_scanf_i+0x1c0>
 80030be:	f10b 0b01 	add.w	fp, fp, #1
 80030c2:	f1bb 0f03 	cmp.w	fp, #3
 80030c6:	d1cb      	bne.n	8003060 <_scanf_i+0x58>
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	b90b      	cbnz	r3, 80030d0 <_scanf_i+0xc8>
 80030cc:	230a      	movs	r3, #10
 80030ce:	6063      	str	r3, [r4, #4]
 80030d0:	6863      	ldr	r3, [r4, #4]
 80030d2:	4948      	ldr	r1, [pc, #288]	; (80031f4 <_scanf_i+0x1ec>)
 80030d4:	6960      	ldr	r0, [r4, #20]
 80030d6:	1ac9      	subs	r1, r1, r3
 80030d8:	f000 f934 	bl	8003344 <__sccl>
 80030dc:	f04f 0b00 	mov.w	fp, #0
 80030e0:	68a3      	ldr	r3, [r4, #8]
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03d      	beq.n	8003164 <_scanf_i+0x15c>
 80030e8:	6831      	ldr	r1, [r6, #0]
 80030ea:	6960      	ldr	r0, [r4, #20]
 80030ec:	f891 c000 	ldrb.w	ip, [r1]
 80030f0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d035      	beq.n	8003164 <_scanf_i+0x15c>
 80030f8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80030fc:	d124      	bne.n	8003148 <_scanf_i+0x140>
 80030fe:	0510      	lsls	r0, r2, #20
 8003100:	d522      	bpl.n	8003148 <_scanf_i+0x140>
 8003102:	f10b 0b01 	add.w	fp, fp, #1
 8003106:	f1b9 0f00 	cmp.w	r9, #0
 800310a:	d003      	beq.n	8003114 <_scanf_i+0x10c>
 800310c:	3301      	adds	r3, #1
 800310e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003112:	60a3      	str	r3, [r4, #8]
 8003114:	6873      	ldr	r3, [r6, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	6073      	str	r3, [r6, #4]
 800311c:	dd1b      	ble.n	8003156 <_scanf_i+0x14e>
 800311e:	6833      	ldr	r3, [r6, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	6033      	str	r3, [r6, #0]
 8003124:	68a3      	ldr	r3, [r4, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	60a3      	str	r3, [r4, #8]
 800312a:	e7d9      	b.n	80030e0 <_scanf_i+0xd8>
 800312c:	f1bb 0f02 	cmp.w	fp, #2
 8003130:	d1ae      	bne.n	8003090 <_scanf_i+0x88>
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003138:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800313c:	d1bf      	bne.n	80030be <_scanf_i+0xb6>
 800313e:	2310      	movs	r3, #16
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	6063      	str	r3, [r4, #4]
 8003146:	e7a2      	b.n	800308e <_scanf_i+0x86>
 8003148:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800314c:	6022      	str	r2, [r4, #0]
 800314e:	780b      	ldrb	r3, [r1, #0]
 8003150:	f805 3b01 	strb.w	r3, [r5], #1
 8003154:	e7de      	b.n	8003114 <_scanf_i+0x10c>
 8003156:	4631      	mov	r1, r6
 8003158:	4650      	mov	r0, sl
 800315a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800315e:	4798      	blx	r3
 8003160:	2800      	cmp	r0, #0
 8003162:	d0df      	beq.n	8003124 <_scanf_i+0x11c>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	d50d      	bpl.n	8003186 <_scanf_i+0x17e>
 800316a:	42bd      	cmp	r5, r7
 800316c:	d909      	bls.n	8003182 <_scanf_i+0x17a>
 800316e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003172:	4632      	mov	r2, r6
 8003174:	4650      	mov	r0, sl
 8003176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800317a:	f105 39ff 	add.w	r9, r5, #4294967295
 800317e:	4798      	blx	r3
 8003180:	464d      	mov	r5, r9
 8003182:	42bd      	cmp	r5, r7
 8003184:	d02d      	beq.n	80031e2 <_scanf_i+0x1da>
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	f012 0210 	ands.w	r2, r2, #16
 800318c:	d113      	bne.n	80031b6 <_scanf_i+0x1ae>
 800318e:	702a      	strb	r2, [r5, #0]
 8003190:	4639      	mov	r1, r7
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	4650      	mov	r0, sl
 8003196:	9e01      	ldr	r6, [sp, #4]
 8003198:	47b0      	blx	r6
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	f8d8 3000 	ldr.w	r3, [r8]
 80031a0:	f011 0f20 	tst.w	r1, #32
 80031a4:	d013      	beq.n	80031ce <_scanf_i+0x1c6>
 80031a6:	1d1a      	adds	r2, r3, #4
 80031a8:	f8c8 2000 	str.w	r2, [r8]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6018      	str	r0, [r3, #0]
 80031b0:	68e3      	ldr	r3, [r4, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60e3      	str	r3, [r4, #12]
 80031b6:	2000      	movs	r0, #0
 80031b8:	1bed      	subs	r5, r5, r7
 80031ba:	44ab      	add	fp, r5
 80031bc:	6925      	ldr	r5, [r4, #16]
 80031be:	445d      	add	r5, fp
 80031c0:	6125      	str	r5, [r4, #16]
 80031c2:	b007      	add	sp, #28
 80031c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c8:	f04f 0b00 	mov.w	fp, #0
 80031cc:	e7ca      	b.n	8003164 <_scanf_i+0x15c>
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	f8c8 2000 	str.w	r2, [r8]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f011 0f01 	tst.w	r1, #1
 80031da:	bf14      	ite	ne
 80031dc:	8018      	strhne	r0, [r3, #0]
 80031de:	6018      	streq	r0, [r3, #0]
 80031e0:	e7e6      	b.n	80031b0 <_scanf_i+0x1a8>
 80031e2:	2001      	movs	r0, #1
 80031e4:	e7ed      	b.n	80031c2 <_scanf_i+0x1ba>
 80031e6:	bf00      	nop
 80031e8:	0800399c 	.word	0x0800399c
 80031ec:	0800361d 	.word	0x0800361d
 80031f0:	08003535 	.word	0x08003535
 80031f4:	08003a70 	.word	0x08003a70

080031f8 <lflush>:
 80031f8:	8983      	ldrh	r3, [r0, #12]
 80031fa:	f003 0309 	and.w	r3, r3, #9
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d101      	bne.n	8003206 <lflush+0xe>
 8003202:	f7fe bf7b 	b.w	80020fc <fflush>
 8003206:	2000      	movs	r0, #0
 8003208:	4770      	bx	lr
	...

0800320c <__srefill_r>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	460c      	mov	r4, r1
 8003210:	4605      	mov	r5, r0
 8003212:	b118      	cbz	r0, 800321c <__srefill_r+0x10>
 8003214:	6983      	ldr	r3, [r0, #24]
 8003216:	b90b      	cbnz	r3, 800321c <__srefill_r+0x10>
 8003218:	f7fe ffda 	bl	80021d0 <__sinit>
 800321c:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <__srefill_r+0x104>)
 800321e:	429c      	cmp	r4, r3
 8003220:	d10a      	bne.n	8003238 <__srefill_r+0x2c>
 8003222:	686c      	ldr	r4, [r5, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	6063      	str	r3, [r4, #4]
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800322e:	069e      	lsls	r6, r3, #26
 8003230:	d50c      	bpl.n	800324c <__srefill_r+0x40>
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	e067      	b.n	8003308 <__srefill_r+0xfc>
 8003238:	4b36      	ldr	r3, [pc, #216]	; (8003314 <__srefill_r+0x108>)
 800323a:	429c      	cmp	r4, r3
 800323c:	d101      	bne.n	8003242 <__srefill_r+0x36>
 800323e:	68ac      	ldr	r4, [r5, #8]
 8003240:	e7f0      	b.n	8003224 <__srefill_r+0x18>
 8003242:	4b35      	ldr	r3, [pc, #212]	; (8003318 <__srefill_r+0x10c>)
 8003244:	429c      	cmp	r4, r3
 8003246:	bf08      	it	eq
 8003248:	68ec      	ldreq	r4, [r5, #12]
 800324a:	e7eb      	b.n	8003224 <__srefill_r+0x18>
 800324c:	0758      	lsls	r0, r3, #29
 800324e:	d449      	bmi.n	80032e4 <__srefill_r+0xd8>
 8003250:	06d9      	lsls	r1, r3, #27
 8003252:	d405      	bmi.n	8003260 <__srefill_r+0x54>
 8003254:	2309      	movs	r3, #9
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	e7e8      	b.n	8003232 <__srefill_r+0x26>
 8003260:	071a      	lsls	r2, r3, #28
 8003262:	d50b      	bpl.n	800327c <__srefill_r+0x70>
 8003264:	4621      	mov	r1, r4
 8003266:	4628      	mov	r0, r5
 8003268:	f7fe ff0c 	bl	8002084 <_fflush_r>
 800326c:	2800      	cmp	r0, #0
 800326e:	d1e0      	bne.n	8003232 <__srefill_r+0x26>
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	60a0      	str	r0, [r4, #8]
 8003274:	f023 0308 	bic.w	r3, r3, #8
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	61a0      	str	r0, [r4, #24]
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	b91b      	cbnz	r3, 8003290 <__srefill_r+0x84>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff f882 	bl	8002394 <__smakebuf_r>
 8003290:	89a6      	ldrh	r6, [r4, #12]
 8003292:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003296:	07b3      	lsls	r3, r6, #30
 8003298:	d00f      	beq.n	80032ba <__srefill_r+0xae>
 800329a:	2301      	movs	r3, #1
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <__srefill_r+0x110>)
 80032a0:	491f      	ldr	r1, [pc, #124]	; (8003320 <__srefill_r+0x114>)
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	f006 0609 	and.w	r6, r6, #9
 80032a8:	f7ff f810 	bl	80022cc <_fwalk>
 80032ac:	2e09      	cmp	r6, #9
 80032ae:	81a7      	strh	r7, [r4, #12]
 80032b0:	d103      	bne.n	80032ba <__srefill_r+0xae>
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7fe fe63 	bl	8001f80 <__sflush_r>
 80032ba:	6922      	ldr	r2, [r4, #16]
 80032bc:	4628      	mov	r0, r5
 80032be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80032c0:	6963      	ldr	r3, [r4, #20]
 80032c2:	6a21      	ldr	r1, [r4, #32]
 80032c4:	6022      	str	r2, [r4, #0]
 80032c6:	47b0      	blx	r6
 80032c8:	2800      	cmp	r0, #0
 80032ca:	6060      	str	r0, [r4, #4]
 80032cc:	dc1d      	bgt.n	800330a <__srefill_r+0xfe>
 80032ce:	bf18      	it	ne
 80032d0:	2200      	movne	r2, #0
 80032d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d6:	bf16      	itet	ne
 80032d8:	6062      	strne	r2, [r4, #4]
 80032da:	f043 0320 	orreq.w	r3, r3, #32
 80032de:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80032e2:	e7bb      	b.n	800325c <__srefill_r+0x50>
 80032e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e6:	2900      	cmp	r1, #0
 80032e8:	d0cc      	beq.n	8003284 <__srefill_r+0x78>
 80032ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ee:	4299      	cmp	r1, r3
 80032f0:	d002      	beq.n	80032f8 <__srefill_r+0xec>
 80032f2:	4628      	mov	r0, r5
 80032f4:	f7ff f896 	bl	8002424 <_free_r>
 80032f8:	2000      	movs	r0, #0
 80032fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032fc:	6360      	str	r0, [r4, #52]	; 0x34
 80032fe:	6063      	str	r3, [r4, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0bf      	beq.n	8003284 <__srefill_r+0x78>
 8003304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330a:	2000      	movs	r0, #0
 800330c:	e7fc      	b.n	8003308 <__srefill_r+0xfc>
 800330e:	bf00      	nop
 8003310:	080039e4 	.word	0x080039e4
 8003314:	08003a04 	.word	0x08003a04
 8003318:	080039c4 	.word	0x080039c4
 800331c:	080039c0 	.word	0x080039c0
 8003320:	080031f9 	.word	0x080031f9

08003324 <_sbrk_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	2300      	movs	r3, #0
 8003328:	4d05      	ldr	r5, [pc, #20]	; (8003340 <_sbrk_r+0x1c>)
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	f7fd f9ce 	bl	80006d0 <_sbrk>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_sbrk_r+0x1a>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_sbrk_r+0x1a>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	200000e4 	.word	0x200000e4

08003344 <__sccl>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	780b      	ldrb	r3, [r1, #0]
 8003348:	4604      	mov	r4, r0
 800334a:	2b5e      	cmp	r3, #94	; 0x5e
 800334c:	bf13      	iteet	ne
 800334e:	2200      	movne	r2, #0
 8003350:	2201      	moveq	r2, #1
 8003352:	784b      	ldrbeq	r3, [r1, #1]
 8003354:	1c48      	addne	r0, r1, #1
 8003356:	bf08      	it	eq
 8003358:	1c88      	addeq	r0, r1, #2
 800335a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800335e:	1e61      	subs	r1, r4, #1
 8003360:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003364:	42a9      	cmp	r1, r5
 8003366:	d1fb      	bne.n	8003360 <__sccl+0x1c>
 8003368:	b90b      	cbnz	r3, 800336e <__sccl+0x2a>
 800336a:	3801      	subs	r0, #1
 800336c:	bd70      	pop	{r4, r5, r6, pc}
 800336e:	f082 0201 	eor.w	r2, r2, #1
 8003372:	4605      	mov	r5, r0
 8003374:	54e2      	strb	r2, [r4, r3]
 8003376:	4628      	mov	r0, r5
 8003378:	f810 1b01 	ldrb.w	r1, [r0], #1
 800337c:	292d      	cmp	r1, #45	; 0x2d
 800337e:	d006      	beq.n	800338e <__sccl+0x4a>
 8003380:	295d      	cmp	r1, #93	; 0x5d
 8003382:	d0f3      	beq.n	800336c <__sccl+0x28>
 8003384:	b909      	cbnz	r1, 800338a <__sccl+0x46>
 8003386:	4628      	mov	r0, r5
 8003388:	e7f0      	b.n	800336c <__sccl+0x28>
 800338a:	460b      	mov	r3, r1
 800338c:	e7f1      	b.n	8003372 <__sccl+0x2e>
 800338e:	786e      	ldrb	r6, [r5, #1]
 8003390:	2e5d      	cmp	r6, #93	; 0x5d
 8003392:	d0fa      	beq.n	800338a <__sccl+0x46>
 8003394:	42b3      	cmp	r3, r6
 8003396:	dcf8      	bgt.n	800338a <__sccl+0x46>
 8003398:	4619      	mov	r1, r3
 800339a:	3502      	adds	r5, #2
 800339c:	3101      	adds	r1, #1
 800339e:	428e      	cmp	r6, r1
 80033a0:	5462      	strb	r2, [r4, r1]
 80033a2:	dcfb      	bgt.n	800339c <__sccl+0x58>
 80033a4:	1af1      	subs	r1, r6, r3
 80033a6:	3901      	subs	r1, #1
 80033a8:	42b3      	cmp	r3, r6
 80033aa:	bfa8      	it	ge
 80033ac:	2100      	movge	r1, #0
 80033ae:	1c58      	adds	r0, r3, #1
 80033b0:	1843      	adds	r3, r0, r1
 80033b2:	e7e0      	b.n	8003376 <__sccl+0x32>

080033b4 <__sread>:
 80033b4:	b510      	push	{r4, lr}
 80033b6:	460c      	mov	r4, r1
 80033b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033bc:	f000 faae 	bl	800391c <_read_r>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	bfab      	itete	ge
 80033c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033c6:	89a3      	ldrhlt	r3, [r4, #12]
 80033c8:	181b      	addge	r3, r3, r0
 80033ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033ce:	bfac      	ite	ge
 80033d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80033d2:	81a3      	strhlt	r3, [r4, #12]
 80033d4:	bd10      	pop	{r4, pc}

080033d6 <__swrite>:
 80033d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033da:	461f      	mov	r7, r3
 80033dc:	898b      	ldrh	r3, [r1, #12]
 80033de:	4605      	mov	r5, r0
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	460c      	mov	r4, r1
 80033e4:	4616      	mov	r6, r2
 80033e6:	d505      	bpl.n	80033f4 <__swrite+0x1e>
 80033e8:	2302      	movs	r3, #2
 80033ea:	2200      	movs	r2, #0
 80033ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f0:	f000 fa2a 	bl	8003848 <_lseek_r>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	4632      	mov	r2, r6
 80033f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	4628      	mov	r0, r5
 8003400:	463b      	mov	r3, r7
 8003402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800340a:	f000 b9d9 	b.w	80037c0 <_write_r>

0800340e <__sseek>:
 800340e:	b510      	push	{r4, lr}
 8003410:	460c      	mov	r4, r1
 8003412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003416:	f000 fa17 	bl	8003848 <_lseek_r>
 800341a:	1c43      	adds	r3, r0, #1
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	bf15      	itete	ne
 8003420:	6560      	strne	r0, [r4, #84]	; 0x54
 8003422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800342a:	81a3      	strheq	r3, [r4, #12]
 800342c:	bf18      	it	ne
 800342e:	81a3      	strhne	r3, [r4, #12]
 8003430:	bd10      	pop	{r4, pc}

08003432 <__sclose>:
 8003432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003436:	f000 b9d5 	b.w	80037e4 <_close_r>
	...

0800343c <_strtol_l.constprop.0>:
 800343c:	2b01      	cmp	r3, #1
 800343e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003442:	4680      	mov	r8, r0
 8003444:	d001      	beq.n	800344a <_strtol_l.constprop.0+0xe>
 8003446:	2b24      	cmp	r3, #36	; 0x24
 8003448:	d906      	bls.n	8003458 <_strtol_l.constprop.0+0x1c>
 800344a:	f7fe fb3b 	bl	8001ac4 <__errno>
 800344e:	2316      	movs	r3, #22
 8003450:	6003      	str	r3, [r0, #0]
 8003452:	2000      	movs	r0, #0
 8003454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003458:	460d      	mov	r5, r1
 800345a:	4f35      	ldr	r7, [pc, #212]	; (8003530 <_strtol_l.constprop.0+0xf4>)
 800345c:	4628      	mov	r0, r5
 800345e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003462:	5de6      	ldrb	r6, [r4, r7]
 8003464:	f016 0608 	ands.w	r6, r6, #8
 8003468:	d1f8      	bne.n	800345c <_strtol_l.constprop.0+0x20>
 800346a:	2c2d      	cmp	r4, #45	; 0x2d
 800346c:	d12f      	bne.n	80034ce <_strtol_l.constprop.0+0x92>
 800346e:	2601      	movs	r6, #1
 8003470:	782c      	ldrb	r4, [r5, #0]
 8003472:	1c85      	adds	r5, r0, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d057      	beq.n	8003528 <_strtol_l.constprop.0+0xec>
 8003478:	2b10      	cmp	r3, #16
 800347a:	d109      	bne.n	8003490 <_strtol_l.constprop.0+0x54>
 800347c:	2c30      	cmp	r4, #48	; 0x30
 800347e:	d107      	bne.n	8003490 <_strtol_l.constprop.0+0x54>
 8003480:	7828      	ldrb	r0, [r5, #0]
 8003482:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003486:	2858      	cmp	r0, #88	; 0x58
 8003488:	d149      	bne.n	800351e <_strtol_l.constprop.0+0xe2>
 800348a:	2310      	movs	r3, #16
 800348c:	786c      	ldrb	r4, [r5, #1]
 800348e:	3502      	adds	r5, #2
 8003490:	2700      	movs	r7, #0
 8003492:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003496:	f10e 3eff 	add.w	lr, lr, #4294967295
 800349a:	fbbe f9f3 	udiv	r9, lr, r3
 800349e:	4638      	mov	r0, r7
 80034a0:	fb03 ea19 	mls	sl, r3, r9, lr
 80034a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80034a8:	f1bc 0f09 	cmp.w	ip, #9
 80034ac:	d814      	bhi.n	80034d8 <_strtol_l.constprop.0+0x9c>
 80034ae:	4664      	mov	r4, ip
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	dd22      	ble.n	80034fa <_strtol_l.constprop.0+0xbe>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	db1d      	blt.n	80034f4 <_strtol_l.constprop.0+0xb8>
 80034b8:	4581      	cmp	r9, r0
 80034ba:	d31b      	bcc.n	80034f4 <_strtol_l.constprop.0+0xb8>
 80034bc:	d101      	bne.n	80034c2 <_strtol_l.constprop.0+0x86>
 80034be:	45a2      	cmp	sl, r4
 80034c0:	db18      	blt.n	80034f4 <_strtol_l.constprop.0+0xb8>
 80034c2:	2701      	movs	r7, #1
 80034c4:	fb00 4003 	mla	r0, r0, r3, r4
 80034c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034cc:	e7ea      	b.n	80034a4 <_strtol_l.constprop.0+0x68>
 80034ce:	2c2b      	cmp	r4, #43	; 0x2b
 80034d0:	bf04      	itt	eq
 80034d2:	782c      	ldrbeq	r4, [r5, #0]
 80034d4:	1c85      	addeq	r5, r0, #2
 80034d6:	e7cd      	b.n	8003474 <_strtol_l.constprop.0+0x38>
 80034d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80034dc:	f1bc 0f19 	cmp.w	ip, #25
 80034e0:	d801      	bhi.n	80034e6 <_strtol_l.constprop.0+0xaa>
 80034e2:	3c37      	subs	r4, #55	; 0x37
 80034e4:	e7e4      	b.n	80034b0 <_strtol_l.constprop.0+0x74>
 80034e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80034ea:	f1bc 0f19 	cmp.w	ip, #25
 80034ee:	d804      	bhi.n	80034fa <_strtol_l.constprop.0+0xbe>
 80034f0:	3c57      	subs	r4, #87	; 0x57
 80034f2:	e7dd      	b.n	80034b0 <_strtol_l.constprop.0+0x74>
 80034f4:	f04f 37ff 	mov.w	r7, #4294967295
 80034f8:	e7e6      	b.n	80034c8 <_strtol_l.constprop.0+0x8c>
 80034fa:	2f00      	cmp	r7, #0
 80034fc:	da07      	bge.n	800350e <_strtol_l.constprop.0+0xd2>
 80034fe:	2322      	movs	r3, #34	; 0x22
 8003500:	4670      	mov	r0, lr
 8003502:	f8c8 3000 	str.w	r3, [r8]
 8003506:	2a00      	cmp	r2, #0
 8003508:	d0a4      	beq.n	8003454 <_strtol_l.constprop.0+0x18>
 800350a:	1e69      	subs	r1, r5, #1
 800350c:	e005      	b.n	800351a <_strtol_l.constprop.0+0xde>
 800350e:	b106      	cbz	r6, 8003512 <_strtol_l.constprop.0+0xd6>
 8003510:	4240      	negs	r0, r0
 8003512:	2a00      	cmp	r2, #0
 8003514:	d09e      	beq.n	8003454 <_strtol_l.constprop.0+0x18>
 8003516:	2f00      	cmp	r7, #0
 8003518:	d1f7      	bne.n	800350a <_strtol_l.constprop.0+0xce>
 800351a:	6011      	str	r1, [r2, #0]
 800351c:	e79a      	b.n	8003454 <_strtol_l.constprop.0+0x18>
 800351e:	2430      	movs	r4, #48	; 0x30
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1b5      	bne.n	8003490 <_strtol_l.constprop.0+0x54>
 8003524:	2308      	movs	r3, #8
 8003526:	e7b3      	b.n	8003490 <_strtol_l.constprop.0+0x54>
 8003528:	2c30      	cmp	r4, #48	; 0x30
 800352a:	d0a9      	beq.n	8003480 <_strtol_l.constprop.0+0x44>
 800352c:	230a      	movs	r3, #10
 800352e:	e7af      	b.n	8003490 <_strtol_l.constprop.0+0x54>
 8003530:	08003a73 	.word	0x08003a73

08003534 <_strtol_r>:
 8003534:	f7ff bf82 	b.w	800343c <_strtol_l.constprop.0>

08003538 <_strtoul_l.constprop.0>:
 8003538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800353c:	4686      	mov	lr, r0
 800353e:	460d      	mov	r5, r1
 8003540:	4f35      	ldr	r7, [pc, #212]	; (8003618 <_strtoul_l.constprop.0+0xe0>)
 8003542:	4628      	mov	r0, r5
 8003544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003548:	5de6      	ldrb	r6, [r4, r7]
 800354a:	f016 0608 	ands.w	r6, r6, #8
 800354e:	d1f8      	bne.n	8003542 <_strtoul_l.constprop.0+0xa>
 8003550:	2c2d      	cmp	r4, #45	; 0x2d
 8003552:	d12f      	bne.n	80035b4 <_strtoul_l.constprop.0+0x7c>
 8003554:	2601      	movs	r6, #1
 8003556:	782c      	ldrb	r4, [r5, #0]
 8003558:	1c85      	adds	r5, r0, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d057      	beq.n	800360e <_strtoul_l.constprop.0+0xd6>
 800355e:	2b10      	cmp	r3, #16
 8003560:	d109      	bne.n	8003576 <_strtoul_l.constprop.0+0x3e>
 8003562:	2c30      	cmp	r4, #48	; 0x30
 8003564:	d107      	bne.n	8003576 <_strtoul_l.constprop.0+0x3e>
 8003566:	7828      	ldrb	r0, [r5, #0]
 8003568:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800356c:	2858      	cmp	r0, #88	; 0x58
 800356e:	d149      	bne.n	8003604 <_strtoul_l.constprop.0+0xcc>
 8003570:	2310      	movs	r3, #16
 8003572:	786c      	ldrb	r4, [r5, #1]
 8003574:	3502      	adds	r5, #2
 8003576:	f04f 38ff 	mov.w	r8, #4294967295
 800357a:	fbb8 f8f3 	udiv	r8, r8, r3
 800357e:	2700      	movs	r7, #0
 8003580:	fb03 f908 	mul.w	r9, r3, r8
 8003584:	4638      	mov	r0, r7
 8003586:	ea6f 0909 	mvn.w	r9, r9
 800358a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800358e:	f1bc 0f09 	cmp.w	ip, #9
 8003592:	d814      	bhi.n	80035be <_strtoul_l.constprop.0+0x86>
 8003594:	4664      	mov	r4, ip
 8003596:	42a3      	cmp	r3, r4
 8003598:	dd22      	ble.n	80035e0 <_strtoul_l.constprop.0+0xa8>
 800359a:	2f00      	cmp	r7, #0
 800359c:	db1d      	blt.n	80035da <_strtoul_l.constprop.0+0xa2>
 800359e:	4580      	cmp	r8, r0
 80035a0:	d31b      	bcc.n	80035da <_strtoul_l.constprop.0+0xa2>
 80035a2:	d101      	bne.n	80035a8 <_strtoul_l.constprop.0+0x70>
 80035a4:	45a1      	cmp	r9, r4
 80035a6:	db18      	blt.n	80035da <_strtoul_l.constprop.0+0xa2>
 80035a8:	2701      	movs	r7, #1
 80035aa:	fb00 4003 	mla	r0, r0, r3, r4
 80035ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035b2:	e7ea      	b.n	800358a <_strtoul_l.constprop.0+0x52>
 80035b4:	2c2b      	cmp	r4, #43	; 0x2b
 80035b6:	bf04      	itt	eq
 80035b8:	782c      	ldrbeq	r4, [r5, #0]
 80035ba:	1c85      	addeq	r5, r0, #2
 80035bc:	e7cd      	b.n	800355a <_strtoul_l.constprop.0+0x22>
 80035be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80035c2:	f1bc 0f19 	cmp.w	ip, #25
 80035c6:	d801      	bhi.n	80035cc <_strtoul_l.constprop.0+0x94>
 80035c8:	3c37      	subs	r4, #55	; 0x37
 80035ca:	e7e4      	b.n	8003596 <_strtoul_l.constprop.0+0x5e>
 80035cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80035d0:	f1bc 0f19 	cmp.w	ip, #25
 80035d4:	d804      	bhi.n	80035e0 <_strtoul_l.constprop.0+0xa8>
 80035d6:	3c57      	subs	r4, #87	; 0x57
 80035d8:	e7dd      	b.n	8003596 <_strtoul_l.constprop.0+0x5e>
 80035da:	f04f 37ff 	mov.w	r7, #4294967295
 80035de:	e7e6      	b.n	80035ae <_strtoul_l.constprop.0+0x76>
 80035e0:	2f00      	cmp	r7, #0
 80035e2:	da07      	bge.n	80035f4 <_strtoul_l.constprop.0+0xbc>
 80035e4:	2322      	movs	r3, #34	; 0x22
 80035e6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ea:	f8ce 3000 	str.w	r3, [lr]
 80035ee:	b932      	cbnz	r2, 80035fe <_strtoul_l.constprop.0+0xc6>
 80035f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035f4:	b106      	cbz	r6, 80035f8 <_strtoul_l.constprop.0+0xc0>
 80035f6:	4240      	negs	r0, r0
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d0f9      	beq.n	80035f0 <_strtoul_l.constprop.0+0xb8>
 80035fc:	b107      	cbz	r7, 8003600 <_strtoul_l.constprop.0+0xc8>
 80035fe:	1e69      	subs	r1, r5, #1
 8003600:	6011      	str	r1, [r2, #0]
 8003602:	e7f5      	b.n	80035f0 <_strtoul_l.constprop.0+0xb8>
 8003604:	2430      	movs	r4, #48	; 0x30
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1b5      	bne.n	8003576 <_strtoul_l.constprop.0+0x3e>
 800360a:	2308      	movs	r3, #8
 800360c:	e7b3      	b.n	8003576 <_strtoul_l.constprop.0+0x3e>
 800360e:	2c30      	cmp	r4, #48	; 0x30
 8003610:	d0a9      	beq.n	8003566 <_strtoul_l.constprop.0+0x2e>
 8003612:	230a      	movs	r3, #10
 8003614:	e7af      	b.n	8003576 <_strtoul_l.constprop.0+0x3e>
 8003616:	bf00      	nop
 8003618:	08003a73 	.word	0x08003a73

0800361c <_strtoul_r>:
 800361c:	f7ff bf8c 	b.w	8003538 <_strtoul_l.constprop.0>

08003620 <__submore>:
 8003620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	460c      	mov	r4, r1
 8003626:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800362c:	4299      	cmp	r1, r3
 800362e:	d11b      	bne.n	8003668 <__submore+0x48>
 8003630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003634:	f7fe ff5e 	bl	80024f4 <_malloc_r>
 8003638:	b918      	cbnz	r0, 8003642 <__submore+0x22>
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003646:	63a3      	str	r3, [r4, #56]	; 0x38
 8003648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800364c:	6360      	str	r0, [r4, #52]	; 0x34
 800364e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003656:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800365a:	7043      	strb	r3, [r0, #1]
 800365c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003660:	7003      	strb	r3, [r0, #0]
 8003662:	6020      	str	r0, [r4, #0]
 8003664:	2000      	movs	r0, #0
 8003666:	e7ea      	b.n	800363e <__submore+0x1e>
 8003668:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800366a:	0077      	lsls	r7, r6, #1
 800366c:	463a      	mov	r2, r7
 800366e:	f000 f925 	bl	80038bc <_realloc_r>
 8003672:	4605      	mov	r5, r0
 8003674:	2800      	cmp	r0, #0
 8003676:	d0e0      	beq.n	800363a <__submore+0x1a>
 8003678:	eb00 0806 	add.w	r8, r0, r6
 800367c:	4601      	mov	r1, r0
 800367e:	4632      	mov	r2, r6
 8003680:	4640      	mov	r0, r8
 8003682:	f000 f901 	bl	8003888 <memcpy>
 8003686:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800368a:	f8c4 8000 	str.w	r8, [r4]
 800368e:	e7e9      	b.n	8003664 <__submore+0x44>

08003690 <_ungetc_r>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4614      	mov	r4, r2
 8003694:	1c4a      	adds	r2, r1, #1
 8003696:	4606      	mov	r6, r0
 8003698:	460d      	mov	r5, r1
 800369a:	d103      	bne.n	80036a4 <_ungetc_r+0x14>
 800369c:	f04f 35ff 	mov.w	r5, #4294967295
 80036a0:	4628      	mov	r0, r5
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	b118      	cbz	r0, 80036ae <_ungetc_r+0x1e>
 80036a6:	6983      	ldr	r3, [r0, #24]
 80036a8:	b90b      	cbnz	r3, 80036ae <_ungetc_r+0x1e>
 80036aa:	f7fe fd91 	bl	80021d0 <__sinit>
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <_ungetc_r+0x124>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d11d      	bne.n	80036f0 <_ungetc_r+0x60>
 80036b4:	6874      	ldr	r4, [r6, #4]
 80036b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b8:	07db      	lsls	r3, r3, #31
 80036ba:	d405      	bmi.n	80036c8 <_ungetc_r+0x38>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	0598      	lsls	r0, r3, #22
 80036c0:	d402      	bmi.n	80036c8 <_ungetc_r+0x38>
 80036c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036c4:	f7fe fe3f 	bl	8002346 <__retarget_lock_acquire_recursive>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	f023 0320 	bic.w	r3, r3, #32
 80036d0:	0759      	lsls	r1, r3, #29
 80036d2:	81a3      	strh	r3, [r4, #12]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	d42d      	bmi.n	8003734 <_ungetc_r+0xa4>
 80036d8:	06d3      	lsls	r3, r2, #27
 80036da:	d413      	bmi.n	8003704 <_ungetc_r+0x74>
 80036dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036de:	07dd      	lsls	r5, r3, #31
 80036e0:	d4dc      	bmi.n	800369c <_ungetc_r+0xc>
 80036e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036e6:	d1d9      	bne.n	800369c <_ungetc_r+0xc>
 80036e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ea:	f7fe fe2d 	bl	8002348 <__retarget_lock_release_recursive>
 80036ee:	e7d5      	b.n	800369c <_ungetc_r+0xc>
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <_ungetc_r+0x128>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <_ungetc_r+0x6a>
 80036f6:	68b4      	ldr	r4, [r6, #8]
 80036f8:	e7dd      	b.n	80036b6 <_ungetc_r+0x26>
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <_ungetc_r+0x12c>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68f4      	ldreq	r4, [r6, #12]
 8003702:	e7d8      	b.n	80036b6 <_ungetc_r+0x26>
 8003704:	0710      	lsls	r0, r2, #28
 8003706:	d511      	bpl.n	800372c <_ungetc_r+0x9c>
 8003708:	4621      	mov	r1, r4
 800370a:	4630      	mov	r0, r6
 800370c:	f7fe fcba 	bl	8002084 <_fflush_r>
 8003710:	b130      	cbz	r0, 8003720 <_ungetc_r+0x90>
 8003712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003714:	07d9      	lsls	r1, r3, #31
 8003716:	d4c1      	bmi.n	800369c <_ungetc_r+0xc>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800371e:	e7e2      	b.n	80036e6 <_ungetc_r+0x56>
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	60a0      	str	r0, [r4, #8]
 8003724:	f023 0308 	bic.w	r3, r3, #8
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	61a0      	str	r0, [r4, #24]
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003736:	6862      	ldr	r2, [r4, #4]
 8003738:	b2ed      	uxtb	r5, r5
 800373a:	b1d3      	cbz	r3, 8003772 <_ungetc_r+0xe2>
 800373c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800373e:	4293      	cmp	r3, r2
 8003740:	dc05      	bgt.n	800374e <_ungetc_r+0xbe>
 8003742:	4621      	mov	r1, r4
 8003744:	4630      	mov	r0, r6
 8003746:	f7ff ff6b 	bl	8003620 <__submore>
 800374a:	2800      	cmp	r0, #0
 800374c:	d1e1      	bne.n	8003712 <_ungetc_r+0x82>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	3301      	adds	r3, #1
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003760:	07da      	lsls	r2, r3, #31
 8003762:	d49d      	bmi.n	80036a0 <_ungetc_r+0x10>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	059b      	lsls	r3, r3, #22
 8003768:	d49a      	bmi.n	80036a0 <_ungetc_r+0x10>
 800376a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376c:	f7fe fdec 	bl	8002348 <__retarget_lock_release_recursive>
 8003770:	e796      	b.n	80036a0 <_ungetc_r+0x10>
 8003772:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003774:	6920      	ldr	r0, [r4, #16]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f001 0101 	and.w	r1, r1, #1
 800377c:	b160      	cbz	r0, 8003798 <_ungetc_r+0x108>
 800377e:	4298      	cmp	r0, r3
 8003780:	d20a      	bcs.n	8003798 <_ungetc_r+0x108>
 8003782:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003786:	42a8      	cmp	r0, r5
 8003788:	d106      	bne.n	8003798 <_ungetc_r+0x108>
 800378a:	3b01      	subs	r3, #1
 800378c:	3201      	adds	r2, #1
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	6062      	str	r2, [r4, #4]
 8003792:	2900      	cmp	r1, #0
 8003794:	d184      	bne.n	80036a0 <_ungetc_r+0x10>
 8003796:	e7e5      	b.n	8003764 <_ungetc_r+0xd4>
 8003798:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800379c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a0:	6363      	str	r3, [r4, #52]	; 0x34
 80037a2:	2303      	movs	r3, #3
 80037a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80037a6:	4623      	mov	r3, r4
 80037a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	2301      	movs	r3, #1
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	e7ee      	b.n	8003792 <_ungetc_r+0x102>
 80037b4:	080039e4 	.word	0x080039e4
 80037b8:	08003a04 	.word	0x08003a04
 80037bc:	080039c4 	.word	0x080039c4

080037c0 <_write_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	2200      	movs	r2, #0
 80037ca:	4d05      	ldr	r5, [pc, #20]	; (80037e0 <_write_r+0x20>)
 80037cc:	602a      	str	r2, [r5, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f7fc ff31 	bl	8000636 <_write>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_write_r+0x1e>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_write_r+0x1e>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200000e4 	.word	0x200000e4

080037e4 <_close_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	2300      	movs	r3, #0
 80037e8:	4d05      	ldr	r5, [pc, #20]	; (8003800 <_close_r+0x1c>)
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	f7fc ff3d 	bl	800066e <_close>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_close_r+0x1a>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_close_r+0x1a>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	200000e4 	.word	0x200000e4

08003804 <_fstat_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	2300      	movs	r3, #0
 8003808:	4d06      	ldr	r5, [pc, #24]	; (8003824 <_fstat_r+0x20>)
 800380a:	4604      	mov	r4, r0
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	f7fc ff37 	bl	8000684 <_fstat>
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d102      	bne.n	8003820 <_fstat_r+0x1c>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	b103      	cbz	r3, 8003820 <_fstat_r+0x1c>
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	bd38      	pop	{r3, r4, r5, pc}
 8003822:	bf00      	nop
 8003824:	200000e4 	.word	0x200000e4

08003828 <_isatty_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	2300      	movs	r3, #0
 800382c:	4d05      	ldr	r5, [pc, #20]	; (8003844 <_isatty_r+0x1c>)
 800382e:	4604      	mov	r4, r0
 8003830:	4608      	mov	r0, r1
 8003832:	602b      	str	r3, [r5, #0]
 8003834:	f7fc ff35 	bl	80006a2 <_isatty>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_isatty_r+0x1a>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	b103      	cbz	r3, 8003842 <_isatty_r+0x1a>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	200000e4 	.word	0x200000e4

08003848 <_lseek_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	2200      	movs	r2, #0
 8003852:	4d05      	ldr	r5, [pc, #20]	; (8003868 <_lseek_r+0x20>)
 8003854:	602a      	str	r2, [r5, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f7fc ff2d 	bl	80006b6 <_lseek>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_lseek_r+0x1e>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_lseek_r+0x1e>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200000e4 	.word	0x200000e4

0800386c <memchr>:
 800386c:	4603      	mov	r3, r0
 800386e:	b510      	push	{r4, lr}
 8003870:	b2c9      	uxtb	r1, r1
 8003872:	4402      	add	r2, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	4618      	mov	r0, r3
 8003878:	d101      	bne.n	800387e <memchr+0x12>
 800387a:	2000      	movs	r0, #0
 800387c:	e003      	b.n	8003886 <memchr+0x1a>
 800387e:	7804      	ldrb	r4, [r0, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	428c      	cmp	r4, r1
 8003884:	d1f6      	bne.n	8003874 <memchr+0x8>
 8003886:	bd10      	pop	{r4, pc}

08003888 <memcpy>:
 8003888:	440a      	add	r2, r1
 800388a:	4291      	cmp	r1, r2
 800388c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003890:	d100      	bne.n	8003894 <memcpy+0xc>
 8003892:	4770      	bx	lr
 8003894:	b510      	push	{r4, lr}
 8003896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389a:	4291      	cmp	r1, r2
 800389c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a0:	d1f9      	bne.n	8003896 <memcpy+0xe>
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <__malloc_lock>:
 80038a4:	4801      	ldr	r0, [pc, #4]	; (80038ac <__malloc_lock+0x8>)
 80038a6:	f7fe bd4e 	b.w	8002346 <__retarget_lock_acquire_recursive>
 80038aa:	bf00      	nop
 80038ac:	200000d8 	.word	0x200000d8

080038b0 <__malloc_unlock>:
 80038b0:	4801      	ldr	r0, [pc, #4]	; (80038b8 <__malloc_unlock+0x8>)
 80038b2:	f7fe bd49 	b.w	8002348 <__retarget_lock_release_recursive>
 80038b6:	bf00      	nop
 80038b8:	200000d8 	.word	0x200000d8

080038bc <_realloc_r>:
 80038bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c0:	4680      	mov	r8, r0
 80038c2:	4614      	mov	r4, r2
 80038c4:	460e      	mov	r6, r1
 80038c6:	b921      	cbnz	r1, 80038d2 <_realloc_r+0x16>
 80038c8:	4611      	mov	r1, r2
 80038ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ce:	f7fe be11 	b.w	80024f4 <_malloc_r>
 80038d2:	b92a      	cbnz	r2, 80038e0 <_realloc_r+0x24>
 80038d4:	f7fe fda6 	bl	8002424 <_free_r>
 80038d8:	4625      	mov	r5, r4
 80038da:	4628      	mov	r0, r5
 80038dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e0:	f000 f82e 	bl	8003940 <_malloc_usable_size_r>
 80038e4:	4284      	cmp	r4, r0
 80038e6:	4607      	mov	r7, r0
 80038e8:	d802      	bhi.n	80038f0 <_realloc_r+0x34>
 80038ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038ee:	d812      	bhi.n	8003916 <_realloc_r+0x5a>
 80038f0:	4621      	mov	r1, r4
 80038f2:	4640      	mov	r0, r8
 80038f4:	f7fe fdfe 	bl	80024f4 <_malloc_r>
 80038f8:	4605      	mov	r5, r0
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d0ed      	beq.n	80038da <_realloc_r+0x1e>
 80038fe:	42bc      	cmp	r4, r7
 8003900:	4622      	mov	r2, r4
 8003902:	4631      	mov	r1, r6
 8003904:	bf28      	it	cs
 8003906:	463a      	movcs	r2, r7
 8003908:	f7ff ffbe 	bl	8003888 <memcpy>
 800390c:	4631      	mov	r1, r6
 800390e:	4640      	mov	r0, r8
 8003910:	f7fe fd88 	bl	8002424 <_free_r>
 8003914:	e7e1      	b.n	80038da <_realloc_r+0x1e>
 8003916:	4635      	mov	r5, r6
 8003918:	e7df      	b.n	80038da <_realloc_r+0x1e>
	...

0800391c <_read_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4604      	mov	r4, r0
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	2200      	movs	r2, #0
 8003926:	4d05      	ldr	r5, [pc, #20]	; (800393c <_read_r+0x20>)
 8003928:	602a      	str	r2, [r5, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	f7fc fe66 	bl	80005fc <_read>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_read_r+0x1e>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_read_r+0x1e>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	200000e4 	.word	0x200000e4

08003940 <_malloc_usable_size_r>:
 8003940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003944:	1f18      	subs	r0, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbc      	itt	lt
 800394a:	580b      	ldrlt	r3, [r1, r0]
 800394c:	18c0      	addlt	r0, r0, r3
 800394e:	4770      	bx	lr

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
