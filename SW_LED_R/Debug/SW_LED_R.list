
SW_LED_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200000b0  08002c1c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002c1c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057c0  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001490  00000000  00000000  00025899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00026d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  000273f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176e6  00000000  00000000  00027a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f17  00000000  00000000  0003f11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836d7  00000000  00000000  00046035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c970c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  000c975c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080029dc 	.word	0x080029dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080029dc 	.word	0x080029dc

0800014c <led_all_off>:
		{GPIOB, D5_Pin},
		{GPIOB, D6_Pin},
		{GPIOB, D7_Pin},
		{GPIOB, D8_Pin}
};
void led_all_off(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i <8; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e010      	b.n	800017a <led_all_off+0x2e>
	 HAL_GPIO_WritePin(led[i].port, led[i].pin, RESET);
 8000158:	4a0c      	ldr	r2, [pc, #48]	; (800018c <led_all_off+0x40>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000160:	4a0a      	ldr	r2, [pc, #40]	; (800018c <led_all_off+0x40>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	00db      	lsls	r3, r3, #3
 8000166:	4413      	add	r3, r2
 8000168:	685b      	ldr	r3, [r3, #4]
 800016a:	b29b      	uxth	r3, r3
 800016c:	2200      	movs	r2, #0
 800016e:	4619      	mov	r1, r3
 8000170:	f000 fe93 	bl	8000e9a <HAL_GPIO_WritePin>
	for(int i=0; i <8; i++)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	3301      	adds	r3, #1
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2b07      	cmp	r3, #7
 800017e:	ddeb      	ble.n	8000158 <led_all_off+0xc>
}
 8000180:	bf00      	nop
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000

08000190 <check>:
void check(int n){
 8000190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000194:	b089      	sub	sp, #36	; 0x24
 8000196:	af00      	add	r7, sp, #0
 8000198:	6078      	str	r0, [r7, #4]
 800019a:	466b      	mov	r3, sp
 800019c:	461e      	mov	r6, r3
	int random[n];
 800019e:	6879      	ldr	r1, [r7, #4]
 80001a0:	1e4b      	subs	r3, r1, #1
 80001a2:	613b      	str	r3, [r7, #16]
 80001a4:	460a      	mov	r2, r1
 80001a6:	2300      	movs	r3, #0
 80001a8:	4690      	mov	r8, r2
 80001aa:	4699      	mov	r9, r3
 80001ac:	f04f 0200 	mov.w	r2, #0
 80001b0:	f04f 0300 	mov.w	r3, #0
 80001b4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80001b8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80001bc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80001c0:	460a      	mov	r2, r1
 80001c2:	2300      	movs	r3, #0
 80001c4:	4614      	mov	r4, r2
 80001c6:	461d      	mov	r5, r3
 80001c8:	f04f 0200 	mov.w	r2, #0
 80001cc:	f04f 0300 	mov.w	r3, #0
 80001d0:	016b      	lsls	r3, r5, #5
 80001d2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80001d6:	0162      	lsls	r2, r4, #5
 80001d8:	460b      	mov	r3, r1
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	3307      	adds	r3, #7
 80001de:	08db      	lsrs	r3, r3, #3
 80001e0:	00db      	lsls	r3, r3, #3
 80001e2:	ebad 0d03 	sub.w	sp, sp, r3
 80001e6:	466b      	mov	r3, sp
 80001e8:	3303      	adds	r3, #3
 80001ea:	089b      	lsrs	r3, r3, #2
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<n; i++){
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]
 80001f4:	e027      	b.n	8000246 <check+0xb6>
		random[i] =rand()%8;
 80001f6:	f001 fbb3 	bl	8001960 <rand>
 80001fa:	4603      	mov	r3, r0
 80001fc:	425a      	negs	r2, r3
 80001fe:	f003 0307 	and.w	r3, r3, #7
 8000202:	f002 0207 	and.w	r2, r2, #7
 8000206:	bf58      	it	pl
 8000208:	4253      	negpl	r3, r2
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	6979      	ldr	r1, [r7, #20]
 800020e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		for(int j=0; j<i; j++){
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
 8000216:	e00f      	b.n	8000238 <check+0xa8>
			if(random[i]==random[j]){
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	697a      	ldr	r2, [r7, #20]
 800021c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	69b9      	ldr	r1, [r7, #24]
 8000224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d102      	bne.n	8000232 <check+0xa2>
				i--;
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	3b01      	subs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
		for(int j=0; j<i; j++){
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	3301      	adds	r3, #1
 8000236:	61bb      	str	r3, [r7, #24]
 8000238:	69ba      	ldr	r2, [r7, #24]
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	429a      	cmp	r2, r3
 800023e:	dbeb      	blt.n	8000218 <check+0x88>
	for(int i=0; i<n; i++){
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	3301      	adds	r3, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	697a      	ldr	r2, [r7, #20]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	dbd3      	blt.n	80001f6 <check+0x66>
			}
		}
	}

	for(int i=0; i <n; i++){
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
 8000252:	e016      	b.n	8000282 <check+0xf2>
		HAL_GPIO_WritePin(led[random[i]].port, led[random[i]].pin, SET);
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <check+0x114>)
 800025e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	69fa      	ldr	r2, [r7, #28]
 8000266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <check+0x114>)
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	4413      	add	r3, r2
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	b29b      	uxth	r3, r3
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	f000 fe0f 	bl	8000e9a <HAL_GPIO_WritePin>
	for(int i=0; i <n; i++){
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	3301      	adds	r3, #1
 8000280:	61fb      	str	r3, [r7, #28]
 8000282:	69fa      	ldr	r2, [r7, #28]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	dbe4      	blt.n	8000254 <check+0xc4>
	}
	HAL_Delay(500);
 800028a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028e:	f000 fb37 	bl	8000900 <HAL_Delay>
	led_all_off();
 8000292:	f7ff ff5b 	bl	800014c <led_all_off>
 8000296:	46b5      	mov	sp, r6
}
 8000298:	bf00      	nop
 800029a:	3724      	adds	r7, #36	; 0x24
 800029c:	46bd      	mov	sp, r7
 800029e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002a2:	bf00      	nop
 80002a4:	20000000 	.word	0x20000000

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 fac6 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f826 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f000 f890 	bl	80003d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b8:	f000 f864 	bl	8000384 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, SW1_Pin)){
 80002bc:	2120      	movs	r1, #32
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <main+0x54>)
 80002c0:	f000 fdd4 	bl	8000e6c <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <main+0x28>
	  		  check(2);
 80002ca:	2002      	movs	r0, #2
 80002cc:	f7ff ff60 	bl	8000190 <check>
	  	  }
	  if(HAL_GPIO_ReadPin(GPIOA, SW2_Pin)){
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <main+0x54>)
 80002d4:	f000 fdca 	bl	8000e6c <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <main+0x3c>
	  	  check(3);
 80002de:	2003      	movs	r0, #3
 80002e0:	f7ff ff56 	bl	8000190 <check>
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, SW3_Pin)){
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <main+0x54>)
 80002e8:	f000 fdc0 	bl	8000e6c <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0e4      	beq.n	80002bc <main+0x14>
	  	check(4);
 80002f2:	2004      	movs	r0, #4
 80002f4:	f7ff ff4c 	bl	8000190 <check>
	  if(HAL_GPIO_ReadPin(GPIOA, SW1_Pin)){
 80002f8:	e7e0      	b.n	80002bc <main+0x14>
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b090      	sub	sp, #64	; 0x40
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0318 	add.w	r3, r7, #24
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fb1e 	bl	8001950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000332:	2300      	movs	r3, #0
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000336:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fde5 	bl	8000f10 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800034c:	f000 f8e4 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2302      	movs	r3, #2
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f001 f852 	bl	8001414 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000376:	f000 f8cf 	bl	8000518 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3740      	adds	r7, #64	; 0x40
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART2_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003bc:	f001 f9c2 	bl	8001744 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 f8a7 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000cc 	.word	0x200000cc
 80003d4:	40004400 	.word	0x40004400

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	4b45      	ldr	r3, [pc, #276]	; (8000504 <MX_GPIO_Init+0x12c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a44      	ldr	r2, [pc, #272]	; (8000504 <MX_GPIO_Init+0x12c>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b42      	ldr	r3, [pc, #264]	; (8000504 <MX_GPIO_Init+0x12c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000404:	4b3f      	ldr	r3, [pc, #252]	; (8000504 <MX_GPIO_Init+0x12c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a3e      	ldr	r2, [pc, #248]	; (8000504 <MX_GPIO_Init+0x12c>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b3c      	ldr	r3, [pc, #240]	; (8000504 <MX_GPIO_Init+0x12c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b39      	ldr	r3, [pc, #228]	; (8000504 <MX_GPIO_Init+0x12c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a38      	ldr	r2, [pc, #224]	; (8000504 <MX_GPIO_Init+0x12c>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <MX_GPIO_Init+0x12c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <MX_GPIO_Init+0x12c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a32      	ldr	r2, [pc, #200]	; (8000504 <MX_GPIO_Init+0x12c>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <MX_GPIO_Init+0x12c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin|D3_Pin
 800044c:	2200      	movs	r2, #0
 800044e:	f64d 0106 	movw	r1, #55302	; 0xd806
 8000452:	482d      	ldr	r0, [pc, #180]	; (8000508 <MX_GPIO_Init+0x130>)
 8000454:	f000 fd21 	bl	8000e9a <HAL_GPIO_WritePin>
                          |D8_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D2_Pin|D1_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800045e:	482b      	ldr	r0, [pc, #172]	; (800050c <MX_GPIO_Init+0x134>)
 8000460:	f000 fd1b 	bl	8000e9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046a:	4b29      	ldr	r3, [pc, #164]	; (8000510 <MX_GPIO_Init+0x138>)
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4826      	ldr	r0, [pc, #152]	; (8000514 <MX_GPIO_Init+0x13c>)
 800047a:	f000 fb73 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 800047e:	23e0      	movs	r3, #224	; 0xe0
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	481e      	ldr	r0, [pc, #120]	; (800050c <MX_GPIO_Init+0x134>)
 8000492:	f000 fb67 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin D3_Pin
                           D8_Pin D7_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin|D3_Pin
 8000496:	f64d 0306 	movw	r3, #55302	; 0xd806
 800049a:	613b      	str	r3, [r7, #16]
                          |D8_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_GPIO_Init+0x130>)
 80004b0:	f000 fb58 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D1_Pin;
 80004b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	480f      	ldr	r0, [pc, #60]	; (800050c <MX_GPIO_Init+0x134>)
 80004ce:	f000 fb49 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW4_Pin */
  GPIO_InitStruct.Pin = SW4_Pin;
 80004d2:	2340      	movs	r3, #64	; 0x40
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <MX_GPIO_Init+0x130>)
 80004e6:	f000 fb3d 	bl	8000b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2028      	movs	r0, #40	; 0x28
 80004f0:	f000 fb01 	bl	8000af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004f4:	2028      	movs	r0, #40	; 0x28
 80004f6:	f000 fb1a 	bl	8000b2e <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40010c00 	.word	0x40010c00
 800050c:	40010800 	.word	0x40010800
 8000510:	10110000 	.word	0x10110000
 8000514:	40011000 	.word	0x40011000

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_UART_MspInit+0x70>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d123      	bne.n	80005f0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b2:	61d3      	str	r3, [r2, #28]
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_UART_MspInit+0x74>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d8:	230c      	movs	r3, #12
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_UART_MspInit+0x78>)
 80005ec:	f000 faba 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40004400 	.word	0x40004400
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f93d 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}

08000652 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000656:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800065a:	f000 fc37 	bl	8000ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}

08000662 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <_kill>:

int _kill(int pid, int sig)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800067a:	f001 f93f 	bl	80018fc <__errno>
 800067e:	4603      	mov	r3, r0
 8000680:	2216      	movs	r2, #22
 8000682:	601a      	str	r2, [r3, #0]
	return -1;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <_exit>:

void _exit (int status)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffe7 	bl	8000670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80006a2:	e7fe      	b.n	80006a2 <_exit+0x12>

080006a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e00a      	b.n	80006cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006b6:	f3af 8000 	nop.w
 80006ba:	4601      	mov	r1, r0
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	b2ca      	uxtb	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf0      	blt.n	80006b6 <_read+0x12>
	}

return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e009      	b.n	8000704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	60ba      	str	r2, [r7, #8]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf1      	blt.n	80006f0 <_write+0x12>
	}
	return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_close>:

int _close(int file)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	return -1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073c:	605a      	str	r2, [r3, #4]
	return 0;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <_isatty>:

int _isatty(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	return 1;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075e:	b480      	push	{r7}
 8000760:	b085      	sub	sp, #20
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
	...

08000778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <_sbrk+0x5c>)
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <_sbrk+0x60>)
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <_sbrk+0x64>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <_sbrk+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d207      	bcs.n	80007b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a8:	f001 f8a8 	bl	80018fc <__errno>
 80007ac:	4603      	mov	r3, r0
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	e009      	b.n	80007cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <_sbrk+0x64>)
 80007c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20005000 	.word	0x20005000
 80007d8:	00000400 	.word	0x00000400
 80007dc:	20000110 	.word	0x20000110
 80007e0:	20000128 	.word	0x20000128

080007e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000816:	f7ff ffe5 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f001 f875 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fd43 	bl	80002a8 <main>
  bx lr
 8000822:	4770      	bx	lr
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800082c:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 8000830:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000834:	20000128 	.word	0x20000128

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x28>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f947 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff fe64 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f95f 	bl	8000b4a <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 f927 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000040 	.word	0x20000040
 80008c0:	20000048 	.word	0x20000048
 80008c4:	20000044 	.word	0x20000044

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000048 	.word	0x20000048
 80008e8:	20000114 	.word	0x20000114

080008ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000114 	.word	0x20000114

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff fff0 	bl	80008ec <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffe0 	bl	80008ec <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000048 	.word	0x20000048

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	; (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff2d 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff42 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff35 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b08b      	sub	sp, #44	; 0x2c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e169      	b.n	8000e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8158 	bne.w	8000e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a9a      	ldr	r2, [pc, #616]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d05e      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000ba0:	4a98      	ldr	r2, [pc, #608]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d875      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000ba6:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d058      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bac:	4a96      	ldr	r2, [pc, #600]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d86f      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bb2:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d052      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bb8:	4a94      	ldr	r2, [pc, #592]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d869      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bbe:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d04c      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bc4:	4a92      	ldr	r2, [pc, #584]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d863      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bca:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d046      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bd0:	4a90      	ldr	r2, [pc, #576]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d85d      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d82a      	bhi.n	8000c30 <HAL_GPIO_Init+0xcc>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d859      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <HAL_GPIO_Init+0x80>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000c5f 	.word	0x08000c5f
 8000be8:	08000c39 	.word	0x08000c39
 8000bec:	08000c4b 	.word	0x08000c4b
 8000bf0:	08000c8d 	.word	0x08000c8d
 8000bf4:	08000c93 	.word	0x08000c93
 8000bf8:	08000c93 	.word	0x08000c93
 8000bfc:	08000c93 	.word	0x08000c93
 8000c00:	08000c93 	.word	0x08000c93
 8000c04:	08000c93 	.word	0x08000c93
 8000c08:	08000c93 	.word	0x08000c93
 8000c0c:	08000c93 	.word	0x08000c93
 8000c10:	08000c93 	.word	0x08000c93
 8000c14:	08000c93 	.word	0x08000c93
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c93 	.word	0x08000c93
 8000c20:	08000c93 	.word	0x08000c93
 8000c24:	08000c93 	.word	0x08000c93
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c55 	.word	0x08000c55
 8000c30:	4a79      	ldr	r2, [pc, #484]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d013      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c36:	e02c      	b.n	8000c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e029      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	3304      	adds	r3, #4
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e024      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	3308      	adds	r3, #8
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e01f      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	330c      	adds	r3, #12
 8000c5a:	623b      	str	r3, [r7, #32]
          break;
 8000c5c:	e01a      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c66:	2304      	movs	r3, #4
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e013      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d105      	bne.n	8000c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c74:	2308      	movs	r3, #8
 8000c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	611a      	str	r2, [r3, #16]
          break;
 8000c7e:	e009      	b.n	8000c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	615a      	str	r2, [r3, #20]
          break;
 8000c8a:	e003      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          break;
 8000c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d801      	bhi.n	8000c9e <HAL_GPIO_Init+0x13a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	e001      	b.n	8000ca2 <HAL_GPIO_Init+0x13e>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d802      	bhi.n	8000cb0 <HAL_GPIO_Init+0x14c>
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0x152>
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3b08      	subs	r3, #8
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	6a39      	ldr	r1, [r7, #32]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cfc:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d013      	beq.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3f      	ldr	r2, [pc, #252]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00d      	beq.n	8000d4c <HAL_GPIO_Init+0x1e8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3e      	ldr	r2, [pc, #248]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d007      	beq.n	8000d48 <HAL_GPIO_Init+0x1e4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <HAL_GPIO_Init+0x1e0>
 8000d40:	2303      	movs	r3, #3
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d44:	2304      	movs	r3, #4
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d50:	2300      	movs	r3, #0
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d62:	492f      	ldr	r1, [pc, #188]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	492c      	ldr	r1, [pc, #176]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4928      	ldr	r1, [pc, #160]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4922      	ldr	r1, [pc, #136]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	491e      	ldr	r1, [pc, #120]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	4918      	ldr	r1, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4914      	ldr	r1, [pc, #80]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d021      	beq.n	8000e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	490e      	ldr	r1, [pc, #56]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
 8000e00:	e021      	b.n	8000e46 <HAL_GPIO_Init+0x2e2>
 8000e02:	bf00      	nop
 8000e04:	10320000 	.word	0x10320000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10220000 	.word	0x10220000
 8000e10:	10210000 	.word	0x10210000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40011400 	.word	0x40011400
 8000e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4909      	ldr	r1, [pc, #36]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3301      	adds	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f47f ae8e 	bne.w	8000b78 <HAL_GPIO_Init+0x14>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	372c      	adds	r7, #44	; 0x2c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	807b      	strh	r3, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eaa:	787b      	ldrb	r3, [r7, #1]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb6:	e003      	b.n	8000ec0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	611a      	str	r2, [r3, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f806 	bl	8000efc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e272      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8087 	beq.w	800103e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d00c      	beq.n	8000f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3c:	4b8f      	ldr	r3, [pc, #572]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d112      	bne.n	8000f6e <HAL_RCC_OscConfig+0x5e>
 8000f48:	4b8c      	ldr	r3, [pc, #560]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d10b      	bne.n	8000f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	4b89      	ldr	r3, [pc, #548]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d06c      	beq.n	800103c <HAL_RCC_OscConfig+0x12c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d168      	bne.n	800103c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e24c      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f76:	d106      	bne.n	8000f86 <HAL_RCC_OscConfig+0x76>
 8000f78:	4b80      	ldr	r3, [pc, #512]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a7f      	ldr	r2, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e02e      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x98>
 8000f8e:	4b7b      	ldr	r3, [pc, #492]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7a      	ldr	r2, [pc, #488]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b78      	ldr	r3, [pc, #480]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a77      	ldr	r2, [pc, #476]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e01d      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0xbc>
 8000fb2:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a71      	ldr	r2, [pc, #452]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6e      	ldr	r2, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000fcc:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a67      	ldr	r2, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc7e 	bl	80008ec <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc7a 	bl	80008ec <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e200      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xe4>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fc6a 	bl	80008ec <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fc66 	bl	80008ec <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e1ec      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x10c>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d063      	beq.n	8001112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001056:	4b49      	ldr	r3, [pc, #292]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b08      	cmp	r3, #8
 8001060:	d11c      	bne.n	800109c <HAL_RCC_OscConfig+0x18c>
 8001062:	4b46      	ldr	r3, [pc, #280]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e1c0      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4939      	ldr	r1, [pc, #228]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	e03a      	b.n	8001112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fc1f 	bl	80008ec <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fc1b 	bl	80008ec <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1a1      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4927      	ldr	r1, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_OscConfig+0x270>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fbfe 	bl	80008ec <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff fbfa 	bl	80008ec <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e180      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d03a      	beq.n	8001194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_RCC_OscConfig+0x274>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fbde 	bl	80008ec <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fbda 	bl	80008ec <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e160      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_RCC_OscConfig+0x26c>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fad8 	bl	8001708 <RCC_Delay>
 8001158:	e01c      	b.n	8001194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_RCC_OscConfig+0x274>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fbc4 	bl	80008ec <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001166:	e00f      	b.n	8001188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fbc0 	bl	80008ec <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d908      	bls.n	8001188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e146      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	42420000 	.word	0x42420000
 8001184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e9      	bne.n	8001168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80a6 	beq.w	80012ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <HAL_RCC_OscConfig+0x4c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011da:	4b7f      	ldr	r3, [pc, #508]	; (80013d8 <HAL_RCC_OscConfig+0x4c8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a7e      	ldr	r2, [pc, #504]	; (80013d8 <HAL_RCC_OscConfig+0x4c8>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb81 	bl	80008ec <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fb7d 	bl	80008ec <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e103      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b75      	ldr	r3, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0x4c8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x312>
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	e02d      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x334>
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a69      	ldr	r2, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a66      	ldr	r2, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	e01c      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b05      	cmp	r3, #5
 800124a:	d10c      	bne.n	8001266 <HAL_RCC_OscConfig+0x356>
 800124c:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a60      	ldr	r2, [pc, #384]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a5d      	ldr	r2, [pc, #372]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	e00b      	b.n	800127e <HAL_RCC_OscConfig+0x36e>
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a5a      	ldr	r2, [pc, #360]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	6213      	str	r3, [r2, #32]
 8001272:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d015      	beq.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb31 	bl	80008ec <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fb2d 	bl	80008ec <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e0b1      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0ee      	beq.n	800128e <HAL_RCC_OscConfig+0x37e>
 80012b0:	e014      	b.n	80012dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb1b 	bl	80008ec <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fb17 	bl	80008ec <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e09b      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ee      	bne.n	80012ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a3b      	ldr	r2, [pc, #236]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8087 	beq.w	8001406 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d061      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d146      	bne.n	800139a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_RCC_OscConfig+0x4cc>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff faeb 	bl	80008ec <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff fae7 	bl	80008ec <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e06d      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d108      	bne.n	8001354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4921      	ldr	r1, [pc, #132]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a19      	ldr	r1, [r3, #32]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	430b      	orrs	r3, r1
 8001366:	491b      	ldr	r1, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x4cc>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fabb 	bl	80008ec <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fab7 	bl	80008ec <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e03d      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x46a>
 8001398:	e035      	b.n	8001406 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_RCC_OscConfig+0x4cc>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff faa4 	bl	80008ec <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff faa0 	bl	80008ec <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e026      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x498>
 80013c6:	e01e      	b.n	8001406 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e019      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40007000 	.word	0x40007000
 80013dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x500>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0d0      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d910      	bls.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	4965      	ldr	r1, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d040      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d115      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e073      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06b      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff f9f2 	bl	80008ec <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f9ee 	bl	80008ec <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e053      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d210      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4922      	ldr	r1, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1cc>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f950 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002a04 	.word	0x08002a04
 80015e0:	20000040 	.word	0x20000040
 80015e4:	20000044 	.word	0x20000044

080015e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	b490      	push	{r4, r7}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_RCC_GetSysClockFreq+0xac>)
 80015f0:	1d3c      	adds	r4, r7, #4
 80015f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f8:	f240 2301 	movw	r3, #513	; 0x201
 80015fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x46>
 8001626:	e02b      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 800162a:	623b      	str	r3, [r7, #32]
      break;
 800162c:	e02b      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3328      	adds	r3, #40	; 0x28
 8001638:	443b      	add	r3, r7
 800163a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800163e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d012      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb0>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0c5b      	lsrs	r3, r3, #17
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	3328      	adds	r3, #40	; 0x28
 8001656:	443b      	add	r3, r7
 8001658:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800165c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001662:	fb03 f202 	mul.w	r2, r3, r2
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	e004      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	623b      	str	r3, [r7, #32]
      break;
 800167e:	e002      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001682:	623b      	str	r3, [r7, #32]
      break;
 8001684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001686:	6a3b      	ldr	r3, [r7, #32]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bc90      	pop	{r4, r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	080029f4 	.word	0x080029f4
 8001698:	40021000 	.word	0x40021000
 800169c:	007a1200 	.word	0x007a1200
 80016a0:	003d0900 	.word	0x003d0900

080016a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000040 	.word	0x20000040

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016bc:	f7ff fff2 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08002a14 	.word	0x08002a14

080016e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0adb      	lsrs	r3, r3, #11
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	; (8001704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	08002a14 	.word	0x08002a14

08001708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <RCC_Delay+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <RCC_Delay+0x38>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0a5b      	lsrs	r3, r3, #9
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001724:	bf00      	nop
  }
  while (Delay --);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	60fa      	str	r2, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <RCC_Delay+0x1c>
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000040 	.word	0x20000040
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e03f      	b.n	80017d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe ff0c 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2224      	movs	r2, #36	; 0x24
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f829 	bl	80017e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800179c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800181a:	f023 030c 	bic.w	r3, r3, #12
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	430b      	orrs	r3, r1
 8001826:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <UART_SetConfig+0x114>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001848:	f7ff ff4a 	bl	80016e0 <HAL_RCC_GetPCLK2Freq>
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	e002      	b.n	8001856 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001850:	f7ff ff32 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8001854:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <UART_SetConfig+0x118>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	0119      	lsls	r1, r3, #4
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fbb2 f2f3 	udiv	r2, r2, r3
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <UART_SetConfig+0x118>)
 800188e:	fba3 0302 	umull	r0, r3, r3, r2
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2064      	movs	r0, #100	; 0x64
 8001896:	fb00 f303 	mul.w	r3, r0, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	3332      	adds	r3, #50	; 0x32
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <UART_SetConfig+0x118>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ac:	4419      	add	r1, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009a      	lsls	r2, r3, #2
 80018b8:	441a      	add	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <UART_SetConfig+0x118>)
 80018c6:	fba3 0302 	umull	r0, r3, r3, r2
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2064      	movs	r0, #100	; 0x64
 80018ce:	fb00 f303 	mul.w	r3, r0, r3
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	3332      	adds	r3, #50	; 0x32
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <UART_SetConfig+0x118>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	f003 020f 	and.w	r2, r3, #15
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	440a      	add	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013800 	.word	0x40013800
 80018f8:	51eb851f 	.word	0x51eb851f

080018fc <__errno>:
 80018fc:	4b01      	ldr	r3, [pc, #4]	; (8001904 <__errno+0x8>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	2000004c 	.word	0x2000004c

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	2600      	movs	r6, #0
 800190c:	4d0c      	ldr	r5, [pc, #48]	; (8001940 <__libc_init_array+0x38>)
 800190e:	4c0d      	ldr	r4, [pc, #52]	; (8001944 <__libc_init_array+0x3c>)
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	42a6      	cmp	r6, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	f001 f860 	bl	80029dc <_init>
 800191c:	2600      	movs	r6, #0
 800191e:	4d0a      	ldr	r5, [pc, #40]	; (8001948 <__libc_init_array+0x40>)
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <__libc_init_array+0x44>)
 8001922:	1b64      	subs	r4, r4, r5
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	42a6      	cmp	r6, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001930:	4798      	blx	r3
 8001932:	3601      	adds	r6, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	f855 3b04 	ldr.w	r3, [r5], #4
 800193a:	4798      	blx	r3
 800193c:	3601      	adds	r6, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	08002b64 	.word	0x08002b64
 8001944:	08002b64 	.word	0x08002b64
 8001948:	08002b64 	.word	0x08002b64
 800194c:	08002b68 	.word	0x08002b68

08001950 <memset>:
 8001950:	4603      	mov	r3, r0
 8001952:	4402      	add	r2, r0
 8001954:	4293      	cmp	r3, r2
 8001956:	d100      	bne.n	800195a <memset+0xa>
 8001958:	4770      	bx	lr
 800195a:	f803 1b01 	strb.w	r1, [r3], #1
 800195e:	e7f9      	b.n	8001954 <memset+0x4>

08001960 <rand>:
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <rand+0x5c>)
 8001962:	b510      	push	{r4, lr}
 8001964:	681c      	ldr	r4, [r3, #0]
 8001966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001968:	b9b3      	cbnz	r3, 8001998 <rand+0x38>
 800196a:	2018      	movs	r0, #24
 800196c:	f000 f866 	bl	8001a3c <malloc>
 8001970:	4602      	mov	r2, r0
 8001972:	63a0      	str	r0, [r4, #56]	; 0x38
 8001974:	b920      	cbnz	r0, 8001980 <rand+0x20>
 8001976:	214e      	movs	r1, #78	; 0x4e
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <rand+0x60>)
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <rand+0x64>)
 800197c:	f000 f82e 	bl	80019dc <__assert_func>
 8001980:	4911      	ldr	r1, [pc, #68]	; (80019c8 <rand+0x68>)
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <rand+0x6c>)
 8001984:	e9c0 1300 	strd	r1, r3, [r0]
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <rand+0x70>)
 800198a:	2100      	movs	r1, #0
 800198c:	6083      	str	r3, [r0, #8]
 800198e:	230b      	movs	r3, #11
 8001990:	8183      	strh	r3, [r0, #12]
 8001992:	2001      	movs	r0, #1
 8001994:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001998:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <rand+0x74>)
 800199c:	6920      	ldr	r0, [r4, #16]
 800199e:	6963      	ldr	r3, [r4, #20]
 80019a0:	4342      	muls	r2, r0
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <rand+0x78>)
 80019a4:	fb01 2203 	mla	r2, r1, r3, r2
 80019a8:	fba0 0101 	umull	r0, r1, r0, r1
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	eb42 0001 	adc.w	r0, r2, r1
 80019b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80019b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80019ba:	bd10      	pop	{r4, pc}
 80019bc:	2000004c 	.word	0x2000004c
 80019c0:	08002a20 	.word	0x08002a20
 80019c4:	08002a37 	.word	0x08002a37
 80019c8:	abcd330e 	.word	0xabcd330e
 80019cc:	e66d1234 	.word	0xe66d1234
 80019d0:	0005deec 	.word	0x0005deec
 80019d4:	5851f42d 	.word	0x5851f42d
 80019d8:	4c957f2d 	.word	0x4c957f2d

080019dc <__assert_func>:
 80019dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019de:	4614      	mov	r4, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <__assert_func+0x2c>)
 80019e4:	4605      	mov	r5, r0
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d8      	ldr	r0, [r3, #12]
 80019ea:	b14c      	cbz	r4, 8001a00 <__assert_func+0x24>
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <__assert_func+0x30>)
 80019ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80019f2:	9100      	str	r1, [sp, #0]
 80019f4:	462b      	mov	r3, r5
 80019f6:	4906      	ldr	r1, [pc, #24]	; (8001a10 <__assert_func+0x34>)
 80019f8:	f000 f80e 	bl	8001a18 <fiprintf>
 80019fc:	f000 fcc0 	bl	8002380 <abort>
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__assert_func+0x38>)
 8001a02:	461c      	mov	r4, r3
 8001a04:	e7f3      	b.n	80019ee <__assert_func+0x12>
 8001a06:	bf00      	nop
 8001a08:	2000004c 	.word	0x2000004c
 8001a0c:	08002a92 	.word	0x08002a92
 8001a10:	08002a9f 	.word	0x08002a9f
 8001a14:	08002acd 	.word	0x08002acd

08001a18 <fiprintf>:
 8001a18:	b40e      	push	{r1, r2, r3}
 8001a1a:	b503      	push	{r0, r1, lr}
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	ab03      	add	r3, sp, #12
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <fiprintf+0x20>)
 8001a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a26:	6800      	ldr	r0, [r0, #0]
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f000 f913 	bl	8001c54 <_vfiprintf_r>
 8001a2e:	b002      	add	sp, #8
 8001a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a34:	b003      	add	sp, #12
 8001a36:	4770      	bx	lr
 8001a38:	2000004c 	.word	0x2000004c

08001a3c <malloc>:
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <malloc+0xc>)
 8001a3e:	4601      	mov	r1, r0
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f000 b86b 	b.w	8001b1c <_malloc_r>
 8001a46:	bf00      	nop
 8001a48:	2000004c 	.word	0x2000004c

08001a4c <_free_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4605      	mov	r5, r0
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d040      	beq.n	8001ad6 <_free_r+0x8a>
 8001a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a58:	1f0c      	subs	r4, r1, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bfb8      	it	lt
 8001a5e:	18e4      	addlt	r4, r4, r3
 8001a60:	f000 fec0 	bl	80027e4 <__malloc_lock>
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <_free_r+0x8c>)
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	b933      	cbnz	r3, 8001a78 <_free_r+0x2c>
 8001a6a:	6063      	str	r3, [r4, #4]
 8001a6c:	6014      	str	r4, [r2, #0]
 8001a6e:	4628      	mov	r0, r5
 8001a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a74:	f000 bebc 	b.w	80027f0 <__malloc_unlock>
 8001a78:	42a3      	cmp	r3, r4
 8001a7a:	d908      	bls.n	8001a8e <_free_r+0x42>
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	1821      	adds	r1, r4, r0
 8001a80:	428b      	cmp	r3, r1
 8001a82:	bf01      	itttt	eq
 8001a84:	6819      	ldreq	r1, [r3, #0]
 8001a86:	685b      	ldreq	r3, [r3, #4]
 8001a88:	1809      	addeq	r1, r1, r0
 8001a8a:	6021      	streq	r1, [r4, #0]
 8001a8c:	e7ed      	b.n	8001a6a <_free_r+0x1e>
 8001a8e:	461a      	mov	r2, r3
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	b10b      	cbz	r3, 8001a98 <_free_r+0x4c>
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	d9fa      	bls.n	8001a8e <_free_r+0x42>
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	1850      	adds	r0, r2, r1
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d10b      	bne.n	8001ab8 <_free_r+0x6c>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	4401      	add	r1, r0
 8001aa4:	1850      	adds	r0, r2, r1
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	d1e0      	bne.n	8001a6e <_free_r+0x22>
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4401      	add	r1, r0
 8001ab2:	6011      	str	r1, [r2, #0]
 8001ab4:	6053      	str	r3, [r2, #4]
 8001ab6:	e7da      	b.n	8001a6e <_free_r+0x22>
 8001ab8:	d902      	bls.n	8001ac0 <_free_r+0x74>
 8001aba:	230c      	movs	r3, #12
 8001abc:	602b      	str	r3, [r5, #0]
 8001abe:	e7d6      	b.n	8001a6e <_free_r+0x22>
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	1821      	adds	r1, r4, r0
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	bf01      	itttt	eq
 8001ac8:	6819      	ldreq	r1, [r3, #0]
 8001aca:	685b      	ldreq	r3, [r3, #4]
 8001acc:	1809      	addeq	r1, r1, r0
 8001ace:	6021      	streq	r1, [r4, #0]
 8001ad0:	6063      	str	r3, [r4, #4]
 8001ad2:	6054      	str	r4, [r2, #4]
 8001ad4:	e7cb      	b.n	8001a6e <_free_r+0x22>
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	20000118 	.word	0x20000118

08001adc <sbrk_aligned>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	4e0e      	ldr	r6, [pc, #56]	; (8001b18 <sbrk_aligned+0x3c>)
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	6831      	ldr	r1, [r6, #0]
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	b911      	cbnz	r1, 8001aee <sbrk_aligned+0x12>
 8001ae8:	f000 fb7a 	bl	80021e0 <_sbrk_r>
 8001aec:	6030      	str	r0, [r6, #0]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4628      	mov	r0, r5
 8001af2:	f000 fb75 	bl	80021e0 <_sbrk_r>
 8001af6:	1c43      	adds	r3, r0, #1
 8001af8:	d00a      	beq.n	8001b10 <sbrk_aligned+0x34>
 8001afa:	1cc4      	adds	r4, r0, #3
 8001afc:	f024 0403 	bic.w	r4, r4, #3
 8001b00:	42a0      	cmp	r0, r4
 8001b02:	d007      	beq.n	8001b14 <sbrk_aligned+0x38>
 8001b04:	1a21      	subs	r1, r4, r0
 8001b06:	4628      	mov	r0, r5
 8001b08:	f000 fb6a 	bl	80021e0 <_sbrk_r>
 8001b0c:	3001      	adds	r0, #1
 8001b0e:	d101      	bne.n	8001b14 <sbrk_aligned+0x38>
 8001b10:	f04f 34ff 	mov.w	r4, #4294967295
 8001b14:	4620      	mov	r0, r4
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	2000011c 	.word	0x2000011c

08001b1c <_malloc_r>:
 8001b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b20:	1ccd      	adds	r5, r1, #3
 8001b22:	f025 0503 	bic.w	r5, r5, #3
 8001b26:	3508      	adds	r5, #8
 8001b28:	2d0c      	cmp	r5, #12
 8001b2a:	bf38      	it	cc
 8001b2c:	250c      	movcc	r5, #12
 8001b2e:	2d00      	cmp	r5, #0
 8001b30:	4607      	mov	r7, r0
 8001b32:	db01      	blt.n	8001b38 <_malloc_r+0x1c>
 8001b34:	42a9      	cmp	r1, r5
 8001b36:	d905      	bls.n	8001b44 <_malloc_r+0x28>
 8001b38:	230c      	movs	r3, #12
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4630      	mov	r0, r6
 8001b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b44:	4e2e      	ldr	r6, [pc, #184]	; (8001c00 <_malloc_r+0xe4>)
 8001b46:	f000 fe4d 	bl	80027e4 <__malloc_lock>
 8001b4a:	6833      	ldr	r3, [r6, #0]
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	bb34      	cbnz	r4, 8001b9e <_malloc_r+0x82>
 8001b50:	4629      	mov	r1, r5
 8001b52:	4638      	mov	r0, r7
 8001b54:	f7ff ffc2 	bl	8001adc <sbrk_aligned>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	d14d      	bne.n	8001bfa <_malloc_r+0xde>
 8001b5e:	6834      	ldr	r4, [r6, #0]
 8001b60:	4626      	mov	r6, r4
 8001b62:	2e00      	cmp	r6, #0
 8001b64:	d140      	bne.n	8001be8 <_malloc_r+0xcc>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	4631      	mov	r1, r6
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	eb04 0803 	add.w	r8, r4, r3
 8001b70:	f000 fb36 	bl	80021e0 <_sbrk_r>
 8001b74:	4580      	cmp	r8, r0
 8001b76:	d13a      	bne.n	8001bee <_malloc_r+0xd2>
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	3503      	adds	r5, #3
 8001b7c:	1a6d      	subs	r5, r5, r1
 8001b7e:	f025 0503 	bic.w	r5, r5, #3
 8001b82:	3508      	adds	r5, #8
 8001b84:	2d0c      	cmp	r5, #12
 8001b86:	bf38      	it	cc
 8001b88:	250c      	movcc	r5, #12
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7ff ffa5 	bl	8001adc <sbrk_aligned>
 8001b92:	3001      	adds	r0, #1
 8001b94:	d02b      	beq.n	8001bee <_malloc_r+0xd2>
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	442b      	add	r3, r5
 8001b9a:	6023      	str	r3, [r4, #0]
 8001b9c:	e00e      	b.n	8001bbc <_malloc_r+0xa0>
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	1b52      	subs	r2, r2, r5
 8001ba2:	d41e      	bmi.n	8001be2 <_malloc_r+0xc6>
 8001ba4:	2a0b      	cmp	r2, #11
 8001ba6:	d916      	bls.n	8001bd6 <_malloc_r+0xba>
 8001ba8:	1961      	adds	r1, r4, r5
 8001baa:	42a3      	cmp	r3, r4
 8001bac:	6025      	str	r5, [r4, #0]
 8001bae:	bf18      	it	ne
 8001bb0:	6059      	strne	r1, [r3, #4]
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	bf08      	it	eq
 8001bb6:	6031      	streq	r1, [r6, #0]
 8001bb8:	5162      	str	r2, [r4, r5]
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	f104 060b 	add.w	r6, r4, #11
 8001bc2:	f000 fe15 	bl	80027f0 <__malloc_unlock>
 8001bc6:	f026 0607 	bic.w	r6, r6, #7
 8001bca:	1d23      	adds	r3, r4, #4
 8001bcc:	1af2      	subs	r2, r6, r3
 8001bce:	d0b6      	beq.n	8001b3e <_malloc_r+0x22>
 8001bd0:	1b9b      	subs	r3, r3, r6
 8001bd2:	50a3      	str	r3, [r4, r2]
 8001bd4:	e7b3      	b.n	8001b3e <_malloc_r+0x22>
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	bf0c      	ite	eq
 8001bdc:	6032      	streq	r2, [r6, #0]
 8001bde:	605a      	strne	r2, [r3, #4]
 8001be0:	e7ec      	b.n	8001bbc <_malloc_r+0xa0>
 8001be2:	4623      	mov	r3, r4
 8001be4:	6864      	ldr	r4, [r4, #4]
 8001be6:	e7b2      	b.n	8001b4e <_malloc_r+0x32>
 8001be8:	4634      	mov	r4, r6
 8001bea:	6876      	ldr	r6, [r6, #4]
 8001bec:	e7b9      	b.n	8001b62 <_malloc_r+0x46>
 8001bee:	230c      	movs	r3, #12
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	f000 fdfc 	bl	80027f0 <__malloc_unlock>
 8001bf8:	e7a1      	b.n	8001b3e <_malloc_r+0x22>
 8001bfa:	6025      	str	r5, [r4, #0]
 8001bfc:	e7de      	b.n	8001bbc <_malloc_r+0xa0>
 8001bfe:	bf00      	nop
 8001c00:	20000118 	.word	0x20000118

08001c04 <__sfputc_r>:
 8001c04:	6893      	ldr	r3, [r2, #8]
 8001c06:	b410      	push	{r4}
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	6093      	str	r3, [r2, #8]
 8001c0e:	da07      	bge.n	8001c20 <__sfputc_r+0x1c>
 8001c10:	6994      	ldr	r4, [r2, #24]
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	db01      	blt.n	8001c1a <__sfputc_r+0x16>
 8001c16:	290a      	cmp	r1, #10
 8001c18:	d102      	bne.n	8001c20 <__sfputc_r+0x1c>
 8001c1a:	bc10      	pop	{r4}
 8001c1c:	f000 baf0 	b.w	8002200 <__swbuf_r>
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	1c58      	adds	r0, r3, #1
 8001c24:	6010      	str	r0, [r2, #0]
 8001c26:	7019      	strb	r1, [r3, #0]
 8001c28:	4608      	mov	r0, r1
 8001c2a:	bc10      	pop	{r4}
 8001c2c:	4770      	bx	lr

08001c2e <__sfputs_r>:
 8001c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c30:	4606      	mov	r6, r0
 8001c32:	460f      	mov	r7, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	18d5      	adds	r5, r2, r3
 8001c38:	42ac      	cmp	r4, r5
 8001c3a:	d101      	bne.n	8001c40 <__sfputs_r+0x12>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e007      	b.n	8001c50 <__sfputs_r+0x22>
 8001c40:	463a      	mov	r2, r7
 8001c42:	4630      	mov	r0, r6
 8001c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c48:	f7ff ffdc 	bl	8001c04 <__sfputc_r>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d1f3      	bne.n	8001c38 <__sfputs_r+0xa>
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c54 <_vfiprintf_r>:
 8001c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c58:	460d      	mov	r5, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	4606      	mov	r6, r0
 8001c60:	b09d      	sub	sp, #116	; 0x74
 8001c62:	b118      	cbz	r0, 8001c6c <_vfiprintf_r+0x18>
 8001c64:	6983      	ldr	r3, [r0, #24]
 8001c66:	b90b      	cbnz	r3, 8001c6c <_vfiprintf_r+0x18>
 8001c68:	f000 fca8 	bl	80025bc <__sinit>
 8001c6c:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <_vfiprintf_r+0x240>)
 8001c6e:	429d      	cmp	r5, r3
 8001c70:	d11b      	bne.n	8001caa <_vfiprintf_r+0x56>
 8001c72:	6875      	ldr	r5, [r6, #4]
 8001c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c76:	07d9      	lsls	r1, r3, #31
 8001c78:	d405      	bmi.n	8001c86 <_vfiprintf_r+0x32>
 8001c7a:	89ab      	ldrh	r3, [r5, #12]
 8001c7c:	059a      	lsls	r2, r3, #22
 8001c7e:	d402      	bmi.n	8001c86 <_vfiprintf_r+0x32>
 8001c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c82:	f000 fd39 	bl	80026f8 <__retarget_lock_acquire_recursive>
 8001c86:	89ab      	ldrh	r3, [r5, #12]
 8001c88:	071b      	lsls	r3, r3, #28
 8001c8a:	d501      	bpl.n	8001c90 <_vfiprintf_r+0x3c>
 8001c8c:	692b      	ldr	r3, [r5, #16]
 8001c8e:	b9eb      	cbnz	r3, 8001ccc <_vfiprintf_r+0x78>
 8001c90:	4629      	mov	r1, r5
 8001c92:	4630      	mov	r0, r6
 8001c94:	f000 fb06 	bl	80022a4 <__swsetup_r>
 8001c98:	b1c0      	cbz	r0, 8001ccc <_vfiprintf_r+0x78>
 8001c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c9c:	07dc      	lsls	r4, r3, #31
 8001c9e:	d50e      	bpl.n	8001cbe <_vfiprintf_r+0x6a>
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	b01d      	add	sp, #116	; 0x74
 8001ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001caa:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <_vfiprintf_r+0x244>)
 8001cac:	429d      	cmp	r5, r3
 8001cae:	d101      	bne.n	8001cb4 <_vfiprintf_r+0x60>
 8001cb0:	68b5      	ldr	r5, [r6, #8]
 8001cb2:	e7df      	b.n	8001c74 <_vfiprintf_r+0x20>
 8001cb4:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <_vfiprintf_r+0x248>)
 8001cb6:	429d      	cmp	r5, r3
 8001cb8:	bf08      	it	eq
 8001cba:	68f5      	ldreq	r5, [r6, #12]
 8001cbc:	e7da      	b.n	8001c74 <_vfiprintf_r+0x20>
 8001cbe:	89ab      	ldrh	r3, [r5, #12]
 8001cc0:	0598      	lsls	r0, r3, #22
 8001cc2:	d4ed      	bmi.n	8001ca0 <_vfiprintf_r+0x4c>
 8001cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cc6:	f000 fd18 	bl	80026fa <__retarget_lock_release_recursive>
 8001cca:	e7e9      	b.n	8001ca0 <_vfiprintf_r+0x4c>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cd6:	2330      	movs	r3, #48	; 0x30
 8001cd8:	f04f 0901 	mov.w	r9, #1
 8001cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ce0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001ea0 <_vfiprintf_r+0x24c>
 8001ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ce8:	4623      	mov	r3, r4
 8001cea:	469a      	mov	sl, r3
 8001cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cf0:	b10a      	cbz	r2, 8001cf6 <_vfiprintf_r+0xa2>
 8001cf2:	2a25      	cmp	r2, #37	; 0x25
 8001cf4:	d1f9      	bne.n	8001cea <_vfiprintf_r+0x96>
 8001cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8001cfa:	d00b      	beq.n	8001d14 <_vfiprintf_r+0xc0>
 8001cfc:	465b      	mov	r3, fp
 8001cfe:	4622      	mov	r2, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7ff ff93 	bl	8001c2e <__sfputs_r>
 8001d08:	3001      	adds	r0, #1
 8001d0a:	f000 80aa 	beq.w	8001e62 <_vfiprintf_r+0x20e>
 8001d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d10:	445a      	add	r2, fp
 8001d12:	9209      	str	r2, [sp, #36]	; 0x24
 8001d14:	f89a 3000 	ldrb.w	r3, [sl]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a2 	beq.w	8001e62 <_vfiprintf_r+0x20e>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d28:	f10a 0a01 	add.w	sl, sl, #1
 8001d2c:	9304      	str	r3, [sp, #16]
 8001d2e:	9307      	str	r3, [sp, #28]
 8001d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d34:	931a      	str	r3, [sp, #104]	; 0x68
 8001d36:	4654      	mov	r4, sl
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d3e:	4858      	ldr	r0, [pc, #352]	; (8001ea0 <_vfiprintf_r+0x24c>)
 8001d40:	f000 fd42 	bl	80027c8 <memchr>
 8001d44:	9a04      	ldr	r2, [sp, #16]
 8001d46:	b9d8      	cbnz	r0, 8001d80 <_vfiprintf_r+0x12c>
 8001d48:	06d1      	lsls	r1, r2, #27
 8001d4a:	bf44      	itt	mi
 8001d4c:	2320      	movmi	r3, #32
 8001d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d52:	0713      	lsls	r3, r2, #28
 8001d54:	bf44      	itt	mi
 8001d56:	232b      	movmi	r3, #43	; 0x2b
 8001d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d60:	2b2a      	cmp	r3, #42	; 0x2a
 8001d62:	d015      	beq.n	8001d90 <_vfiprintf_r+0x13c>
 8001d64:	4654      	mov	r4, sl
 8001d66:	2000      	movs	r0, #0
 8001d68:	f04f 0c0a 	mov.w	ip, #10
 8001d6c:	9a07      	ldr	r2, [sp, #28]
 8001d6e:	4621      	mov	r1, r4
 8001d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d74:	3b30      	subs	r3, #48	; 0x30
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d94e      	bls.n	8001e18 <_vfiprintf_r+0x1c4>
 8001d7a:	b1b0      	cbz	r0, 8001daa <_vfiprintf_r+0x156>
 8001d7c:	9207      	str	r2, [sp, #28]
 8001d7e:	e014      	b.n	8001daa <_vfiprintf_r+0x156>
 8001d80:	eba0 0308 	sub.w	r3, r0, r8
 8001d84:	fa09 f303 	lsl.w	r3, r9, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	46a2      	mov	sl, r4
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	e7d2      	b.n	8001d36 <_vfiprintf_r+0xe2>
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	1d19      	adds	r1, r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	9103      	str	r1, [sp, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bfbb      	ittet	lt
 8001d9c:	425b      	neglt	r3, r3
 8001d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8001da2:	9307      	strge	r3, [sp, #28]
 8001da4:	9307      	strlt	r3, [sp, #28]
 8001da6:	bfb8      	it	lt
 8001da8:	9204      	strlt	r2, [sp, #16]
 8001daa:	7823      	ldrb	r3, [r4, #0]
 8001dac:	2b2e      	cmp	r3, #46	; 0x2e
 8001dae:	d10c      	bne.n	8001dca <_vfiprintf_r+0x176>
 8001db0:	7863      	ldrb	r3, [r4, #1]
 8001db2:	2b2a      	cmp	r3, #42	; 0x2a
 8001db4:	d135      	bne.n	8001e22 <_vfiprintf_r+0x1ce>
 8001db6:	9b03      	ldr	r3, [sp, #12]
 8001db8:	3402      	adds	r4, #2
 8001dba:	1d1a      	adds	r2, r3, #4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	9203      	str	r2, [sp, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bfb8      	it	lt
 8001dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dc8:	9305      	str	r3, [sp, #20]
 8001dca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001ea4 <_vfiprintf_r+0x250>
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4650      	mov	r0, sl
 8001dd2:	7821      	ldrb	r1, [r4, #0]
 8001dd4:	f000 fcf8 	bl	80027c8 <memchr>
 8001dd8:	b140      	cbz	r0, 8001dec <_vfiprintf_r+0x198>
 8001dda:	2340      	movs	r3, #64	; 0x40
 8001ddc:	eba0 000a 	sub.w	r0, r0, sl
 8001de0:	fa03 f000 	lsl.w	r0, r3, r0
 8001de4:	9b04      	ldr	r3, [sp, #16]
 8001de6:	3401      	adds	r4, #1
 8001de8:	4303      	orrs	r3, r0
 8001dea:	9304      	str	r3, [sp, #16]
 8001dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001df0:	2206      	movs	r2, #6
 8001df2:	482d      	ldr	r0, [pc, #180]	; (8001ea8 <_vfiprintf_r+0x254>)
 8001df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001df8:	f000 fce6 	bl	80027c8 <memchr>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d03f      	beq.n	8001e80 <_vfiprintf_r+0x22c>
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <_vfiprintf_r+0x258>)
 8001e02:	bb1b      	cbnz	r3, 8001e4c <_vfiprintf_r+0x1f8>
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	3307      	adds	r3, #7
 8001e08:	f023 0307 	bic.w	r3, r3, #7
 8001e0c:	3308      	adds	r3, #8
 8001e0e:	9303      	str	r3, [sp, #12]
 8001e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e12:	443b      	add	r3, r7
 8001e14:	9309      	str	r3, [sp, #36]	; 0x24
 8001e16:	e767      	b.n	8001ce8 <_vfiprintf_r+0x94>
 8001e18:	460c      	mov	r4, r1
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e20:	e7a5      	b.n	8001d6e <_vfiprintf_r+0x11a>
 8001e22:	2300      	movs	r3, #0
 8001e24:	f04f 0c0a 	mov.w	ip, #10
 8001e28:	4619      	mov	r1, r3
 8001e2a:	3401      	adds	r4, #1
 8001e2c:	9305      	str	r3, [sp, #20]
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e34:	3a30      	subs	r2, #48	; 0x30
 8001e36:	2a09      	cmp	r2, #9
 8001e38:	d903      	bls.n	8001e42 <_vfiprintf_r+0x1ee>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0c5      	beq.n	8001dca <_vfiprintf_r+0x176>
 8001e3e:	9105      	str	r1, [sp, #20]
 8001e40:	e7c3      	b.n	8001dca <_vfiprintf_r+0x176>
 8001e42:	4604      	mov	r4, r0
 8001e44:	2301      	movs	r3, #1
 8001e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e4a:	e7f0      	b.n	8001e2e <_vfiprintf_r+0x1da>
 8001e4c:	ab03      	add	r3, sp, #12
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	462a      	mov	r2, r5
 8001e52:	4630      	mov	r0, r6
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <_vfiprintf_r+0x25c>)
 8001e56:	a904      	add	r1, sp, #16
 8001e58:	f3af 8000 	nop.w
 8001e5c:	4607      	mov	r7, r0
 8001e5e:	1c78      	adds	r0, r7, #1
 8001e60:	d1d6      	bne.n	8001e10 <_vfiprintf_r+0x1bc>
 8001e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e64:	07d9      	lsls	r1, r3, #31
 8001e66:	d405      	bmi.n	8001e74 <_vfiprintf_r+0x220>
 8001e68:	89ab      	ldrh	r3, [r5, #12]
 8001e6a:	059a      	lsls	r2, r3, #22
 8001e6c:	d402      	bmi.n	8001e74 <_vfiprintf_r+0x220>
 8001e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e70:	f000 fc43 	bl	80026fa <__retarget_lock_release_recursive>
 8001e74:	89ab      	ldrh	r3, [r5, #12]
 8001e76:	065b      	lsls	r3, r3, #25
 8001e78:	f53f af12 	bmi.w	8001ca0 <_vfiprintf_r+0x4c>
 8001e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e7e:	e711      	b.n	8001ca4 <_vfiprintf_r+0x50>
 8001e80:	ab03      	add	r3, sp, #12
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	462a      	mov	r2, r5
 8001e86:	4630      	mov	r0, r6
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <_vfiprintf_r+0x25c>)
 8001e8a:	a904      	add	r1, sp, #16
 8001e8c:	f000 f882 	bl	8001f94 <_printf_i>
 8001e90:	e7e4      	b.n	8001e5c <_vfiprintf_r+0x208>
 8001e92:	bf00      	nop
 8001e94:	08002b24 	.word	0x08002b24
 8001e98:	08002b44 	.word	0x08002b44
 8001e9c:	08002b04 	.word	0x08002b04
 8001ea0:	08002ace 	.word	0x08002ace
 8001ea4:	08002ad4 	.word	0x08002ad4
 8001ea8:	08002ad8 	.word	0x08002ad8
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	08001c2f 	.word	0x08001c2f

08001eb4 <_printf_common>:
 8001eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb8:	4616      	mov	r6, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	688a      	ldr	r2, [r1, #8]
 8001ebe:	690b      	ldr	r3, [r1, #16]
 8001ec0:	4607      	mov	r7, r0
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	bfb8      	it	lt
 8001ec6:	4613      	movlt	r3, r2
 8001ec8:	6033      	str	r3, [r6, #0]
 8001eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ece:	460c      	mov	r4, r1
 8001ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ed4:	b10a      	cbz	r2, 8001eda <_printf_common+0x26>
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	6033      	str	r3, [r6, #0]
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	0699      	lsls	r1, r3, #26
 8001ede:	bf42      	ittt	mi
 8001ee0:	6833      	ldrmi	r3, [r6, #0]
 8001ee2:	3302      	addmi	r3, #2
 8001ee4:	6033      	strmi	r3, [r6, #0]
 8001ee6:	6825      	ldr	r5, [r4, #0]
 8001ee8:	f015 0506 	ands.w	r5, r5, #6
 8001eec:	d106      	bne.n	8001efc <_printf_common+0x48>
 8001eee:	f104 0a19 	add.w	sl, r4, #25
 8001ef2:	68e3      	ldr	r3, [r4, #12]
 8001ef4:	6832      	ldr	r2, [r6, #0]
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	42ab      	cmp	r3, r5
 8001efa:	dc28      	bgt.n	8001f4e <_printf_common+0x9a>
 8001efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f00:	1e13      	subs	r3, r2, #0
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	bf18      	it	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	0692      	lsls	r2, r2, #26
 8001f0a:	d42d      	bmi.n	8001f68 <_printf_common+0xb4>
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	4638      	mov	r0, r7
 8001f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f14:	47c0      	blx	r8
 8001f16:	3001      	adds	r0, #1
 8001f18:	d020      	beq.n	8001f5c <_printf_common+0xa8>
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	68e5      	ldr	r5, [r4, #12]
 8001f1e:	f003 0306 	and.w	r3, r3, #6
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf18      	it	ne
 8001f26:	2500      	movne	r5, #0
 8001f28:	6832      	ldr	r2, [r6, #0]
 8001f2a:	f04f 0600 	mov.w	r6, #0
 8001f2e:	68a3      	ldr	r3, [r4, #8]
 8001f30:	bf08      	it	eq
 8001f32:	1aad      	subeq	r5, r5, r2
 8001f34:	6922      	ldr	r2, [r4, #16]
 8001f36:	bf08      	it	eq
 8001f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bfc4      	itt	gt
 8001f40:	1a9b      	subgt	r3, r3, r2
 8001f42:	18ed      	addgt	r5, r5, r3
 8001f44:	341a      	adds	r4, #26
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d11a      	bne.n	8001f80 <_printf_common+0xcc>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e008      	b.n	8001f60 <_printf_common+0xac>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	4652      	mov	r2, sl
 8001f52:	4649      	mov	r1, r9
 8001f54:	4638      	mov	r0, r7
 8001f56:	47c0      	blx	r8
 8001f58:	3001      	adds	r0, #1
 8001f5a:	d103      	bne.n	8001f64 <_printf_common+0xb0>
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f64:	3501      	adds	r5, #1
 8001f66:	e7c4      	b.n	8001ef2 <_printf_common+0x3e>
 8001f68:	2030      	movs	r0, #48	; 0x30
 8001f6a:	18e1      	adds	r1, r4, r3
 8001f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f76:	4422      	add	r2, r4
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f7e:	e7c5      	b.n	8001f0c <_printf_common+0x58>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4622      	mov	r2, r4
 8001f84:	4649      	mov	r1, r9
 8001f86:	4638      	mov	r0, r7
 8001f88:	47c0      	blx	r8
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	d0e6      	beq.n	8001f5c <_printf_common+0xa8>
 8001f8e:	3601      	adds	r6, #1
 8001f90:	e7d9      	b.n	8001f46 <_printf_common+0x92>
	...

08001f94 <_printf_i>:
 8001f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f98:	7e0f      	ldrb	r7, [r1, #24]
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	2f78      	cmp	r7, #120	; 0x78
 8001f9e:	4680      	mov	r8, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001faa:	d807      	bhi.n	8001fbc <_printf_i+0x28>
 8001fac:	2f62      	cmp	r7, #98	; 0x62
 8001fae:	d80a      	bhi.n	8001fc6 <_printf_i+0x32>
 8001fb0:	2f00      	cmp	r7, #0
 8001fb2:	f000 80d9 	beq.w	8002168 <_printf_i+0x1d4>
 8001fb6:	2f58      	cmp	r7, #88	; 0x58
 8001fb8:	f000 80a4 	beq.w	8002104 <_printf_i+0x170>
 8001fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fc4:	e03a      	b.n	800203c <_printf_i+0xa8>
 8001fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fca:	2b15      	cmp	r3, #21
 8001fcc:	d8f6      	bhi.n	8001fbc <_printf_i+0x28>
 8001fce:	a101      	add	r1, pc, #4	; (adr r1, 8001fd4 <_printf_i+0x40>)
 8001fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fd4:	0800202d 	.word	0x0800202d
 8001fd8:	08002041 	.word	0x08002041
 8001fdc:	08001fbd 	.word	0x08001fbd
 8001fe0:	08001fbd 	.word	0x08001fbd
 8001fe4:	08001fbd 	.word	0x08001fbd
 8001fe8:	08001fbd 	.word	0x08001fbd
 8001fec:	08002041 	.word	0x08002041
 8001ff0:	08001fbd 	.word	0x08001fbd
 8001ff4:	08001fbd 	.word	0x08001fbd
 8001ff8:	08001fbd 	.word	0x08001fbd
 8001ffc:	08001fbd 	.word	0x08001fbd
 8002000:	0800214f 	.word	0x0800214f
 8002004:	08002071 	.word	0x08002071
 8002008:	08002131 	.word	0x08002131
 800200c:	08001fbd 	.word	0x08001fbd
 8002010:	08001fbd 	.word	0x08001fbd
 8002014:	08002171 	.word	0x08002171
 8002018:	08001fbd 	.word	0x08001fbd
 800201c:	08002071 	.word	0x08002071
 8002020:	08001fbd 	.word	0x08001fbd
 8002024:	08001fbd 	.word	0x08001fbd
 8002028:	08002139 	.word	0x08002139
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	602a      	str	r2, [r5, #0]
 8002034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800203c:	2301      	movs	r3, #1
 800203e:	e0a4      	b.n	800218a <_printf_i+0x1f6>
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	6829      	ldr	r1, [r5, #0]
 8002044:	0606      	lsls	r6, r0, #24
 8002046:	f101 0304 	add.w	r3, r1, #4
 800204a:	d50a      	bpl.n	8002062 <_printf_i+0xce>
 800204c:	680e      	ldr	r6, [r1, #0]
 800204e:	602b      	str	r3, [r5, #0]
 8002050:	2e00      	cmp	r6, #0
 8002052:	da03      	bge.n	800205c <_printf_i+0xc8>
 8002054:	232d      	movs	r3, #45	; 0x2d
 8002056:	4276      	negs	r6, r6
 8002058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205c:	230a      	movs	r3, #10
 800205e:	485e      	ldr	r0, [pc, #376]	; (80021d8 <_printf_i+0x244>)
 8002060:	e019      	b.n	8002096 <_printf_i+0x102>
 8002062:	680e      	ldr	r6, [r1, #0]
 8002064:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002068:	602b      	str	r3, [r5, #0]
 800206a:	bf18      	it	ne
 800206c:	b236      	sxthne	r6, r6
 800206e:	e7ef      	b.n	8002050 <_printf_i+0xbc>
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	6820      	ldr	r0, [r4, #0]
 8002074:	1d19      	adds	r1, r3, #4
 8002076:	6029      	str	r1, [r5, #0]
 8002078:	0601      	lsls	r1, r0, #24
 800207a:	d501      	bpl.n	8002080 <_printf_i+0xec>
 800207c:	681e      	ldr	r6, [r3, #0]
 800207e:	e002      	b.n	8002086 <_printf_i+0xf2>
 8002080:	0646      	lsls	r6, r0, #25
 8002082:	d5fb      	bpl.n	800207c <_printf_i+0xe8>
 8002084:	881e      	ldrh	r6, [r3, #0]
 8002086:	2f6f      	cmp	r7, #111	; 0x6f
 8002088:	bf0c      	ite	eq
 800208a:	2308      	moveq	r3, #8
 800208c:	230a      	movne	r3, #10
 800208e:	4852      	ldr	r0, [pc, #328]	; (80021d8 <_printf_i+0x244>)
 8002090:	2100      	movs	r1, #0
 8002092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002096:	6865      	ldr	r5, [r4, #4]
 8002098:	2d00      	cmp	r5, #0
 800209a:	bfa8      	it	ge
 800209c:	6821      	ldrge	r1, [r4, #0]
 800209e:	60a5      	str	r5, [r4, #8]
 80020a0:	bfa4      	itt	ge
 80020a2:	f021 0104 	bicge.w	r1, r1, #4
 80020a6:	6021      	strge	r1, [r4, #0]
 80020a8:	b90e      	cbnz	r6, 80020ae <_printf_i+0x11a>
 80020aa:	2d00      	cmp	r5, #0
 80020ac:	d04d      	beq.n	800214a <_printf_i+0x1b6>
 80020ae:	4615      	mov	r5, r2
 80020b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80020b4:	fb03 6711 	mls	r7, r3, r1, r6
 80020b8:	5dc7      	ldrb	r7, [r0, r7]
 80020ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020be:	4637      	mov	r7, r6
 80020c0:	42bb      	cmp	r3, r7
 80020c2:	460e      	mov	r6, r1
 80020c4:	d9f4      	bls.n	80020b0 <_printf_i+0x11c>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d10b      	bne.n	80020e2 <_printf_i+0x14e>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	07de      	lsls	r6, r3, #31
 80020ce:	d508      	bpl.n	80020e2 <_printf_i+0x14e>
 80020d0:	6923      	ldr	r3, [r4, #16]
 80020d2:	6861      	ldr	r1, [r4, #4]
 80020d4:	4299      	cmp	r1, r3
 80020d6:	bfde      	ittt	le
 80020d8:	2330      	movle	r3, #48	; 0x30
 80020da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020e2:	1b52      	subs	r2, r2, r5
 80020e4:	6122      	str	r2, [r4, #16]
 80020e6:	464b      	mov	r3, r9
 80020e8:	4621      	mov	r1, r4
 80020ea:	4640      	mov	r0, r8
 80020ec:	f8cd a000 	str.w	sl, [sp]
 80020f0:	aa03      	add	r2, sp, #12
 80020f2:	f7ff fedf 	bl	8001eb4 <_printf_common>
 80020f6:	3001      	adds	r0, #1
 80020f8:	d14c      	bne.n	8002194 <_printf_i+0x200>
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
 80020fe:	b004      	add	sp, #16
 8002100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002104:	4834      	ldr	r0, [pc, #208]	; (80021d8 <_printf_i+0x244>)
 8002106:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800210a:	6829      	ldr	r1, [r5, #0]
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002112:	6029      	str	r1, [r5, #0]
 8002114:	061d      	lsls	r5, r3, #24
 8002116:	d514      	bpl.n	8002142 <_printf_i+0x1ae>
 8002118:	07df      	lsls	r7, r3, #31
 800211a:	bf44      	itt	mi
 800211c:	f043 0320 	orrmi.w	r3, r3, #32
 8002120:	6023      	strmi	r3, [r4, #0]
 8002122:	b91e      	cbnz	r6, 800212c <_printf_i+0x198>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f023 0320 	bic.w	r3, r3, #32
 800212a:	6023      	str	r3, [r4, #0]
 800212c:	2310      	movs	r3, #16
 800212e:	e7af      	b.n	8002090 <_printf_i+0xfc>
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	f043 0320 	orr.w	r3, r3, #32
 8002136:	6023      	str	r3, [r4, #0]
 8002138:	2378      	movs	r3, #120	; 0x78
 800213a:	4828      	ldr	r0, [pc, #160]	; (80021dc <_printf_i+0x248>)
 800213c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002140:	e7e3      	b.n	800210a <_printf_i+0x176>
 8002142:	0659      	lsls	r1, r3, #25
 8002144:	bf48      	it	mi
 8002146:	b2b6      	uxthmi	r6, r6
 8002148:	e7e6      	b.n	8002118 <_printf_i+0x184>
 800214a:	4615      	mov	r5, r2
 800214c:	e7bb      	b.n	80020c6 <_printf_i+0x132>
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	6826      	ldr	r6, [r4, #0]
 8002152:	1d18      	adds	r0, r3, #4
 8002154:	6961      	ldr	r1, [r4, #20]
 8002156:	6028      	str	r0, [r5, #0]
 8002158:	0635      	lsls	r5, r6, #24
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	d501      	bpl.n	8002162 <_printf_i+0x1ce>
 800215e:	6019      	str	r1, [r3, #0]
 8002160:	e002      	b.n	8002168 <_printf_i+0x1d4>
 8002162:	0670      	lsls	r0, r6, #25
 8002164:	d5fb      	bpl.n	800215e <_printf_i+0x1ca>
 8002166:	8019      	strh	r1, [r3, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	4615      	mov	r5, r2
 800216c:	6123      	str	r3, [r4, #16]
 800216e:	e7ba      	b.n	80020e6 <_printf_i+0x152>
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	1d1a      	adds	r2, r3, #4
 8002176:	602a      	str	r2, [r5, #0]
 8002178:	681d      	ldr	r5, [r3, #0]
 800217a:	6862      	ldr	r2, [r4, #4]
 800217c:	4628      	mov	r0, r5
 800217e:	f000 fb23 	bl	80027c8 <memchr>
 8002182:	b108      	cbz	r0, 8002188 <_printf_i+0x1f4>
 8002184:	1b40      	subs	r0, r0, r5
 8002186:	6060      	str	r0, [r4, #4]
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	6123      	str	r3, [r4, #16]
 800218c:	2300      	movs	r3, #0
 800218e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002192:	e7a8      	b.n	80020e6 <_printf_i+0x152>
 8002194:	462a      	mov	r2, r5
 8002196:	4649      	mov	r1, r9
 8002198:	4640      	mov	r0, r8
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	47d0      	blx	sl
 800219e:	3001      	adds	r0, #1
 80021a0:	d0ab      	beq.n	80020fa <_printf_i+0x166>
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	079b      	lsls	r3, r3, #30
 80021a6:	d413      	bmi.n	80021d0 <_printf_i+0x23c>
 80021a8:	68e0      	ldr	r0, [r4, #12]
 80021aa:	9b03      	ldr	r3, [sp, #12]
 80021ac:	4298      	cmp	r0, r3
 80021ae:	bfb8      	it	lt
 80021b0:	4618      	movlt	r0, r3
 80021b2:	e7a4      	b.n	80020fe <_printf_i+0x16a>
 80021b4:	2301      	movs	r3, #1
 80021b6:	4632      	mov	r2, r6
 80021b8:	4649      	mov	r1, r9
 80021ba:	4640      	mov	r0, r8
 80021bc:	47d0      	blx	sl
 80021be:	3001      	adds	r0, #1
 80021c0:	d09b      	beq.n	80020fa <_printf_i+0x166>
 80021c2:	3501      	adds	r5, #1
 80021c4:	68e3      	ldr	r3, [r4, #12]
 80021c6:	9903      	ldr	r1, [sp, #12]
 80021c8:	1a5b      	subs	r3, r3, r1
 80021ca:	42ab      	cmp	r3, r5
 80021cc:	dcf2      	bgt.n	80021b4 <_printf_i+0x220>
 80021ce:	e7eb      	b.n	80021a8 <_printf_i+0x214>
 80021d0:	2500      	movs	r5, #0
 80021d2:	f104 0619 	add.w	r6, r4, #25
 80021d6:	e7f5      	b.n	80021c4 <_printf_i+0x230>
 80021d8:	08002adf 	.word	0x08002adf
 80021dc:	08002af0 	.word	0x08002af0

080021e0 <_sbrk_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	2300      	movs	r3, #0
 80021e4:	4d05      	ldr	r5, [pc, #20]	; (80021fc <_sbrk_r+0x1c>)
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	602b      	str	r3, [r5, #0]
 80021ec:	f7fe fac4 	bl	8000778 <_sbrk>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d102      	bne.n	80021fa <_sbrk_r+0x1a>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	b103      	cbz	r3, 80021fa <_sbrk_r+0x1a>
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	20000124 	.word	0x20000124

08002200 <__swbuf_r>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	460e      	mov	r6, r1
 8002204:	4614      	mov	r4, r2
 8002206:	4605      	mov	r5, r0
 8002208:	b118      	cbz	r0, 8002212 <__swbuf_r+0x12>
 800220a:	6983      	ldr	r3, [r0, #24]
 800220c:	b90b      	cbnz	r3, 8002212 <__swbuf_r+0x12>
 800220e:	f000 f9d5 	bl	80025bc <__sinit>
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <__swbuf_r+0x98>)
 8002214:	429c      	cmp	r4, r3
 8002216:	d12b      	bne.n	8002270 <__swbuf_r+0x70>
 8002218:	686c      	ldr	r4, [r5, #4]
 800221a:	69a3      	ldr	r3, [r4, #24]
 800221c:	60a3      	str	r3, [r4, #8]
 800221e:	89a3      	ldrh	r3, [r4, #12]
 8002220:	071a      	lsls	r2, r3, #28
 8002222:	d52f      	bpl.n	8002284 <__swbuf_r+0x84>
 8002224:	6923      	ldr	r3, [r4, #16]
 8002226:	b36b      	cbz	r3, 8002284 <__swbuf_r+0x84>
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	b2f6      	uxtb	r6, r6
 800222e:	1ac0      	subs	r0, r0, r3
 8002230:	6963      	ldr	r3, [r4, #20]
 8002232:	4637      	mov	r7, r6
 8002234:	4283      	cmp	r3, r0
 8002236:	dc04      	bgt.n	8002242 <__swbuf_r+0x42>
 8002238:	4621      	mov	r1, r4
 800223a:	4628      	mov	r0, r5
 800223c:	f000 f92a 	bl	8002494 <_fflush_r>
 8002240:	bb30      	cbnz	r0, 8002290 <__swbuf_r+0x90>
 8002242:	68a3      	ldr	r3, [r4, #8]
 8002244:	3001      	adds	r0, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	60a3      	str	r3, [r4, #8]
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	6022      	str	r2, [r4, #0]
 8002250:	701e      	strb	r6, [r3, #0]
 8002252:	6963      	ldr	r3, [r4, #20]
 8002254:	4283      	cmp	r3, r0
 8002256:	d004      	beq.n	8002262 <__swbuf_r+0x62>
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	07db      	lsls	r3, r3, #31
 800225c:	d506      	bpl.n	800226c <__swbuf_r+0x6c>
 800225e:	2e0a      	cmp	r6, #10
 8002260:	d104      	bne.n	800226c <__swbuf_r+0x6c>
 8002262:	4621      	mov	r1, r4
 8002264:	4628      	mov	r0, r5
 8002266:	f000 f915 	bl	8002494 <_fflush_r>
 800226a:	b988      	cbnz	r0, 8002290 <__swbuf_r+0x90>
 800226c:	4638      	mov	r0, r7
 800226e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <__swbuf_r+0x9c>)
 8002272:	429c      	cmp	r4, r3
 8002274:	d101      	bne.n	800227a <__swbuf_r+0x7a>
 8002276:	68ac      	ldr	r4, [r5, #8]
 8002278:	e7cf      	b.n	800221a <__swbuf_r+0x1a>
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <__swbuf_r+0xa0>)
 800227c:	429c      	cmp	r4, r3
 800227e:	bf08      	it	eq
 8002280:	68ec      	ldreq	r4, [r5, #12]
 8002282:	e7ca      	b.n	800221a <__swbuf_r+0x1a>
 8002284:	4621      	mov	r1, r4
 8002286:	4628      	mov	r0, r5
 8002288:	f000 f80c 	bl	80022a4 <__swsetup_r>
 800228c:	2800      	cmp	r0, #0
 800228e:	d0cb      	beq.n	8002228 <__swbuf_r+0x28>
 8002290:	f04f 37ff 	mov.w	r7, #4294967295
 8002294:	e7ea      	b.n	800226c <__swbuf_r+0x6c>
 8002296:	bf00      	nop
 8002298:	08002b24 	.word	0x08002b24
 800229c:	08002b44 	.word	0x08002b44
 80022a0:	08002b04 	.word	0x08002b04

080022a4 <__swsetup_r>:
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <__swsetup_r+0xcc>)
 80022a6:	b570      	push	{r4, r5, r6, lr}
 80022a8:	681d      	ldr	r5, [r3, #0]
 80022aa:	4606      	mov	r6, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	b125      	cbz	r5, 80022ba <__swsetup_r+0x16>
 80022b0:	69ab      	ldr	r3, [r5, #24]
 80022b2:	b913      	cbnz	r3, 80022ba <__swsetup_r+0x16>
 80022b4:	4628      	mov	r0, r5
 80022b6:	f000 f981 	bl	80025bc <__sinit>
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <__swsetup_r+0xd0>)
 80022bc:	429c      	cmp	r4, r3
 80022be:	d10f      	bne.n	80022e0 <__swsetup_r+0x3c>
 80022c0:	686c      	ldr	r4, [r5, #4]
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022c8:	0719      	lsls	r1, r3, #28
 80022ca:	d42c      	bmi.n	8002326 <__swsetup_r+0x82>
 80022cc:	06dd      	lsls	r5, r3, #27
 80022ce:	d411      	bmi.n	80022f4 <__swsetup_r+0x50>
 80022d0:	2309      	movs	r3, #9
 80022d2:	6033      	str	r3, [r6, #0]
 80022d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	81a3      	strh	r3, [r4, #12]
 80022de:	e03e      	b.n	800235e <__swsetup_r+0xba>
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <__swsetup_r+0xd4>)
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d101      	bne.n	80022ea <__swsetup_r+0x46>
 80022e6:	68ac      	ldr	r4, [r5, #8]
 80022e8:	e7eb      	b.n	80022c2 <__swsetup_r+0x1e>
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <__swsetup_r+0xd8>)
 80022ec:	429c      	cmp	r4, r3
 80022ee:	bf08      	it	eq
 80022f0:	68ec      	ldreq	r4, [r5, #12]
 80022f2:	e7e6      	b.n	80022c2 <__swsetup_r+0x1e>
 80022f4:	0758      	lsls	r0, r3, #29
 80022f6:	d512      	bpl.n	800231e <__swsetup_r+0x7a>
 80022f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022fa:	b141      	cbz	r1, 800230e <__swsetup_r+0x6a>
 80022fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002300:	4299      	cmp	r1, r3
 8002302:	d002      	beq.n	800230a <__swsetup_r+0x66>
 8002304:	4630      	mov	r0, r6
 8002306:	f7ff fba1 	bl	8001a4c <_free_r>
 800230a:	2300      	movs	r3, #0
 800230c:	6363      	str	r3, [r4, #52]	; 0x34
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	2300      	movs	r3, #0
 8002318:	6063      	str	r3, [r4, #4]
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	81a3      	strh	r3, [r4, #12]
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	b94b      	cbnz	r3, 800233e <__swsetup_r+0x9a>
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002334:	d003      	beq.n	800233e <__swsetup_r+0x9a>
 8002336:	4621      	mov	r1, r4
 8002338:	4630      	mov	r0, r6
 800233a:	f000 fa05 	bl	8002748 <__smakebuf_r>
 800233e:	89a0      	ldrh	r0, [r4, #12]
 8002340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002344:	f010 0301 	ands.w	r3, r0, #1
 8002348:	d00a      	beq.n	8002360 <__swsetup_r+0xbc>
 800234a:	2300      	movs	r3, #0
 800234c:	60a3      	str	r3, [r4, #8]
 800234e:	6963      	ldr	r3, [r4, #20]
 8002350:	425b      	negs	r3, r3
 8002352:	61a3      	str	r3, [r4, #24]
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	b943      	cbnz	r3, 800236a <__swsetup_r+0xc6>
 8002358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800235c:	d1ba      	bne.n	80022d4 <__swsetup_r+0x30>
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	0781      	lsls	r1, r0, #30
 8002362:	bf58      	it	pl
 8002364:	6963      	ldrpl	r3, [r4, #20]
 8002366:	60a3      	str	r3, [r4, #8]
 8002368:	e7f4      	b.n	8002354 <__swsetup_r+0xb0>
 800236a:	2000      	movs	r0, #0
 800236c:	e7f7      	b.n	800235e <__swsetup_r+0xba>
 800236e:	bf00      	nop
 8002370:	2000004c 	.word	0x2000004c
 8002374:	08002b24 	.word	0x08002b24
 8002378:	08002b44 	.word	0x08002b44
 800237c:	08002b04 	.word	0x08002b04

08002380 <abort>:
 8002380:	2006      	movs	r0, #6
 8002382:	b508      	push	{r3, lr}
 8002384:	f000 fa62 	bl	800284c <raise>
 8002388:	2001      	movs	r0, #1
 800238a:	f7fe f981 	bl	8000690 <_exit>
	...

08002390 <__sflush_r>:
 8002390:	898a      	ldrh	r2, [r1, #12]
 8002392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002394:	4605      	mov	r5, r0
 8002396:	0710      	lsls	r0, r2, #28
 8002398:	460c      	mov	r4, r1
 800239a:	d457      	bmi.n	800244c <__sflush_r+0xbc>
 800239c:	684b      	ldr	r3, [r1, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	dc04      	bgt.n	80023ac <__sflush_r+0x1c>
 80023a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dc01      	bgt.n	80023ac <__sflush_r+0x1c>
 80023a8:	2000      	movs	r0, #0
 80023aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	d0fa      	beq.n	80023a8 <__sflush_r+0x18>
 80023b2:	2300      	movs	r3, #0
 80023b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023b8:	682f      	ldr	r7, [r5, #0]
 80023ba:	602b      	str	r3, [r5, #0]
 80023bc:	d032      	beq.n	8002424 <__sflush_r+0x94>
 80023be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	075a      	lsls	r2, r3, #29
 80023c4:	d505      	bpl.n	80023d2 <__sflush_r+0x42>
 80023c6:	6863      	ldr	r3, [r4, #4]
 80023c8:	1ac0      	subs	r0, r0, r3
 80023ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023cc:	b10b      	cbz	r3, 80023d2 <__sflush_r+0x42>
 80023ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d0:	1ac0      	subs	r0, r0, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	4602      	mov	r2, r0
 80023d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023d8:	4628      	mov	r0, r5
 80023da:	6a21      	ldr	r1, [r4, #32]
 80023dc:	47b0      	blx	r6
 80023de:	1c43      	adds	r3, r0, #1
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	d106      	bne.n	80023f2 <__sflush_r+0x62>
 80023e4:	6829      	ldr	r1, [r5, #0]
 80023e6:	291d      	cmp	r1, #29
 80023e8:	d82c      	bhi.n	8002444 <__sflush_r+0xb4>
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <__sflush_r+0x100>)
 80023ec:	40ca      	lsrs	r2, r1
 80023ee:	07d6      	lsls	r6, r2, #31
 80023f0:	d528      	bpl.n	8002444 <__sflush_r+0xb4>
 80023f2:	2200      	movs	r2, #0
 80023f4:	6062      	str	r2, [r4, #4]
 80023f6:	6922      	ldr	r2, [r4, #16]
 80023f8:	04d9      	lsls	r1, r3, #19
 80023fa:	6022      	str	r2, [r4, #0]
 80023fc:	d504      	bpl.n	8002408 <__sflush_r+0x78>
 80023fe:	1c42      	adds	r2, r0, #1
 8002400:	d101      	bne.n	8002406 <__sflush_r+0x76>
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	b903      	cbnz	r3, 8002408 <__sflush_r+0x78>
 8002406:	6560      	str	r0, [r4, #84]	; 0x54
 8002408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800240a:	602f      	str	r7, [r5, #0]
 800240c:	2900      	cmp	r1, #0
 800240e:	d0cb      	beq.n	80023a8 <__sflush_r+0x18>
 8002410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002414:	4299      	cmp	r1, r3
 8002416:	d002      	beq.n	800241e <__sflush_r+0x8e>
 8002418:	4628      	mov	r0, r5
 800241a:	f7ff fb17 	bl	8001a4c <_free_r>
 800241e:	2000      	movs	r0, #0
 8002420:	6360      	str	r0, [r4, #52]	; 0x34
 8002422:	e7c2      	b.n	80023aa <__sflush_r+0x1a>
 8002424:	6a21      	ldr	r1, [r4, #32]
 8002426:	2301      	movs	r3, #1
 8002428:	4628      	mov	r0, r5
 800242a:	47b0      	blx	r6
 800242c:	1c41      	adds	r1, r0, #1
 800242e:	d1c7      	bne.n	80023c0 <__sflush_r+0x30>
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0c4      	beq.n	80023c0 <__sflush_r+0x30>
 8002436:	2b1d      	cmp	r3, #29
 8002438:	d001      	beq.n	800243e <__sflush_r+0xae>
 800243a:	2b16      	cmp	r3, #22
 800243c:	d101      	bne.n	8002442 <__sflush_r+0xb2>
 800243e:	602f      	str	r7, [r5, #0]
 8002440:	e7b2      	b.n	80023a8 <__sflush_r+0x18>
 8002442:	89a3      	ldrh	r3, [r4, #12]
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	81a3      	strh	r3, [r4, #12]
 800244a:	e7ae      	b.n	80023aa <__sflush_r+0x1a>
 800244c:	690f      	ldr	r7, [r1, #16]
 800244e:	2f00      	cmp	r7, #0
 8002450:	d0aa      	beq.n	80023a8 <__sflush_r+0x18>
 8002452:	0793      	lsls	r3, r2, #30
 8002454:	bf18      	it	ne
 8002456:	2300      	movne	r3, #0
 8002458:	680e      	ldr	r6, [r1, #0]
 800245a:	bf08      	it	eq
 800245c:	694b      	ldreq	r3, [r1, #20]
 800245e:	1bf6      	subs	r6, r6, r7
 8002460:	600f      	str	r7, [r1, #0]
 8002462:	608b      	str	r3, [r1, #8]
 8002464:	2e00      	cmp	r6, #0
 8002466:	dd9f      	ble.n	80023a8 <__sflush_r+0x18>
 8002468:	4633      	mov	r3, r6
 800246a:	463a      	mov	r2, r7
 800246c:	4628      	mov	r0, r5
 800246e:	6a21      	ldr	r1, [r4, #32]
 8002470:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002474:	47e0      	blx	ip
 8002476:	2800      	cmp	r0, #0
 8002478:	dc06      	bgt.n	8002488 <__sflush_r+0xf8>
 800247a:	89a3      	ldrh	r3, [r4, #12]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002484:	81a3      	strh	r3, [r4, #12]
 8002486:	e790      	b.n	80023aa <__sflush_r+0x1a>
 8002488:	4407      	add	r7, r0
 800248a:	1a36      	subs	r6, r6, r0
 800248c:	e7ea      	b.n	8002464 <__sflush_r+0xd4>
 800248e:	bf00      	nop
 8002490:	20400001 	.word	0x20400001

08002494 <_fflush_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	690b      	ldr	r3, [r1, #16]
 8002498:	4605      	mov	r5, r0
 800249a:	460c      	mov	r4, r1
 800249c:	b913      	cbnz	r3, 80024a4 <_fflush_r+0x10>
 800249e:	2500      	movs	r5, #0
 80024a0:	4628      	mov	r0, r5
 80024a2:	bd38      	pop	{r3, r4, r5, pc}
 80024a4:	b118      	cbz	r0, 80024ae <_fflush_r+0x1a>
 80024a6:	6983      	ldr	r3, [r0, #24]
 80024a8:	b90b      	cbnz	r3, 80024ae <_fflush_r+0x1a>
 80024aa:	f000 f887 	bl	80025bc <__sinit>
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <_fflush_r+0x6c>)
 80024b0:	429c      	cmp	r4, r3
 80024b2:	d11b      	bne.n	80024ec <_fflush_r+0x58>
 80024b4:	686c      	ldr	r4, [r5, #4]
 80024b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0ef      	beq.n	800249e <_fflush_r+0xa>
 80024be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024c0:	07d0      	lsls	r0, r2, #31
 80024c2:	d404      	bmi.n	80024ce <_fflush_r+0x3a>
 80024c4:	0599      	lsls	r1, r3, #22
 80024c6:	d402      	bmi.n	80024ce <_fflush_r+0x3a>
 80024c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ca:	f000 f915 	bl	80026f8 <__retarget_lock_acquire_recursive>
 80024ce:	4628      	mov	r0, r5
 80024d0:	4621      	mov	r1, r4
 80024d2:	f7ff ff5d 	bl	8002390 <__sflush_r>
 80024d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024d8:	4605      	mov	r5, r0
 80024da:	07da      	lsls	r2, r3, #31
 80024dc:	d4e0      	bmi.n	80024a0 <_fflush_r+0xc>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	059b      	lsls	r3, r3, #22
 80024e2:	d4dd      	bmi.n	80024a0 <_fflush_r+0xc>
 80024e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024e6:	f000 f908 	bl	80026fa <__retarget_lock_release_recursive>
 80024ea:	e7d9      	b.n	80024a0 <_fflush_r+0xc>
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <_fflush_r+0x70>)
 80024ee:	429c      	cmp	r4, r3
 80024f0:	d101      	bne.n	80024f6 <_fflush_r+0x62>
 80024f2:	68ac      	ldr	r4, [r5, #8]
 80024f4:	e7df      	b.n	80024b6 <_fflush_r+0x22>
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <_fflush_r+0x74>)
 80024f8:	429c      	cmp	r4, r3
 80024fa:	bf08      	it	eq
 80024fc:	68ec      	ldreq	r4, [r5, #12]
 80024fe:	e7da      	b.n	80024b6 <_fflush_r+0x22>
 8002500:	08002b24 	.word	0x08002b24
 8002504:	08002b44 	.word	0x08002b44
 8002508:	08002b04 	.word	0x08002b04

0800250c <std>:
 800250c:	2300      	movs	r3, #0
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	e9c0 3300 	strd	r3, r3, [r0]
 8002516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800251a:	6083      	str	r3, [r0, #8]
 800251c:	8181      	strh	r1, [r0, #12]
 800251e:	6643      	str	r3, [r0, #100]	; 0x64
 8002520:	81c2      	strh	r2, [r0, #14]
 8002522:	6183      	str	r3, [r0, #24]
 8002524:	4619      	mov	r1, r3
 8002526:	2208      	movs	r2, #8
 8002528:	305c      	adds	r0, #92	; 0x5c
 800252a:	f7ff fa11 	bl	8001950 <memset>
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <std+0x38>)
 8002530:	6224      	str	r4, [r4, #32]
 8002532:	6263      	str	r3, [r4, #36]	; 0x24
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <std+0x3c>)
 8002536:	62a3      	str	r3, [r4, #40]	; 0x28
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <std+0x40>)
 800253a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <std+0x44>)
 800253e:	6323      	str	r3, [r4, #48]	; 0x30
 8002540:	bd10      	pop	{r4, pc}
 8002542:	bf00      	nop
 8002544:	08002885 	.word	0x08002885
 8002548:	080028a7 	.word	0x080028a7
 800254c:	080028df 	.word	0x080028df
 8002550:	08002903 	.word	0x08002903

08002554 <_cleanup_r>:
 8002554:	4901      	ldr	r1, [pc, #4]	; (800255c <_cleanup_r+0x8>)
 8002556:	f000 b8af 	b.w	80026b8 <_fwalk_reent>
 800255a:	bf00      	nop
 800255c:	08002495 	.word	0x08002495

08002560 <__sfmoreglue>:
 8002560:	2268      	movs	r2, #104	; 0x68
 8002562:	b570      	push	{r4, r5, r6, lr}
 8002564:	1e4d      	subs	r5, r1, #1
 8002566:	4355      	muls	r5, r2
 8002568:	460e      	mov	r6, r1
 800256a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800256e:	f7ff fad5 	bl	8001b1c <_malloc_r>
 8002572:	4604      	mov	r4, r0
 8002574:	b140      	cbz	r0, 8002588 <__sfmoreglue+0x28>
 8002576:	2100      	movs	r1, #0
 8002578:	e9c0 1600 	strd	r1, r6, [r0]
 800257c:	300c      	adds	r0, #12
 800257e:	60a0      	str	r0, [r4, #8]
 8002580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002584:	f7ff f9e4 	bl	8001950 <memset>
 8002588:	4620      	mov	r0, r4
 800258a:	bd70      	pop	{r4, r5, r6, pc}

0800258c <__sfp_lock_acquire>:
 800258c:	4801      	ldr	r0, [pc, #4]	; (8002594 <__sfp_lock_acquire+0x8>)
 800258e:	f000 b8b3 	b.w	80026f8 <__retarget_lock_acquire_recursive>
 8002592:	bf00      	nop
 8002594:	20000121 	.word	0x20000121

08002598 <__sfp_lock_release>:
 8002598:	4801      	ldr	r0, [pc, #4]	; (80025a0 <__sfp_lock_release+0x8>)
 800259a:	f000 b8ae 	b.w	80026fa <__retarget_lock_release_recursive>
 800259e:	bf00      	nop
 80025a0:	20000121 	.word	0x20000121

080025a4 <__sinit_lock_acquire>:
 80025a4:	4801      	ldr	r0, [pc, #4]	; (80025ac <__sinit_lock_acquire+0x8>)
 80025a6:	f000 b8a7 	b.w	80026f8 <__retarget_lock_acquire_recursive>
 80025aa:	bf00      	nop
 80025ac:	20000122 	.word	0x20000122

080025b0 <__sinit_lock_release>:
 80025b0:	4801      	ldr	r0, [pc, #4]	; (80025b8 <__sinit_lock_release+0x8>)
 80025b2:	f000 b8a2 	b.w	80026fa <__retarget_lock_release_recursive>
 80025b6:	bf00      	nop
 80025b8:	20000122 	.word	0x20000122

080025bc <__sinit>:
 80025bc:	b510      	push	{r4, lr}
 80025be:	4604      	mov	r4, r0
 80025c0:	f7ff fff0 	bl	80025a4 <__sinit_lock_acquire>
 80025c4:	69a3      	ldr	r3, [r4, #24]
 80025c6:	b11b      	cbz	r3, 80025d0 <__sinit+0x14>
 80025c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025cc:	f7ff bff0 	b.w	80025b0 <__sinit_lock_release>
 80025d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025d4:	6523      	str	r3, [r4, #80]	; 0x50
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <__sinit+0x68>)
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <__sinit+0x6c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80025de:	42a3      	cmp	r3, r4
 80025e0:	bf08      	it	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	4620      	mov	r0, r4
 80025e6:	bf08      	it	eq
 80025e8:	61a3      	streq	r3, [r4, #24]
 80025ea:	f000 f81f 	bl	800262c <__sfp>
 80025ee:	6060      	str	r0, [r4, #4]
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 f81b 	bl	800262c <__sfp>
 80025f6:	60a0      	str	r0, [r4, #8]
 80025f8:	4620      	mov	r0, r4
 80025fa:	f000 f817 	bl	800262c <__sfp>
 80025fe:	2200      	movs	r2, #0
 8002600:	2104      	movs	r1, #4
 8002602:	60e0      	str	r0, [r4, #12]
 8002604:	6860      	ldr	r0, [r4, #4]
 8002606:	f7ff ff81 	bl	800250c <std>
 800260a:	2201      	movs	r2, #1
 800260c:	2109      	movs	r1, #9
 800260e:	68a0      	ldr	r0, [r4, #8]
 8002610:	f7ff ff7c 	bl	800250c <std>
 8002614:	2202      	movs	r2, #2
 8002616:	2112      	movs	r1, #18
 8002618:	68e0      	ldr	r0, [r4, #12]
 800261a:	f7ff ff77 	bl	800250c <std>
 800261e:	2301      	movs	r3, #1
 8002620:	61a3      	str	r3, [r4, #24]
 8002622:	e7d1      	b.n	80025c8 <__sinit+0xc>
 8002624:	08002a1c 	.word	0x08002a1c
 8002628:	08002555 	.word	0x08002555

0800262c <__sfp>:
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262e:	4607      	mov	r7, r0
 8002630:	f7ff ffac 	bl	800258c <__sfp_lock_acquire>
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <__sfp+0x84>)
 8002636:	681e      	ldr	r6, [r3, #0]
 8002638:	69b3      	ldr	r3, [r6, #24]
 800263a:	b913      	cbnz	r3, 8002642 <__sfp+0x16>
 800263c:	4630      	mov	r0, r6
 800263e:	f7ff ffbd 	bl	80025bc <__sinit>
 8002642:	3648      	adds	r6, #72	; 0x48
 8002644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002648:	3b01      	subs	r3, #1
 800264a:	d503      	bpl.n	8002654 <__sfp+0x28>
 800264c:	6833      	ldr	r3, [r6, #0]
 800264e:	b30b      	cbz	r3, 8002694 <__sfp+0x68>
 8002650:	6836      	ldr	r6, [r6, #0]
 8002652:	e7f7      	b.n	8002644 <__sfp+0x18>
 8002654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002658:	b9d5      	cbnz	r5, 8002690 <__sfp+0x64>
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <__sfp+0x88>)
 800265c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002660:	60e3      	str	r3, [r4, #12]
 8002662:	6665      	str	r5, [r4, #100]	; 0x64
 8002664:	f000 f847 	bl	80026f6 <__retarget_lock_init_recursive>
 8002668:	f7ff ff96 	bl	8002598 <__sfp_lock_release>
 800266c:	2208      	movs	r2, #8
 800266e:	4629      	mov	r1, r5
 8002670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002678:	6025      	str	r5, [r4, #0]
 800267a:	61a5      	str	r5, [r4, #24]
 800267c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002680:	f7ff f966 	bl	8001950 <memset>
 8002684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800268c:	4620      	mov	r0, r4
 800268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002690:	3468      	adds	r4, #104	; 0x68
 8002692:	e7d9      	b.n	8002648 <__sfp+0x1c>
 8002694:	2104      	movs	r1, #4
 8002696:	4638      	mov	r0, r7
 8002698:	f7ff ff62 	bl	8002560 <__sfmoreglue>
 800269c:	4604      	mov	r4, r0
 800269e:	6030      	str	r0, [r6, #0]
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1d5      	bne.n	8002650 <__sfp+0x24>
 80026a4:	f7ff ff78 	bl	8002598 <__sfp_lock_release>
 80026a8:	230c      	movs	r3, #12
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	e7ee      	b.n	800268c <__sfp+0x60>
 80026ae:	bf00      	nop
 80026b0:	08002a1c 	.word	0x08002a1c
 80026b4:	ffff0001 	.word	0xffff0001

080026b8 <_fwalk_reent>:
 80026b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026bc:	4606      	mov	r6, r0
 80026be:	4688      	mov	r8, r1
 80026c0:	2700      	movs	r7, #0
 80026c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026ca:	f1b9 0901 	subs.w	r9, r9, #1
 80026ce:	d505      	bpl.n	80026dc <_fwalk_reent+0x24>
 80026d0:	6824      	ldr	r4, [r4, #0]
 80026d2:	2c00      	cmp	r4, #0
 80026d4:	d1f7      	bne.n	80026c6 <_fwalk_reent+0xe>
 80026d6:	4638      	mov	r0, r7
 80026d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026dc:	89ab      	ldrh	r3, [r5, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d907      	bls.n	80026f2 <_fwalk_reent+0x3a>
 80026e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026e6:	3301      	adds	r3, #1
 80026e8:	d003      	beq.n	80026f2 <_fwalk_reent+0x3a>
 80026ea:	4629      	mov	r1, r5
 80026ec:	4630      	mov	r0, r6
 80026ee:	47c0      	blx	r8
 80026f0:	4307      	orrs	r7, r0
 80026f2:	3568      	adds	r5, #104	; 0x68
 80026f4:	e7e9      	b.n	80026ca <_fwalk_reent+0x12>

080026f6 <__retarget_lock_init_recursive>:
 80026f6:	4770      	bx	lr

080026f8 <__retarget_lock_acquire_recursive>:
 80026f8:	4770      	bx	lr

080026fa <__retarget_lock_release_recursive>:
 80026fa:	4770      	bx	lr

080026fc <__swhatbuf_r>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	460e      	mov	r6, r1
 8002700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002704:	4614      	mov	r4, r2
 8002706:	2900      	cmp	r1, #0
 8002708:	461d      	mov	r5, r3
 800270a:	b096      	sub	sp, #88	; 0x58
 800270c:	da08      	bge.n	8002720 <__swhatbuf_r+0x24>
 800270e:	2200      	movs	r2, #0
 8002710:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002714:	602a      	str	r2, [r5, #0]
 8002716:	061a      	lsls	r2, r3, #24
 8002718:	d410      	bmi.n	800273c <__swhatbuf_r+0x40>
 800271a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271e:	e00e      	b.n	800273e <__swhatbuf_r+0x42>
 8002720:	466a      	mov	r2, sp
 8002722:	f000 f915 	bl	8002950 <_fstat_r>
 8002726:	2800      	cmp	r0, #0
 8002728:	dbf1      	blt.n	800270e <__swhatbuf_r+0x12>
 800272a:	9a01      	ldr	r2, [sp, #4]
 800272c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002730:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002734:	425a      	negs	r2, r3
 8002736:	415a      	adcs	r2, r3
 8002738:	602a      	str	r2, [r5, #0]
 800273a:	e7ee      	b.n	800271a <__swhatbuf_r+0x1e>
 800273c:	2340      	movs	r3, #64	; 0x40
 800273e:	2000      	movs	r0, #0
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	b016      	add	sp, #88	; 0x58
 8002744:	bd70      	pop	{r4, r5, r6, pc}
	...

08002748 <__smakebuf_r>:
 8002748:	898b      	ldrh	r3, [r1, #12]
 800274a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800274c:	079d      	lsls	r5, r3, #30
 800274e:	4606      	mov	r6, r0
 8002750:	460c      	mov	r4, r1
 8002752:	d507      	bpl.n	8002764 <__smakebuf_r+0x1c>
 8002754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	6123      	str	r3, [r4, #16]
 800275c:	2301      	movs	r3, #1
 800275e:	6163      	str	r3, [r4, #20]
 8002760:	b002      	add	sp, #8
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	466a      	mov	r2, sp
 8002766:	ab01      	add	r3, sp, #4
 8002768:	f7ff ffc8 	bl	80026fc <__swhatbuf_r>
 800276c:	9900      	ldr	r1, [sp, #0]
 800276e:	4605      	mov	r5, r0
 8002770:	4630      	mov	r0, r6
 8002772:	f7ff f9d3 	bl	8001b1c <_malloc_r>
 8002776:	b948      	cbnz	r0, 800278c <__smakebuf_r+0x44>
 8002778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800277c:	059a      	lsls	r2, r3, #22
 800277e:	d4ef      	bmi.n	8002760 <__smakebuf_r+0x18>
 8002780:	f023 0303 	bic.w	r3, r3, #3
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	e7e3      	b.n	8002754 <__smakebuf_r+0xc>
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <__smakebuf_r+0x7c>)
 800278e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002790:	89a3      	ldrh	r3, [r4, #12]
 8002792:	6020      	str	r0, [r4, #0]
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	81a3      	strh	r3, [r4, #12]
 800279a:	9b00      	ldr	r3, [sp, #0]
 800279c:	6120      	str	r0, [r4, #16]
 800279e:	6163      	str	r3, [r4, #20]
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	b15b      	cbz	r3, 80027bc <__smakebuf_r+0x74>
 80027a4:	4630      	mov	r0, r6
 80027a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027aa:	f000 f8e3 	bl	8002974 <_isatty_r>
 80027ae:	b128      	cbz	r0, 80027bc <__smakebuf_r+0x74>
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	81a3      	strh	r3, [r4, #12]
 80027bc:	89a0      	ldrh	r0, [r4, #12]
 80027be:	4305      	orrs	r5, r0
 80027c0:	81a5      	strh	r5, [r4, #12]
 80027c2:	e7cd      	b.n	8002760 <__smakebuf_r+0x18>
 80027c4:	08002555 	.word	0x08002555

080027c8 <memchr>:
 80027c8:	4603      	mov	r3, r0
 80027ca:	b510      	push	{r4, lr}
 80027cc:	b2c9      	uxtb	r1, r1
 80027ce:	4402      	add	r2, r0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	d101      	bne.n	80027da <memchr+0x12>
 80027d6:	2000      	movs	r0, #0
 80027d8:	e003      	b.n	80027e2 <memchr+0x1a>
 80027da:	7804      	ldrb	r4, [r0, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	428c      	cmp	r4, r1
 80027e0:	d1f6      	bne.n	80027d0 <memchr+0x8>
 80027e2:	bd10      	pop	{r4, pc}

080027e4 <__malloc_lock>:
 80027e4:	4801      	ldr	r0, [pc, #4]	; (80027ec <__malloc_lock+0x8>)
 80027e6:	f7ff bf87 	b.w	80026f8 <__retarget_lock_acquire_recursive>
 80027ea:	bf00      	nop
 80027ec:	20000120 	.word	0x20000120

080027f0 <__malloc_unlock>:
 80027f0:	4801      	ldr	r0, [pc, #4]	; (80027f8 <__malloc_unlock+0x8>)
 80027f2:	f7ff bf82 	b.w	80026fa <__retarget_lock_release_recursive>
 80027f6:	bf00      	nop
 80027f8:	20000120 	.word	0x20000120

080027fc <_raise_r>:
 80027fc:	291f      	cmp	r1, #31
 80027fe:	b538      	push	{r3, r4, r5, lr}
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	d904      	bls.n	8002810 <_raise_r+0x14>
 8002806:	2316      	movs	r3, #22
 8002808:	6003      	str	r3, [r0, #0]
 800280a:	f04f 30ff 	mov.w	r0, #4294967295
 800280e:	bd38      	pop	{r3, r4, r5, pc}
 8002810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002812:	b112      	cbz	r2, 800281a <_raise_r+0x1e>
 8002814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002818:	b94b      	cbnz	r3, 800282e <_raise_r+0x32>
 800281a:	4620      	mov	r0, r4
 800281c:	f000 f830 	bl	8002880 <_getpid_r>
 8002820:	462a      	mov	r2, r5
 8002822:	4601      	mov	r1, r0
 8002824:	4620      	mov	r0, r4
 8002826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800282a:	f000 b817 	b.w	800285c <_kill_r>
 800282e:	2b01      	cmp	r3, #1
 8002830:	d00a      	beq.n	8002848 <_raise_r+0x4c>
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	d103      	bne.n	800283e <_raise_r+0x42>
 8002836:	2316      	movs	r3, #22
 8002838:	6003      	str	r3, [r0, #0]
 800283a:	2001      	movs	r0, #1
 800283c:	e7e7      	b.n	800280e <_raise_r+0x12>
 800283e:	2400      	movs	r4, #0
 8002840:	4628      	mov	r0, r5
 8002842:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002846:	4798      	blx	r3
 8002848:	2000      	movs	r0, #0
 800284a:	e7e0      	b.n	800280e <_raise_r+0x12>

0800284c <raise>:
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <raise+0xc>)
 800284e:	4601      	mov	r1, r0
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	f7ff bfd3 	b.w	80027fc <_raise_r>
 8002856:	bf00      	nop
 8002858:	2000004c 	.word	0x2000004c

0800285c <_kill_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	2300      	movs	r3, #0
 8002860:	4d06      	ldr	r5, [pc, #24]	; (800287c <_kill_r+0x20>)
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	f7fd ff01 	bl	8000670 <_kill>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d102      	bne.n	8002878 <_kill_r+0x1c>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	b103      	cbz	r3, 8002878 <_kill_r+0x1c>
 8002876:	6023      	str	r3, [r4, #0]
 8002878:	bd38      	pop	{r3, r4, r5, pc}
 800287a:	bf00      	nop
 800287c:	20000124 	.word	0x20000124

08002880 <_getpid_r>:
 8002880:	f7fd beef 	b.w	8000662 <_getpid>

08002884 <__sread>:
 8002884:	b510      	push	{r4, lr}
 8002886:	460c      	mov	r4, r1
 8002888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288c:	f000 f894 	bl	80029b8 <_read_r>
 8002890:	2800      	cmp	r0, #0
 8002892:	bfab      	itete	ge
 8002894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002896:	89a3      	ldrhlt	r3, [r4, #12]
 8002898:	181b      	addge	r3, r3, r0
 800289a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800289e:	bfac      	ite	ge
 80028a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80028a2:	81a3      	strhlt	r3, [r4, #12]
 80028a4:	bd10      	pop	{r4, pc}

080028a6 <__swrite>:
 80028a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028aa:	461f      	mov	r7, r3
 80028ac:	898b      	ldrh	r3, [r1, #12]
 80028ae:	4605      	mov	r5, r0
 80028b0:	05db      	lsls	r3, r3, #23
 80028b2:	460c      	mov	r4, r1
 80028b4:	4616      	mov	r6, r2
 80028b6:	d505      	bpl.n	80028c4 <__swrite+0x1e>
 80028b8:	2302      	movs	r3, #2
 80028ba:	2200      	movs	r2, #0
 80028bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c0:	f000 f868 	bl	8002994 <_lseek_r>
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	4632      	mov	r2, r6
 80028c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028cc:	81a3      	strh	r3, [r4, #12]
 80028ce:	4628      	mov	r0, r5
 80028d0:	463b      	mov	r3, r7
 80028d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028da:	f000 b817 	b.w	800290c <_write_r>

080028de <__sseek>:
 80028de:	b510      	push	{r4, lr}
 80028e0:	460c      	mov	r4, r1
 80028e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e6:	f000 f855 	bl	8002994 <_lseek_r>
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	bf15      	itete	ne
 80028f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80028f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028fa:	81a3      	strheq	r3, [r4, #12]
 80028fc:	bf18      	it	ne
 80028fe:	81a3      	strhne	r3, [r4, #12]
 8002900:	bd10      	pop	{r4, pc}

08002902 <__sclose>:
 8002902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002906:	f000 b813 	b.w	8002930 <_close_r>
	...

0800290c <_write_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4604      	mov	r4, r0
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	2200      	movs	r2, #0
 8002916:	4d05      	ldr	r5, [pc, #20]	; (800292c <_write_r+0x20>)
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7fd fedf 	bl	80006de <_write>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_write_r+0x1e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_write_r+0x1e>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	20000124 	.word	0x20000124

08002930 <_close_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	2300      	movs	r3, #0
 8002934:	4d05      	ldr	r5, [pc, #20]	; (800294c <_close_r+0x1c>)
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	f7fd feeb 	bl	8000716 <_close>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_close_r+0x1a>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_close_r+0x1a>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	20000124 	.word	0x20000124

08002950 <_fstat_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	2300      	movs	r3, #0
 8002954:	4d06      	ldr	r5, [pc, #24]	; (8002970 <_fstat_r+0x20>)
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	602b      	str	r3, [r5, #0]
 800295e:	f7fd fee5 	bl	800072c <_fstat>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d102      	bne.n	800296c <_fstat_r+0x1c>
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	b103      	cbz	r3, 800296c <_fstat_r+0x1c>
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	bd38      	pop	{r3, r4, r5, pc}
 800296e:	bf00      	nop
 8002970:	20000124 	.word	0x20000124

08002974 <_isatty_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	2300      	movs	r3, #0
 8002978:	4d05      	ldr	r5, [pc, #20]	; (8002990 <_isatty_r+0x1c>)
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f7fd fee3 	bl	800074a <_isatty>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_isatty_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_isatty_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	20000124 	.word	0x20000124

08002994 <_lseek_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4604      	mov	r4, r0
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	2200      	movs	r2, #0
 800299e:	4d05      	ldr	r5, [pc, #20]	; (80029b4 <_lseek_r+0x20>)
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7fd fedb 	bl	800075e <_lseek>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_lseek_r+0x1e>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_lseek_r+0x1e>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	20000124 	.word	0x20000124

080029b8 <_read_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	2200      	movs	r2, #0
 80029c2:	4d05      	ldr	r5, [pc, #20]	; (80029d8 <_read_r+0x20>)
 80029c4:	602a      	str	r2, [r5, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7fd fe6c 	bl	80006a4 <_read>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_read_r+0x1e>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_read_r+0x1e>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	20000124 	.word	0x20000124

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
